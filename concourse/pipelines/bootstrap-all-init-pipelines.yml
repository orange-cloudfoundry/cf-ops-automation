---
display:
  background_image: ((background-image-url))
resource_types:
  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: v1.4.2

resources:
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))

- name: each-6-h-on-weekday
  icon: calendar-clock
  type: time
  source:
    interval: 6h
    days: [ Monday, Tuesday, Wednesday, Thursday, Friday ]
    location: "Europe/Paris"

- name: secrets-full
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-full
  icon: home-assistant
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  icon: rocket
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

jobs:
- name: bootstrap-pipelines
  serial: true
  plan:
  - in_parallel:
    - get: each-6-h-on-weekday
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none}
      trigger: true
    - get: paas-templates-full
      params: { submodules: none}
    - get: secrets-full
      params: { submodules: none}

- name: bootstrap-control-plane
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
      trigger: true
      passed: [ bootstrap-pipelines ]
    - get: secrets-full
      params: { submodules: none}
      passed: [ bootstrap-pipelines ]
      trigger: true
  - task: get-pipeline-teams
    input_mapping: {secrets: secrets-full}
    output_mapping: {ci-deployment-overview: concourse-teams}
    file: cf-ops-automation/concourse/tasks/list_used_ci_team/task.yml
  - task: generate-team-operator
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: library/ruby
          tag: 2.7.1
      inputs:
        - name: concourse-teams
      outputs:
        - name: concourse-pipeline-resource-team-operator
      run:
        path: /bin/bash
        args:
          - -ec
          - |
            cat << EOF >generate_team_operator.rb
            require 'yaml'

            fly_username = ENV['FLY_USERNAME']
            fly_password = ENV['FLY_PASSWORD']
            OPERATOR_FILENAME = 'team-operators.yml'
            operator_file = File.join('concourse-pipeline-resource-team-operator', OPERATOR_FILENAME)
            team_filepath = File.join('concourse-teams',"teams.yml")
            teams_list = YAML.load_file(team_filepath)
            teams_list << 'main' # ensure main team always exists
            teams_list.uniq.sort! # ensure only one main team exists
            content =  "- type: remove\n"
            content += "  path: /resources/name=concourse-micro/source/teams\n"
            content +=  "- type: replace\n"
            content += "  path: /resources/name=concourse-micro/source/teams?\n"
            content += "  value:\n"
            teams_list.each do |team_name|
              content += "  - name: #{team_name}\n"
              content += "    username: #{fly_username}\n"
              content += "    password: \"#{fly_password}\"\n"
            end
            content +=  "- type: remove\n"
            content += "  path: /resources/name=concourse-micro-legacy/source/teams\n"
            content +=  "- type: replace\n"
            content += "  path: /resources/name=concourse-micro-legacy/source/teams?\n"
            content += "  value:\n"
            teams_list.each do |team_name|
              content += "  - name: #{team_name}\n"
              content += "    username: #{fly_username}\n"
              content += "    password: \"#{fly_password}\"\n"
            end

            File.open(operator_file, 'w') { |file| file.write content }
            EOF
            cat generate_team_operator.rb
            ruby generate_team_operator.rb
            cat concourse-pipeline-resource-team-operator/*.yml
      params:
        FLY_USERNAME: ((concourse-micro-depls-username))
        FLY_PASSWORD: "((concourse-micro-depls-password))"
        CONTROL_PLANE_FILE_PATH: "cf-ops-automation/concourse/pipelines/control-plane.yml"
  - task: get-original-control-plane-pipeline
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: library/alpine
          tag: "3.13"
      inputs:
        - name: cf-ops-automation
      outputs:
        - name: manifest-dir
      run:
        path: /bin/sh
        args:
          - -ec
          - |
            cp -v ${PIPELINE_FILE_PATH} manifest-dir
      params:
        PIPELINE_FILE_PATH: "cf-ops-automation/concourse/pipelines/control-plane.yml"
  - task: amend-control-plane-with-team
    input_mapping:
      bosh-inputs: concourse-pipeline-resource-team-operator
      manifest-dir: manifest-dir
      scripts-resource: cf-ops-automation
      secrets: secrets-full
    output_mapping: {result-dir: final-control-plane-pipeline}
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
      VARS_FILES_SUFFIX: vars.yml
      OPS_FILES_SUFFIX:  operators.yml
      BOSH_YAML_FILE: control-plane.yml
  - task: set-control-plane-pipeline
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/curl-ssl
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
        - name: final-control-plane-pipeline
        - name: secrets-full
      outputs:
        - name: initialized-flight-plan
      run:
        path: sh
        args:
        - -ec
        - |
          mkdir -p /usr/local/bin
          FLY=/usr/local/bin/fly
          if [ ! -d secrets-full/coa/config/ ];then
            echo "Missing coa/config directory. Please adjust your configuration"
            exit 1
          fi
          echo "Fetching fly...";
          curl -SsL "$ATC_EXTERNAL_URL/api/v1/cli?arch=amd64&platform=linux" -k > $FLY;
          chmod +x ${FLY};

          ${FLY} login -t main -c "$ATC_EXTERNAL_URL" --username="$FLY_USERNAME" --password="$FLY_PASSWORD" -k 2>&1
          echo "set pipeline ${PIPELINE_FILE_PATH}"
          CONFIG_DIR=secrets-full/coa/config
          FILTERED_CONFIG_FILES=$(cd ${CONFIG_DIR} && ls -1 credentials-*.yml|grep -v pipeline)
          VARS_FILES=""
          for config_file in ${FILTERED_CONFIG_FILES}; do
            VARS_FILES="${VARS_FILES}-l \"${CONFIG_DIR}/${config_file}\" "
          done
          echo ${VARS_FILES}
          FLY_TARGET=main
          PIPELINE=control-plane
          export FLY_SET_PIPELINE_OPTION="--non-interactive"
          set +e
          ${FLY} -t ${FLY_TARGET} set-pipeline ${FLY_SET_PIPELINE_OPTION} -p ${PIPELINE} -c ${PIPELINE_FILE_PATH} ${VARS_FILES}
          set -e

      params:
        ATC_EXTERNAL_URL: ((concourse-micro-depls-target))
        FLY_USERNAME: ((concourse-micro-depls-username))
        FLY_PASSWORD: "((concourse-micro-depls-password))"
        PIPELINE_FILE_PATH: "final-control-plane-pipeline/interpolated-control-plane.yml"

- name: reload-this-pipeline-from-git
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
    - get: secrets-full
      params: { submodules: none}

  - task: update-bootstrap-pipeline
    input_mapping: {scripts-resource: cf-ops-automation,secrets: secrets-full}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/bosh-cli-v2
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
        - name: scripts-resource
        - name: secrets
      run:
        path: sh
        args:
        - -ec
        - |
          export SECRETS=$(pwd)/secrets
          if [ -d ${SECRETS}/coa/config ];then
            CONFIG_DIR=${SECRETS}/coa/config
          else
            CONFIG_DIR=${SECRETS}/micro-depls/concourse-micro/pipelines
          fi
          echo "COA config directory detected: <${CONFIG_DIR}>"
          FILTER_CMD="ls ${CONFIG_DIR}/$CREDENTIALS_FILTER"
          CREDENTIALS_FILES=$(eval $FILTER_CMD)
          ALL_CREDENTIALS_FILE=$(mktemp /tmp/all-credentials.XXXXXX)
          echo "Credentials files used: ${CREDENTIALS_FILES}"
          for FILE in ${CREDENTIALS_FILES};do
            {
             cat ${FILE}
             echo ""
            } >> ${ALL_CREDENTIALS_FILE}
          done
          export ATC_EXTERNAL_URL=$(grep -e "^${ATC_EXTERNAL_URL_KEY}:" ${ALL_CREDENTIALS_FILE} |cut -d':' -f2-|tr -d [:blank:])
          export FLY_USERNAME=$(grep -e "^${FLY_USERNAME_KEY}:" ${ALL_CREDENTIALS_FILE} |cut -d':' -f2-|tr -d [:blank:])
          export FLY_PASSWORD=$(grep -e "^${FLY_PASSWORD_KEY}:" ${ALL_CREDENTIALS_FILE} |cut -d':' -f2-|tr -d [:blank:])

          export IAAS_TYPE=$(grep ${IAAS_TYPE_KEY} ${ALL_CREDENTIALS_FILE} |cut -d':' -f2-|tr -d [:blank:])
          if [ -z "${IAAS_TYPE}" ]
          then
          echo "ERROR: missing environment variable: IAAS_TYPE"
          fi
          echo "Extracted IAAS_TYPE: <${IAAS_TYPE}>"
          echo "Duplicated keys found:"
          cat $ALL_CREDENTIALS_FILE| sort | uniq -c|sort|grep -v '\-\-\-'|grep -v -e "^[ ]*1.*"|cut -d':' -f1
          mkdir -p /usr/local/bin
          FLY=/usr/local/bin/fly
          echo "Fetching fly...";
          wget --no-check-certificate -O "$FLY" "$ATC_EXTERNAL_URL/api/v1/cli?arch=amd64&platform=linux"
          chmod +x $FLY;

          echo "Login to Concourse using extracted credentials (ATC_EXTERNAL_URL, FLY_USERNAME, FLY_PASSWORD)"
          fly login -t main -c "$ATC_EXTERNAL_URL" --username="$FLY_USERNAME" --password="$FLY_PASSWORD" -k 2>&1

          export FLY_TARGET=main
          export FLY_SET_PIPELINE_OPTION="--non-interactive"
          cd scripts-resource/
          echo "Launching concourse-bootstrap.sh"
          ./concourse-bootstrap.sh
      params:
        CREDENTIALS_FILTER: credentials-*.yml|grep -ve '\Wpipeline\W'
        ATC_EXTERNAL_URL_KEY: concourse-micro-depls-target
        FLY_USERNAME_KEY: concourse-micro-depls-username
        FLY_PASSWORD_KEY: concourse-micro-depls-password
        IAAS_TYPE_KEY: iaas-type


- name: create-teams
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 5 }
      trigger: true
      passed: [ bootstrap-pipelines ]
    - get: secrets-full
      params: { submodules: none, depth: 5 }
      passed: [ bootstrap-pipelines ]
      trigger: true
    - get: paas-templates-full
      params: { submodules: none, depth: 5 }
      passed: [ bootstrap-pipelines ]
      trigger: true
  - task: get-pipeline-teams
    input_mapping: {secrets: secrets-full}
    output_mapping: {ci-deployment-overview: concourse-teams}
    file: cf-ops-automation/concourse/tasks/list_used_ci_team/task.yml
  - task: generate-flight-plan
    output_mapping: {result-dir: initialized-flight-plan}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/curl-ssl
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
      - name: concourse-teams
      outputs:
      - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          DEST_DIR=$(pwd)/result-dir
          echo "Dump teams.yml content:"
          cat concourse-teams/teams.yml
          echo "=== end: dump ==="
          for cf_org in ${CF_ORGS_AUTHENTICATION}; do
            CF_ORGS="${CF_ORGS} --cf-org=\"${cf_org}\""
          done
          for ldap_group in ${LDAP_GROUPS_AUTHENTICATION}; do
            LDAP_GROUPS="${LDAP_GROUPS} --ldap-group=\"${ldap_group}\""
          done
          for team_name in $(cat concourse-teams/teams.yml|tail -n +2|cut -c3-); do
            echo "set-team -n $team_name --local-user=\"$FLY_USERNAME\" ${LDAP_GROUPS} ${CF_ORGS} --non-interactive"  >> ${DEST_DIR}/flight-plan
          done
      params:
        FLY_USERNAME: ((concourse-micro-depls-username))
        FLY_PASSWORD: "((concourse-micro-depls-password))"
        LDAP_GROUPS_AUTHENTICATION: ((concourse-ldap-admin-groups))
        CF_ORGS_AUTHENTICATION: ((concourse-cf-admin-groups))


  - task: fly-into-concourse
    input_mapping: {fly-cmd: initialized-flight-plan}
    output_mapping: {flight-report: concourse-<%= depls %>-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-micro-depls-target))
      FLY_USERNAME: ((concourse-micro-depls-username))
      FLY_PASSWORD: "((concourse-micro-depls-password))"


- name: bootstrap-update-pipelines
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none }
      trigger: true
      passed: [ create-teams ]
    - get: paas-templates-full
      params: { submodules: none, depth: 5 }
      passed: [ create-teams ]
      trigger: true
    - get: secrets-full
      params: { submodules: none, depth: 5 }
      passed: [ create-teams ]
      trigger: true
  - task: generate-all-update-pipelines
    input_mapping: {scripts-resource: cf-ops-automation,templates-resource: paas-templates-full,secrets-resource: secrets-full}
    output_mapping: {result-dir: all-pipelines}
    file: cf-ops-automation/concourse/tasks/generate-all-pipelines.yml
    params:
      IAAS_TYPE: ((iaas-type))
      PIPELINE_TYPES: update
  - task: set-all-update-pipelines
    input_mapping: {scripts-resource: cf-ops-automation,templates-resource: paas-templates-full,secrets-resource: secrets-full, pipelines-resource: all-pipelines}
    file: cf-ops-automation/concourse/tasks/bootstrap_init_pipelines.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-micro-depls-target))
      FLY_USERNAME: ((concourse-micro-depls-username))
      FLY_PASSWORD: "((concourse-micro-depls-password))"
      PIPELINE_TYPE: update
  - task: generate-flight-plan
    output_mapping: {result-dir: initialized-flight-plan}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/curl-ssl
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
      - name: all-pipelines
      outputs:
      - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          DEST_DIR=$(pwd)/result-dir
          cd all-pipelines/pipelines
          for aFile in $(ls *update-generated.yml);do
            echo "Processing ${aFile}"
            PIPELINE=$(basename ${aFile} .yml)
            DEPLS=${PIPELINE%%-update-generated}
            echo "trigger-job -j ${PIPELINE}/update-pipeline-${DEPLS}"  >> ${DEST_DIR}/flight-plan
          done
          cat ${DEST_DIR}/flight-plan
      params:
        FLY_USERNAME: ((concourse-micro-depls-username))
        FLY_PASSWORD: "((concourse-micro-depls-password))"
  - task: fly-into-concourse
    input_mapping: {fly-cmd: initialized-flight-plan}
    output_mapping: {flight-report: concourse-<%= depls %>-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-micro-depls-target))
      FLY_USERNAME: ((concourse-micro-depls-username))
      FLY_PASSWORD: "((concourse-micro-depls-password))"

