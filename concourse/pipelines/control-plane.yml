---
display:
  background_image: ((background-image-url))
resource_types:
  - name: concourse-5-pipeline
    type: registry-image
    source:
      repository: concourse/concourse-pipeline-resource
      tag: 5.0.0
  - name: concourse-pipeline
    type: registry-image
    source:
      repository: orangecloudfoundry/concourse-pipeline-resource
      tag: 6.5.0
  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: v1.4.2
  - name: meta
    type: registry-image
    source:
      repository: olhtbr/metadata-resource
      tag: 2.0.1
resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: secrets-generated-pipelines
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
    paths: ["private-config.yml", "coa/config", "coa/pipelines/generated", "shared"]
    # Changes on theses paths are imply updates on generated pipelines: [ "**/ci-deployment-overview.yml", "**/enable-cf-app.yml", "**/enable-deployment.yml" ]
- name: secrets-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
#- name: secrets-full
#  type: git
#  source:
#    uri: ((secrets-uri))
#    branch: ((secrets-branch))
#    skip_ssl_verification: true

- name: paas-templates-versions
  icon: home-thermometer
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
    paths: ["**/root-deployment.yml","*-depls/.last-reset"]
- name: paas-templates-full
  icon: home-assistant
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
- name: paas-templates-scanned
  icon: home-automation
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: cf-ops-automation
  icon: rocket
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

- name: concourse-micro
  icon: concourse-ci
  type: concourse-pipeline
  source: &concourse_config
    target: ((concourse-micro-depls-target))
    insecure: "true"
    teams:
    - name: main
      username: ((concourse-micro-depls-username))
      password: "((concourse-micro-depls-password))"

- name: concourse-micro-legacy
  icon: concourse-ci
  type: concourse-pipeline
  source: *concourse_config

jobs:
- name: save-deployed-pipelines
  build_log_retention:
    builds: 30
  serial: true
  on_failure: &failure_alert
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: cf-ops-automation
      params: { submodules: none}
    - get: secrets-writer
      params: { submodules: none}
    - get: concourse-micro
      trigger: true
#      version: every #not sure we need to trigger on each change
  - task: list-pipelines
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/curl-ssl
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
      - name: concourse-micro
      run:
        path: sh
        args:
        - -ec
        - |
          ls -lrt concourse-micro
          ls -lrt concourse-micro|wc -l
  - task: sort-pipelines
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: teliaoss/concourse-fly
          tag: '20210905'
      inputs:
      - name: concourse-micro
      outputs:
      - name: sorted-pipelines
      run:
        path: /bin/sh
        args:
          - -ec
          - |
            echo "We use fly $(fly --version) to format pipelines"
            cp -p concourse-micro/*.yml sorted-pipelines/
            find sorted-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;

  - task: update-git-deployed-pipelines
    input_mapping: {reference-resource: secrets-writer, generated-resource: sorted-pipelines}
    output_mapping: {updated-git-resource: updated-pipelines}
    file: cf-ops-automation/concourse/tasks/git_update_a_dir_from_generated.yml
    params:
      COMMIT_MESSAGE: "Deployed pipelines update - [skip ci]"
      OLD_DIR: "coa/pipelines/deployed"
  - put: secrets-writer
    params:
      repository: updated-pipelines
      rebase: true

#- name: save-deployed-pipelines-legacy
#  build_log_retention:
#    builds: 30
#  serial: true
#  on_failure: &failure_alert
#    put: failure-alert
#    params:
#      channel: ((slack-channel))
#      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
#      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
#      username: Concourse
#  plan:
#    - in_parallel:
#        - put: concourse-meta
#        - get: cf-ops-automation
#          params: { submodules: none}
#        - get: secrets-writer
#          params: { submodules: none}
#        - get: concourse-micro-legacy
#          trigger: true
#    - task: sort-pipelines
#      config:
#        platform: linux
#        image_resource:
#          type: registry-image
#          source:
#            repository: teliaoss/concourse-fly
#            tag: '20210905'
#        inputs:
#          - name: concourse-micro-legacy
#        outputs:
#          - name: sorted-pipelines
#        run:
#          path: /bin/sh
#          args:
#            - -ec
#            - |
#              echo "We use fly $(fly --version) to format pipelines"
#              cp -p concourse-micro-legacy/*.yml sorted-pipelines/
#              find sorted-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
#
#    - task: update-git-deployed-pipelines
#      input_mapping: {reference-resource: secrets-writer, generated-resource: sorted-pipelines}
#      output_mapping: {updated-git-resource: updated-pipelines}
#      file: cf-ops-automation/concourse/tasks/git_update_a_dir_from_generated.yml
#      params:
#        COMMIT_MESSAGE: "Deployed pipelines update - [skip ci]"
#        OLD_DIR: "coa/pipelines/deployed"
#    - put: secrets-writer
#      params:
#        repository: updated-pipelines
#        rebase: true

- name: on-git-commit
  build_log_retention:
    builds: 30
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
    - get: secrets-generated-pipelines
      params: { submodules: none}
      trigger: true
#      version: every
    - get: paas-templates-full
      params: { submodules: none}
      trigger: true
#      version: every
    - get: paas-templates-versions
      params: { submodules: none}
      trigger: true

- name: load-generated-pipelines
  build_log_retention:
    builds: 30
  serial: true
  on_failure: *failure_alert
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
      passed: [on-git-commit]
    - get: config-resource
      resource: secrets-generated-pipelines
      attempts: 2
      params: { submodules: none}
      trigger: true
#      version: every
      passed: [on-git-commit]
    - get: templates-resource
      resource: paas-templates-versions
      attempts: 2
      params: { submodules: none}
      trigger: true
#      version: every
      passed: [on-git-commit]
  - task: list-pipelines
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/curl-ssl
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
      - name: config-resource
      run:
        path: sh
        args:
        - -c
        - |
          du -a config-resource/coa/pipelines/generated
          du -a config-resource/coa/pipelines/generated|wc -l
  - task: generate-concourse-pipeline-config
    file: cf-ops-automation/concourse/tasks/generate_concourse_pipeline_config/task.yml
  - try:
      put: concourse-micro
      attempts: 3
      params:
        pipelines_file: concourse-pipeline-config/pipelines-definitions.yml
      on_success:
        task: set-success-tag
        output_mapping: { success-tag: concourse-micro-success}
        config: &success_tag
          platform: linux
          image_resource:
            type: registry-image
            source:
              # from https://hub.docker.com/r/orangecloudfoundry/git-ssh/tags
              repository: orangecloudfoundry/git-ssh
              tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
          outputs:
            - name: success-tag
          run:
            path: sh
            args:
              - -ec
              - touch success-tag/task.ok
      on_failure:
        put: concourse-micro-legacy
        attempts: 3
        params:
          pipelines_file: concourse-pipeline-config/pipelines-definitions.yml
        on_success:
          task: set-success-tag
          output_mapping: { success-tag: concourse-micro-legacy-success}
          config: *success_tag

  - task: check-success-tag
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          # from https://hub.docker.com/r/orangecloudfoundry/git-ssh/tags
          repository: orangecloudfoundry/git-ssh
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
        - name: concourse-micro-success
          optional: true
        - name: concourse-micro-legacy-success
          optional: true
      run:
        path: sh
        args:
          - -ec
          - |
            if [ -e concourse-micro-success/task.ok ];then
              echo "Task concourse-micro successfull"
              exit 0
            fi
            if [ -e concourse-micro-legacy-success/task.ok ];then
              echo "Task concourse-micro-legacy successfull"
              exit 0
            fi
            echo "Failed to update pipelines, please check logs"
            exit 1

- name: push-changes
  build_log_retention:
    builds: 30
  serial: true
  on_failure: *failure_alert
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
    - get: paas-templates-versions
      params: { submodules: none}
      trigger: true
      passed: [load-generated-pipelines]
#      version: every
    - get: paas-templates-full
      params: { submodules: none}
      trigger: true
#      version: every
      passed: [on-git-commit]
  - put: paas-templates-scanned
    get_params: {submodules: none}
    attempts: 2
    params:
      repository: paas-templates-full
      force: true

- name: detect-paas-templates-scanned-changes
  build_log_retention:
    builds: 30
  plan:
    - get: paas-templates-scanned
      params: { submodules: none}
      trigger: true
      version: every

- name: manual-reset-avoid-please
  plan:
  - get: cf-ops-automation
    params: { submodules: none}

- name: reset-secrets-pipeline-generation
  on_failure: *failure_alert
  plan:
  - in_parallel:
    - get: secrets-writer
      params: { submodules: none}
    - get: cf-ops-automation
      params: { submodules: none}
      passed: [ manual-reset-avoid-please ]
      trigger: true

  - task: delete-generated-pipelines
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/git-ssh
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
      - name: secrets-writer
      outputs:
      - name: reset-secrets
      run:
        path: sh
        args:
        - -ec
        - |
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"

          git clone secrets-writer reset-secrets
          cd reset-secrets
          DEST_DIR=coa/pipelines/generated
          if [ -d "${DEST_DIR}" ]; then
            cd ${DEST_DIR}
            rm -rfv *
            touch .gitkeep
            git add .
            git commit -m"Reset COA generated pipelines" --allow-empty
          fi
      params:
        GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
        GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
  - put: secrets-writer
    get_params: {submodules: none}
    params:
      repository: reset-secrets
      rebase: true

- name: manual-setup
  serial: true
  on_failure: *failure_alert
  plan:
  - in_parallel:
    - get: paas-templates-full
      params: { submodules: none}
  - task: create-required-branch
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: orangecloudfoundry/git-ssh
          tag: 49a024793f687c3b4843d7fe5880941cb3f6ab99
      inputs:
      - name: paas-templates-full
      outputs:
      - name: empty-templates
      run:
        path: sh
        args:
        - -ec
        - |
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"

          cp -pr paas-templates-full/.git empty-templates/
          cd empty-templates
          git add .
          git commit -m"Initalize empty branch [skip ci]"
      params:
        GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
        GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
  - put: paas-templates-scanned
    get_params: {submodules: none}
    params:
      repository: paas-templates-full
      force: true