<%
  require "#{ops_automation_path}/lib/pipeline_helpers"
  root_deployment_name = "shared"
  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(root_deployment_name).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  teams = CiDeployment.teams(multi_root_ci_deployments)
  teams << 'main' unless teams.include?('main')
  git_shallow_clone_depth = configurer.git_shallow_clone_depth.get
  concourse_retry = configurer.concourse_retry
  jobs = Hash.new {|h,k| h[k]=[]}
  control_plane_jobs = []
  coa_debug_mode = configurer.coa_debug_mode.get
%>
---
display:
  background_image: ((background-image-url))
resource_types:
  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: v1.4.2
  - name: meta
    type: registry-image
    source:
      repository: olhtbr/metadata-resource
      tag: 2.0.1
  - name: concourse-5-pipeline
    type: registry-image
    source:
      repository: concourse/concourse-pipeline-resource
      tag: 5.0.0
  - name: concourse-pipeline
    type: registry-image
    source:
      repository: elpaasoci/concourse-pipeline-resource
      tag: 7.8.2
resources:
- name: concourse-audit-trail
  icon: source-pull
  type: git
  source:
    uri: ((concourse-audit-trail-uri))
    branch: ((concourse-audit-trail-branch))
    skip_ssl_verification: ((concourse-audit-trail-skip-ssl))
    username: ((concourse-audit-trail-username))
    password: ((concourse-audit-trail-password))

- name: paas-templates-versions
  icon: home-thermometer
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
    paths: ["**/root-deployment.yml","*-depls/.last-reset"]
- name: paas-templates-full
  icon: home-assistant
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
- name: paas-templates-scanned
  icon: home-automation
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: cf-ops-automation
  icon: rocket
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

- name: concourse-micro
  icon: concourse-ci
  type: concourse-pipeline
  source: &concourse_config
    target: ((concourse-micro-depls-target))
    insecure: "true"
    teams:
      <% teams&.each do |name| %>
      - name: <%= name %>
        username: ((concourse-micro-depls-username))
        password: "((concourse-micro-depls-password))"
      <% end %>
- name: concourse-micro-legacy
  icon: concourse-ci
  type: concourse-pipeline
  source: *concourse_config

<% if root_deployments&.any? %>
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: secrets-generated-pipelines
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
    paths: ["private-config.yml", "coa/config", "coa/pipelines/generated", "shared"]
    # Changes on these paths are imply updates on generated pipelines: [ "**/ci-deployment-overview.yml", "**/enable-cf-app.yml", "**/enable-deployment.yml" ]

- name: secrets-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: secrets-limited-for-pipeline
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
    paths: [ "*-depls/ci-deployment-overview.yml", coa/config, "coa/pipelines/generated/**/*-generated.yml", shared, private-config.yml, "*-depls/**/enable-cf-app.yml", "*-depls/**/enable-deployment.yml" ]

- name: paas-templates-limited
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
    paths: [ '*-depls/**', '.gitmodules', 'shared-config.yml', 'meta-inf.yml' ]

<% end %>

jobs:
<% if root_deployments&.any? %>
<% root_deployments&.each do |root_deployment_name| %>
<% pipeline_name="shared-update-generated" %>

  - name: update-pipeline-<%= root_deployment_name %>
    <% jobs[root_deployment_name] << "update-pipeline-#{root_deployment_name}" %>
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
    - in_parallel:
      - put: concourse-meta
      - get: paas-templates-limited
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        attempts: <%= concourse_retry[:pull] %>
        trigger: true
      - get: secrets-limited-for-pipeline
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        attempts: <%= concourse_retry[:pull] %>
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        attempts: <%= concourse_retry[:pull] %>
        trigger: true

    - task: generate-<%= root_deployment_name %>-pipelines
      input_mapping: {scripts-resource: cf-ops-automation,templates: paas-templates-limited,secrets: secrets-limited-for-pipeline}
      output_mapping: {result-dir: concourse-generated-pipeline}
      file: cf-ops-automation/concourse/tasks/generate_depls/task.yml
      params:
        ROOT_DEPLOYMENT: <%= root_deployment_name %>
        IAAS_TYPE: ((iaas-type))
        EXCLUDE_PIPELINES: depls
        PROFILES: ((profiles))
    - task: copy-and-filter-generated-pipeline
      input_mapping: {templates: paas-templates-limited,config: secrets-limited-for-pipeline}
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
              repository: library/ruby
              tag: 3.1.2-slim
        inputs:
        - name: cf-ops-automation
        - name: config
        - name: concourse-generated-pipeline
        outputs:
        - name: selected-pipelines
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            du -a concourse-generated-pipeline/concourse/pipelines
            cat << EOF >copy_pipelines.rb
            require 'fileutils'
            require 'yaml'
            root_deployment = ENV["ROOT_DEPLOYMENT"]
            ci_overview_file = File.join("config",root_deployment ,"ci-deployment-overview.yml")
            raise "ERROR - Missing file : #{ci_overview_file}" unless File.exist?(ci_overview_file)

            ci_overview=YAML.load_file(ci_overview_file, aliases: true)
            ci_overview["ci-deployment"][root_deployment]["pipelines"].each do |pipeline_name,pipeline_details|
              puts "Processing #{pipeline_name} with ${pipeline_details}"
              team = (pipeline_details && pipeline_details["team"]) || "main"
              pipeline_dest_dir = File.join("selected-pipelines", team, root_deployment)
              FileUtils.mkdir_p(pipeline_dest_dir)
              pipeline_filename = File.join("concourse-generated-pipeline","concourse","pipelines","#{pipeline_name}.yml")
              FileUtils.cp(pipeline_filename, pipeline_dest_dir) if File.exist?(pipeline_filename)
            end
            EOF
            ruby copy_pipelines.rb
            echo "Filtering pipelines:"
            cat << EOF >filter_pipelines.rb
            require 'fileutils'
            require 'yaml'
            Dir[File.join("selected-pipelines","**","*.yml")].each do |file_path|
              file_content = YAML.load_file(file_path, aliases: true)
              if file_content["jobs"]&.fetch(0)&.fetch("name") == "this-is-an-empty-pipeline"
               puts " deleting empty pipeline: #{file_path}";
               FileUtils.rm(file_path)
              else
               puts " keeping #{file_path}"
              end
            end
            EOF
            ruby filter_pipelines.rb
      params:
        ROOT_DEPLOYMENT: <%= root_deployment_name %>
    - task: format-pipelines
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: orange-cloudfoundry/concourse-fly
            tag: "7.9.1"
        inputs:
          - name: selected-pipelines
        outputs:
          - name: formated-pipelines
        run:
          path: /bin/sh
          args:
            - -ec
            - |
              echo "We use fly $(fly --version) to format pipelines"
              cp -rp selected-pipelines/* formated-pipelines/
              find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
    - task: update-git-generated-pipelines
      input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
      output_mapping: {updated-git-resource: generated-pipelines}
      file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
      params:
        COMMIT_MESSAGE: "Generated pipelines update for <%= root_deployment_name %>"
        OLD_DIR: "coa/pipelines/generated"
    - put: secrets-writer
      attempts: <%= concourse_retry[:push] %>
      params:
        repository: generated-pipelines
        rebase: true
 <% end %>


  - name: update-pipeline-shared
    <% jobs['shared'] << "update-pipeline-shared" %>
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
      - in_parallel:
          - put: concourse-meta
          - get: paas-templates-limited
            params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
            attempts: <%= concourse_retry[:pull] %>
            trigger: true
          - get: secrets-limited-for-pipeline
            params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
            attempts: <%= concourse_retry[:pull] %>
            trigger: true
          - get: cf-ops-automation
            params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
            attempts: <%= concourse_retry[:pull] %>
            trigger: true

      - task: generate-shared-pipelines
        input_mapping: {scripts-resource: cf-ops-automation,templates-resource: paas-templates-limited,secrets-resource: secrets-limited-for-pipeline}
        output_mapping: {result-dir: concourse-generated-pipeline}
        file: cf-ops-automation/concourse/tasks/generate-shared-pipelines.yml
        params:
          IAAS_TYPE: ((iaas-type))
          PROFILES: ((profiles))
          DEBUG: <%= coa_debug_mode %>
      - task: copy-and-format-pipelines
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: orange-cloudfoundry/concourse-fly
              tag: "7.9.1"
          inputs:
            - name: concourse-generated-pipeline
          outputs:
            - name: formated-pipelines
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                pipeline_input_dir="concourse-generated-pipeline/pipelines"
                du -a $pipeline_input_dir
                pipeline_dest_dir="formated-pipelines/main/shared"
                mkdir -p $pipeline_dest_dir
                cp -rp $pipeline_input_dir/* ${pipeline_dest_dir}/

                echo "We use fly $(fly --version) to format pipelines"
                find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
      - task: update-git-generated-pipelines
        input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
        output_mapping: {updated-git-resource: generated-pipelines}
        file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
        params:
          COMMIT_MESSAGE: "Generated pipelines update for <%= root_deployment_name %>"
          OLD_DIR: "coa/pipelines/generated"
      - put: secrets-writer
        attempts: <%= concourse_retry[:push] %>
        params:
          repository: generated-pipelines
          rebase: true
<% end %>
  - name: save-deployed-pipelines
    <% control_plane_jobs << "save-deployed-pipelines" %>
    build_log_retention:
      builds: 30
    serial: true
    on_failure: &failure_alert
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - in_parallel:
          - put: concourse-meta
          - get: cf-ops-automation
            params: { submodules: none}
          - get: concourse-micro
            trigger: true
          - get: concourse-audit-trail
            params: { submodules: none}
      #      version: every #not sure we need to trigger on each change
      - task: list-pipelines
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/curl-ssl
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: concourse-micro
          run:
            path: sh
            args:
              - -ec
              - |
                ls -lrt concourse-micro
                ls -lrt concourse-micro|wc -l
      - task: sort-pipelines
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: orange-cloudfoundry/concourse-fly
              tag: '7.9.1'
          inputs:
            - name: concourse-micro
          outputs:
            - name: sorted-pipelines
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                echo "We use fly $(fly --version) to format pipelines"
                cp -p concourse-micro/*.yml sorted-pipelines/
                find sorted-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;

      - task: update-git-deployed-pipelines
        input_mapping: {reference-resource: concourse-audit-trail, generated-resource: sorted-pipelines}
        output_mapping: {updated-git-resource: updated-pipelines}
        file: cf-ops-automation/concourse/tasks/git_update_a_dir_from_generated.yml
        params:
          COMMIT_MESSAGE: "Deployed pipelines update - [skip ci]"
          OLD_DIR: "coa/pipelines/deployed"
      - put: concourse-audit-trail
        params:
          repository: updated-pipelines
          rebase: true

  #- name: save-deployed-pipelines-legacy
  #  build_log_retention:
  #    builds: 30
  #  serial: true
  #  on_failure: &failure_alert
  #    put: failure-alert
  #    params:
  #      channel: ((slack-channel))
  #      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
  #      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
  #      username: Concourse
  #  plan:
  #    - in_parallel:
  #        - put: concourse-meta
  #        - get: cf-ops-automation
  #          params: { submodules: none}
  #        - get: secrets-writer
  #          params: { submodules: none}
  #        - get: concourse-micro-legacy
  #          trigger: true
  #    - task: sort-pipelines
  #      config:
  #        platform: linux
  #        image_resource:
  #          type: registry-image
  #          source:
  #            repository: orange-cloudfoundry/concourse-fly
  #            tag: '7.9.1'
  #        inputs:
  #          - name: concourse-micro-legacy
  #        outputs:
  #          - name: sorted-pipelines
  #        run:
  #          path: /bin/sh
  #          args:
  #            - -ec
  #            - |
  #              echo "We use fly $(fly --version) to format pipelines"
  #              cp -p concourse-micro-legacy/*.yml sorted-pipelines/
  #              find sorted-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
  #
  #    - task: update-git-deployed-pipelines
  #      input_mapping: {reference-resource: secrets-writer, generated-resource: sorted-pipelines}
  #      output_mapping: {updated-git-resource: updated-pipelines}
  #      file: cf-ops-automation/concourse/tasks/git_update_a_dir_from_generated.yml
  #      params:
  #        COMMIT_MESSAGE: "Deployed pipelines update - [skip ci]"
  #        OLD_DIR: "coa/pipelines/deployed"
  #    - put: secrets-writer
  #      params:
  #        repository: updated-pipelines
  #        rebase: true

  - name: on-git-commit
    <% control_plane_jobs << "on-git-commit" %>
    build_log_retention:
      builds: 30
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - in_parallel:
          - get: cf-ops-automation
            params: { submodules: none}
          - get: secrets-generated-pipelines
            params: { submodules: none}
            trigger: true
          #      version: every
          - get: paas-templates-full
            params: { submodules: none}
            trigger: true
          #      version: every
          - get: paas-templates-versions
            params: { submodules: none}
            trigger: true

  - name: load-generated-pipelines
    <% control_plane_jobs << "load-generated-pipelines" %>
    build_log_retention:
      builds: 30
    serial: true
    on_failure: *failure_alert
    plan:
      - in_parallel:
          - get: cf-ops-automation
            params: { submodules: none}
            passed: [on-git-commit]
          - get: config-resource
            resource: secrets-generated-pipelines
            attempts: 2
            params: { submodules: none}
            trigger: true
            #      version: every
            passed: [on-git-commit]
          - get: templates-resource
            resource: paas-templates-versions
            attempts: 2
            params: { submodules: none}
            trigger: true
            #      version: every
            passed: [on-git-commit]
      - task: list-pipelines
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/curl-ssl
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: config-resource
          run:
            path: sh
            args:
              - -c
              - |
                du -a config-resource/coa/pipelines/generated
                du -a config-resource/coa/pipelines/generated|wc -l
      - task: generate-concourse-pipeline-config
        file: cf-ops-automation/concourse/tasks/generate_concourse_pipeline_config/task.yml
      - try:
          put: concourse-micro
          attempts: 3
          params:
            pipelines_file: concourse-pipeline-config/pipelines-definitions.yml
          on_success:
            task: set-success-tag
            output_mapping: { success-tag: concourse-micro-success}
            config: &success_tag
              platform: linux
              image_resource:
                type: registry-image
                source:
                  # from https://hub.docker.com/r/elpaasoci/git-ssh/tags
                  repository: elpaasoci/git-ssh
                  tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
              outputs:
                - name: success-tag
              run:
                path: sh
                args:
                  - -ec
                  - touch success-tag/task.ok
          on_failure:
            put: concourse-micro-legacy
            attempts: 3
            params:
              pipelines_file: concourse-pipeline-config/pipelines-definitions.yml
            on_success:
              task: set-success-tag
              output_mapping: { success-tag: concourse-micro-legacy-success}
              config: *success_tag

      - task: check-success-tag
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              # from https://hub.docker.com/r/elpaasoci/git-ssh/tags
              repository: elpaasoci/git-ssh
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: concourse-micro-success
              optional: true
            - name: concourse-micro-legacy-success
              optional: true
          run:
            path: sh
            args:
              - -ec
              - |
                if [ -e concourse-micro-success/task.ok ];then
                  echo "Task concourse-micro successfull"
                  exit 0
                fi
                if [ -e concourse-micro-legacy-success/task.ok ];then
                  echo "Task concourse-micro-legacy successfull"
                  exit 0
                fi
                echo "Failed to update pipelines, please check logs"
                exit 1

  - name: push-changes
    <% control_plane_jobs << "push-changes" %>
    build_log_retention:
      builds: 30
    serial: true
    on_failure: *failure_alert
    plan:
      - in_parallel:
          - get: cf-ops-automation
            params: { submodules: none}
          - get: paas-templates-versions
            params: { submodules: none}
            trigger: true
            passed: [load-generated-pipelines]
          #      version: every
          - get: paas-templates-full
            params: { submodules: none}
            trigger: true
            #      version: every
            passed: [on-git-commit]
      - put: paas-templates-scanned
        get_params: {submodules: none}
        attempts: 2
        params:
          repository: paas-templates-full
          force: true

  - name: manual-reset-avoid-please
    <% control_plane_jobs << "manual-reset-avoid-please" %>
    plan:
      - get: cf-ops-automation
        params: { submodules: none}

  - name: reset-secrets-pipeline-generation
    <% control_plane_jobs << "reset-secrets-pipeline-generation" %>
    on_failure: *failure_alert
    plan:
      - in_parallel:
          - get: secrets-writer
            params: { submodules: none}
          - get: cf-ops-automation
            params: { submodules: none}
            passed: [ manual-reset-avoid-please ]
            trigger: true

      - task: delete-generated-pipelines
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/git-ssh
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: secrets-writer
          outputs:
            - name: reset-secrets
          run:
            path: sh
            args:
              - -ec
              - |
                git config --global user.email "$GIT_USER_EMAIL"
                git config --global user.name "$GIT_USER_NAME"

                git clone secrets-writer reset-secrets
                cd reset-secrets
                DEST_DIR=coa/pipelines/generated
                if [ -d "${DEST_DIR}" ]; then
                  cd ${DEST_DIR}
                  rm -rfv *
                  touch .gitkeep
                  git add .
                  git commit -m"Reset COA generated pipelines" --allow-empty
                fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
      - put: secrets-writer
        get_params: {submodules: none}
        params:
          repository: reset-secrets
          rebase: true

  - name: manual-setup
    <% control_plane_jobs << "manual-setup" %>
    serial: true
    on_failure: *failure_alert
    plan:
      - in_parallel:
          - get: paas-templates-full
            params: { submodules: none}
      - task: create-required-branch
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/git-ssh
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: paas-templates-full
          outputs:
            - name: empty-templates
          run:
            path: sh
            args:
              - -ec
              - |
                git config --global user.email "$GIT_USER_EMAIL"
                git config --global user.name "$GIT_USER_NAME"

                cp -pr paas-templates-full/.git empty-templates/
                cd empty-templates
                git add .
                git commit -m"Initalize empty branch [skip ci]"
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
      - put: paas-templates-scanned
        get_params: {submodules: none}
        params:
          repository: paas-templates-full
          force: true


groups:
  - name: all
    jobs: ["*"]
  - name: control-plane
    jobs:
  <% control_plane_jobs&.sort.each do |job_name| %>
      - <%= job_name %>
  <% end %>
  - name: update
    jobs:
<% jobs.sort.each do |_, job_names| %>
  <% job_names&.sort.each do |job_name| %>
      <% if job_name.start_with?("update-") %>
      - <%= job_name %>
      <% end %>
  <% end %>
<% end %>

<% jobs.sort.each do |group_name, job_names| %>
  - name: <%= group_name.downcase %>
    jobs:
  <% job_names&.sort.each do |job_name| %>
      - <%= job_name %>
  <% end %>
<% end %>