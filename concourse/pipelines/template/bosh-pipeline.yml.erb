<%
  require "#{ops_automation_path}/lib/pipeline_helpers"
  root_deployment_name = depls

  terraform_config_path = nil
  if all_ci_deployments&.any? && all_ci_deployments&.dig(root_deployment_name, PipelineHelpers::TERRAFORM_CONFIG_DIRNAME_KEY)
    terraform_config_path = all_ci_deployments.dig(root_deployment_name, PipelineHelpers::TERRAFORM_CONFIG_DIRNAME_KEY, 'state_file_path')
    terraform_config_path_value = ", \"#{terraform_config_path}\""
  end

  disabled_deployments = all_dependencies.select do |_, deployment_info|
    deployment_info['status'] == 'disabled'
  end

  enabled_deployments = all_dependencies.select do |_, deployment_info|
    deployment_info['status'] == 'enabled' && deployment_info['bosh-deployment']
  end

  uniq_releases = {}
  enabled_deployments&.sort&.each do |name, boshrelease|
    boshrelease['releases']&.each do |release, info|
      previous_info = uniq_releases[release]
      raise "Inconsitency detected with '#{release}' boshrelease, in '#{name}' deployment: trying to replace\n#{previous_info} with \n#{info}" if previous_info && ! info.eql?(previous_info)
      uniq_releases[release] = info
    end
  end

  offline_stemcells_enabled = config&.dig('offline-mode', 'stemcells') && true
  offline_boshreleases_enabled = config&.dig('offline-mode', 'boshreleases') && true
  precompile_pipeline_enabled = config&.fetch('precompile-mode', true) && true
  jobs = Hash.new {|h,k| h[k]=[]}

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(root_deployment_name).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  enabled_parallel_execution_limit = configurer.parallel_execution_limit.overridden?
  git_shallow_clone_depth = configurer.git_shallow_clone_depth.get

  current_team = CiDeployment.team(all_ci_deployments, root_deployment_name, "#{root_deployment_name}-bosh-generated")
%>

---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: ((docker-registry-url))cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: bosh-deployment-v2
  type: docker-image
  source:
    repository: ((docker-registry-url))cloudfoundry/bosh-deployment-resource
    tag: v2.12.0

- name: bosh-errand
  type: docker-image
  source:
    repository: ((docker-registry-url))cfcommunity/bosh2-errand-resource
    tag: v0.1.2

- name: meta
  type: docker-image
  source:
    repository: ((docker-registry-url))olhtbr/metadata-resource
    tag: 2.0.1

resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta

- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))

- name: secrets-<%= root_deployment_name %>-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "<%= root_deployment_name %>/ci-deployment-overview.yml", "<%= root_deployment_name %>/secrets", "shared"<%= terraform_config_path_value || '' %>]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-<%= root_deployment_name %>
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "<%= root_deployment_name %>/root-deployment.yml", "<%= root_deployment_name %>/template"<%= terraform_config_path_value || '' %>]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

<% unless enabled_deployments.empty? %>
- name: ((stemcell-main-name))
  <% if offline_stemcells_enabled %>
  type: s3
  icon: home-floor-l
  source:
    bucket: ((s3-stemcell-bucket))
    region_name: ((s3-stemcell-region-name))
    regexp: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-(.*)-((stemcell-main-name)).tgz
    access_key_id: ((s3-stemcell-access-key-id))
    secret_access_key: ((s3-stemcell-secret-key))
    endpoint: ((s3-stemcell-endpoint))
    skip_ssl_verification: ((s3-stemcell-skip-ssl-verification))
    skip_download: true
  version: { path: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell.version))-((stemcell-main-name)).tgz }
  <% else %>
  type: bosh-io-stemcell
  icon: home-floor-g
  source:
    name: ((stemcell-name-prefix))((stemcell-main-name))
  version: { version: "((stemcell.version))" }
  <% end %>
<% end %>

<% enabled_deployments.sort.each do |name, boshrelease|
  secrets_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: root_deployment_name,
    name: name,
    git_submodules: git_submodules,
    config: boshrelease,
    config_key: 'secrets',
    defaults: ["#{root_deployment_name}/#{name}", "shared"])
  paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: root_deployment_name,
    name: name,
    git_submodules: git_submodules,
    config: boshrelease,
    config_key: 'templates',
    defaults: ["#{root_deployment_name}/#{name}"])
  paas_templates_selected_paths << "#{root_deployment_name}/root-deployment.yml" if paas_templates_selected_paths
%>
<% deployment_details = PipelineHelpers::DeploymentDetails.new(name, boshrelease) %>
<% if deployment_details.local_deployment_secrets_scan? %>
- name: secrets-<%= name %>
  icon: source-merge
  type: git
  source:
    uri: ((secrets-uri))
    paths: <%= secrets_selected_paths %>
    branch: ((secrets-branch))
    skip_ssl_verification: true
<% end %>
- name: paas-templates-<%= name %>
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: <%= paas_templates_selected_paths %>
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true

- name: <%= name %>-deployment
  icon: cube-send
  type: bosh-deployment-v2
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: "((bosh-password))"
    deployment: <%= name %>
    ca_cert: <%= bosh_cert[root_deployment_name]&.dump %>

  <% if deployment_details.errands? || deployment_details.manual_errands? %>
- name: errand-<%= name %>
  icon: arrange-send-to-back
  type: bosh-errand
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: "((bosh-password))"
    deployment: <%= name %>
    ca_cert: <%= bosh_cert[root_deployment_name]&.dump %>
  <% end %>
<% end %>

<% if enabled_deployments.any? || disabled_deployments.any? || all_ci_deployments&.any? %>
- name: secrets-<%= root_deployment_name %>-trigger
  icon: source-commit
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "<%= root_deployment_name %>", "shared"<%= terraform_config_path_value || '' %>]
    branch: ((secrets-branch))
    skip_ssl_verification: true
<% end %>

<% if enabled_deployments.any? %>
- name: paas-templates-<%= root_deployment_name %>-versions
  icon: home-thermometer
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["<%= root_deployment_name %>/root-deployment.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
<% end %>

<% if disabled_deployments.any? %>
- name: paas-templates-full
  icon: home-assistant
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
  <% end %>

<% uniq_releases.sort.each do |release, info| %>
- name: <%= release %>
  <% if offline_boshreleases_enabled %>
  icon: home-floor-a
  type: s3
  source:
    bucket: ((s3-br-bucket))
    region_name: ((s3-br-region-name))
    regexp: <%= info['repository']&.split('/')&.first %>/<%= release %>-(.*).tgz
    access_key_id: ((s3-br-access-key-id))
    secret_access_key: ((s3-br-secret-key))
    endpoint: ((s3-br-endpoint))
    skip_ssl_verification: ((s3-br-skip-ssl-verification))
    skip_download: true
  version: { path: <%= info['repository']&.split('/')&.first %>/<%= release %>-((releases.<%= release %>.version)).tgz }
  <% else %>
  type: git
  icon:  github-circle
  source:
    uri: <%= PipelineHelpers.full_repository(info) %>
    tag_filter: <%= PipelineHelpers.tag_prefix(info) %>((releases.<%= release %>.version))
    skip_ssl_verification: false
#    access_token: ((bot-github-access-token))
  version: { ref: <%= PipelineHelpers.tag_prefix(info) %>((releases.<%= release %>.version)) }
  <% end %>
<% end %>

jobs:
- name: push-boshreleases
    <% jobs['utils'] << 'push-boshreleases' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      - get : secrets-<%= root_deployment_name %>-limited
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      - get: paas-templates-<%= root_deployment_name %>
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true

    <% if offline_boshreleases_enabled %>
    - task: reformat-root-deployment-yml
      input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %> }
      output_mapping: { to-csv: expected-boshreleases }
      file: cf-ops-automation/concourse/tasks/reformat_expected_boshreleases_list/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
    - task: missing-s3-boshreleases
      input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %> }
      file:  cf-ops-automation/concourse/tasks/s3_missing_boshreleases/task.yml
      params:
        BUCKET: ((s3-br-bucket))
        REGION_NAME: ((s3-br-region-name))
        ACCESS_KEY_ID: ((s3-br-access-key-id))
        SECRET_ACCESS_KEY: ((s3-br-secret-key))
        ENDPOINT: ((s3-br-endpoint))
        SKIP_SSL_VERIFICATION: ((s3-br-skip-ssl-verification))
    <% end %>

    - task: repackage-releases
      input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %>, secrets: secrets-<%= root_deployment_name %>-limited }
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_TARGET: ((bosh-target))
        BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>

    <% if offline_boshreleases_enabled %>
    - task: upload-repackaged-releases
      input_mapping: { local-files-dir: repackaged-releases, templates-resource: paas-templates-<%= root_deployment_name %> }
      file:  cf-ops-automation/concourse/tasks/s3_boshreleases_upload/task.yml
      params:
        BUCKET: ((s3-br-bucket))
        REGION_NAME: ((s3-br-region-name))
        ACCESS_KEY_ID: ((s3-br-access-key-id))
        SECRET_ACCESS_KEY: ((s3-br-secret-key))
        ENDPOINT: ((s3-br-endpoint))
        SKIP_SSL_VERIFICATION: ((s3-br-skip-ssl-verification))
    <% end %>
    <% if !offline_boshreleases_enabled || !precompile_pipeline_enabled %>
    - task: upload-to-director
      input_mapping: { config-resource: secrets-<%= root_deployment_name %>-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_releases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
    <% end %>

- name: push-stemcell
    <% jobs['utils'] << 'push-stemcell' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get : secrets-<%= root_deployment_name %>-limited
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-templates-<%= root_deployment_name %>
        params: { submodules: none }
        trigger: true
    <% if offline_stemcells_enabled %>
    - task: upload-stemcells
      attempts: 2
      input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %> }
      file:  cf-ops-automation/concourse/tasks/s3_stemcells_upload/task.yml
      params:
        BUCKET: ((s3-stemcell-bucket))
        REGION_NAME: ((s3-stemcell-region-name))
        ACCESS_KEY_ID: ((s3-stemcell-access-key-id))
        SECRET_ACCESS_KEY: ((s3-stemcell-secret-key))
        ENDPOINT: ((s3-stemcell-endpoint))
        SKIP_SSL_VERIFICATION: ((s3-stemcell-skip-ssl-verification))
        STEMCELL_VERSION: ((stemcell.version))
        STEMCELL_PREFIX: ((stemcell-name-prefix))
        STEMCELL_MAIN_NAME: ((stemcell-main-name))
        STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells
    <% end %>
    <% if !offline_stemcells_enabled || !precompile_pipeline_enabled %>
    - task: download-stemcell
      attempts: 2
      output_mapping: { stemcell: ((stemcell-main-name)) }
      file:  cf-ops-automation/concourse/tasks/download_stemcell/task.yml
      params:
        STEMCELL_VERSION: ((stemcell.version))
        STEMCELL_PREFIX: ((stemcell-name-prefix))
        STEMCELL_MAIN_NAME: ((stemcell-main-name))
        STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells

    - task: upload-to-director
      attempts: 2
      input_mapping: { stemcell: ((stemcell-main-name)), config-resource: secrets-<%= root_deployment_name %>-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_stemcell/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
    <% end %>


- name: cancel-all-bosh-tasks
  <% jobs['utils'] << 'cancel-all-bosh-tasks' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get : secrets-<%= root_deployment_name %>-limited
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
  - task: cancel-all-bosh-tasks
    input_mapping: { scripts-resource: cf-ops-automation, secrets: secrets-<%= root_deployment_name %>-limited }
    file:  cf-ops-automation/concourse/tasks/bosh_cancel_all_tasks/task.yml
    params:
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: ((bosh-password))
      BOSH_TARGET: ((bosh-target))
      BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>

<% if disabled_deployments.any? %>
- name: delete-deployments-review
  <% jobs['utils'] << 'delete-deployments-review' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-templates-full
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      - get: secrets-<%= root_deployment_name %>-trigger
        version: every
        trigger: true
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - task: prepare_deployment_to_be_deleted
      input_mapping: {scripts-resource: cf-ops-automation, config-resource: secrets-<%= root_deployment_name %>-trigger}
      file: cf-ops-automation/concourse/tasks/bosh_delete_plan/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_TARGET: ((bosh-target))
        BOSH_CA_CERT: config-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
- name: approve-and-delete-disabled-deployments
  <% jobs['utils'] << 'approve-and-delete-disabled-deployments' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        passed: [delete-deployments-review]
      - get: secrets-<%= root_deployment_name %>-trigger
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        passed: [delete-deployments-review]
      - put: concourse-meta
    - task: delete_deployments
      input_mapping: {scripts-resource: cf-ops-automation, config-resource: secrets-<%= root_deployment_name %>-trigger}
      output_mapping: {output-config-resource: updated-config-resource}
      file: cf-ops-automation/concourse/tasks/bosh_delete_apply/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: config-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        COMMIT_MESSAGE: "${ROOT_DEPLOYMENT_NAME}: Automated Bosh and Secrets Cleanup"
      ensure:
        put: secrets-full-writer
        get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        params:
          repository: updated-config-resource
          rebase: true
<% end %>

- name: execute-deploy-script
  <% jobs['utils'] << 'execute-deploy-script' %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: secrets-<%= root_deployment_name %>-limited
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-templates-<%= root_deployment_name %>
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }

    - task: run-deploy.sh
      input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-<%= root_deployment_name %>, secrets: secrets-<%= root_deployment_name %>-limited}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: <%= root_deployment_name %>/template
        COMMON_SCRIPT_DIR: scripts-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>

- name: cloud-config-and-runtime-config-for-<%= root_deployment_name %>
  <% jobs['utils'] << "cloud-config-and-runtime-config-for-#{root_deployment_name}" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: secrets-<%= root_deployment_name %>-limited
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
    - get: paas-templates-<%= root_deployment_name %>
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
    - task: generate-<%= root_deployment_name %>-all-config
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= root_deployment_name %>-limited, additional-resource: paas-templates-<%= root_deployment_name %>}
      output_mapping: {generated-files: config-manifest}
      file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= root_deployment_name %>/
        YML_TEMPLATE_DIR: additional-resource/<%= root_deployment_name %>/template
        YML_FILES: |
            ./credentials-resource/<%= root_deployment_name %>/secrets/meta.yml
            ./credentials-resource/<%= root_deployment_name %>/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
            ./additional-resource/meta-inf.yml
        CUSTOM_SCRIPT_DIR: additional-resource/<%= root_deployment_name %>/template
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))

    - in_parallel:
      - task: update-cloud-config-for-<%= root_deployment_name %>
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-<%= root_deployment_name %>-limited}
        output_mapping: {deployed-config: deployed-cloud-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
          CONFIG_TYPE: cloud
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        ensure:
          task: update-cloud-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cloud-config}
          output_mapping: {updated-git-resource: updated-cloud-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%= root_deployment_name %>/cloud-config.yml"
            NEW_FILE: "cloud-config.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "<%= root_deployment_name %> cloud-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
            params:
              repository: updated-cloud-config
              rebase: true

      - task: update-runtime-config-for-<%= root_deployment_name %>
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-<%= root_deployment_name %>-limited}
        output_mapping: {deployed-config: deployed-runtime-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: "((bosh-password))"
           BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
           CONFIG_TYPE: runtime
           CREDHUB_SERVER: ((credhub-server))
           CREDHUB_CLIENT: ((credhub-client))
           CREDHUB_SECRET: "((credhub-secret))"
           CREDHUB_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        ensure:
          task: update-runtime-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-runtime-config}
          output_mapping: {updated-git-resource: updated-runtime-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%= root_deployment_name %>/runtime-config.yml"
            NEW_FILE: "runtime-config.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "<%= root_deployment_name %> runtime-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
            params:
              repository: updated-runtime-config
              rebase: true

      - task: update-cpi-config-for-<%= root_deployment_name %>
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-<%= root_deployment_name %>-limited}
        output_mapping: {deployed-config: deployed-cpi-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
          CONFIG_TYPE: cpi
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        ensure:
          task: update-cpi-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cpi-config}
          output_mapping: {updated-git-resource: updated-cpi-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%= root_deployment_name %>/cpi-config.yml"
            NEW_FILE: "cpi-config.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "<%= root_deployment_name %> cpi-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
            params:
              repository: updated-cpi-config
              rebase: true


<% enabled_deployments.sort.each do |name, boshrelease| %>
<% current_serial_group = configurer.serial_group_strategy.generate(name, boshrelease) %>
<% deployment_details = PipelineHelpers::DeploymentDetails.new(name, boshrelease) %>
- name: deploy-<%= name %>
  <% jobs["deploy-#{name[0]}*"] << "deploy-#{name}" %>
  serial: true
  <%= "serial_groups: [#{current_serial_group}]" if enabled_parallel_execution_limit%>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: ((stemcell-main-name))
      trigger: true
      tarball: false
      attempts: 2
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
  <% deployment_details.releases.each do |release, _info| %>
    - get: <%= release %>
      trigger: true
      tarball: false
      attempts: 2
  <% end %>
  <% if deployment_details.local_deployment_secrets_scan? %>
    - get: secrets-<%= name %>
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: <%= deployment_details.local_deployment_secrets_trigger? %>
  <% end %>
    - get: paas-templates-<%= name %>
      trigger: true
      params:
  <%
    paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
      depls: root_deployment_name,
      name: name,
      git_submodules: git_submodules,
      config: boshrelease,
      config_key: 'templates',
      defaults: ["#{root_deployment_name}/#{name}"]
    )
    submodules = PipelineHelpers.git_resource_loaded_submodules(
      depls: root_deployment_name,
      name: name,
      loaded_submodules: git_submodules,
      observed_paths: paas_templates_selected_paths
    )
  %>
        submodules: <%= submodules %>
        submodule_recursive: "<%= deployment_details.git_details.submodule_recursive %>" # this must be a string
        depth: <%= deployment_details.git_details.depth? ? deployment_details.git_details.depth : git_shallow_clone_depth %>
  - task: check-configuration
    input_mapping:
      scripts-resource: cf-ops-automation
      config-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      templates-resource: paas-templates-<%= name %>
    output_mapping: {check-configuration-result: check-configuration-result}
    file: cf-ops-automation/concourse/tasks/check_configuration/task.yml
    params:
      ROOT_DEPLOYMENT: <%= root_deployment_name %>
      DEPLOYMENT: <%= name %>
      SCAN_PATHS: <%= paas_templates_selected_paths&.join(" ") if paas_templates_selected_paths.is_a?(Array) %>
      GIT_SUBMODULES: <%= submodules&.join(" ") if submodules.is_a?(Array) %>
      LOCAL_SECRETS_SCAN: <%= deployment_details.local_deployment_secrets_scan? %>
  - task: generate-<%= name %>-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: paas-templates-<%= name %>
    output_mapping: {generated-files: release-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/<%= root_deployment_name %>/<%= name %>/
      YML_TEMPLATE_DIR: additional-resource/<%= root_deployment_name %>/<%= name %>/template
      YML_FILES: |
          ./credentials-resource/<%= root_deployment_name %>/<%= name %>/secrets/meta.yml
          ./credentials-resource/<%= root_deployment_name %>/<%= name %>/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/<%= root_deployment_name %>/<%= name %>/template
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: execute-<%= name %>-pre-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-<%= name %>
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: release-manifest
    output_mapping: {generated-files: pre-bosh-deploy-resource}
    file: cf-ops-automation/concourse/tasks/pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= root_deployment_name %>/<%= name %>/template
      SECRETS_DIR: credentials-resource/<%= root_deployment_name %>/<%= name %>
  - task: copy-<%= name %>-required-files
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-<%= name %>
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: pre-bosh-deploy-resource
    output_mapping: {generated-files: final-release-manifest}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= root_deployment_name %>/<%= name %>/template
      SECRETS_DIR: credentials-resource/<%= root_deployment_name %>/<%= name %>
      MANIFEST_NAME: <%= name %>.yml
  - task: generate-empty-ops-and-vars-files
    # this task is required as long as all deployments still don't use ops/vars files
    output_mapping: {result-dir: ops-and-vars-files}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))governmentpaas/curl-ssl
          tag: 2857fdbaea59594c06cf9c6e32027091b67d4767
      inputs:
        - name: final-release-manifest
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p result-dir/operators
          mkdir -p result-dir/vars
          find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
          find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
          echo '---' > result-dir/operators/0-empty-operators.yml
          echo '---' > result-dir/vars/0-empty-vars.yml
  - task: display-<%= name %>-manifest
    input_mapping:
      bosh-inputs: ops-and-vars-files
      manifest-dir: final-release-manifest
      secrets: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: interpolated-manifest }
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
       VARS_FILES_SUFFIX: "*/*vars.yml"
       OPS_FILES_SUFFIX:  "*/*operators.yml"
       BOSH_YAML_FILE: <%= name %>.yml
  - task: resolve-manifest-latest-versions
    input_mapping:
      templates-resource: paas-templates-<%= name %>
      manifest-dir: interpolated-manifest
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: resolved-manifest-versions }
    file: cf-ops-automation/concourse/tasks/resolve_manifest_latest_versions/task.yml
    params:
      STEMCELL_NAME: ((stemcell-main-name))
      STEMCELL_VERSION: ((stemcell.version))
      VERSIONS_FILE:  templates-resource/<%= root_deployment_name %>/root-deployment.yml
      MANIFEST_YAML_FILE: manifest-dir/interpolated-<%= name %>.yml
      DEPLOYMENT_NAME: <%= name %>

  - put: <%= name %>-deployment
    attempts: 2
    on_failure:
      do:
        - task: update-<%= name %>-files
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: resolved-manifest-versions}
          output_mapping: {updated-git-resource: failed-<%= name %>-secrets}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: <%= root_deployment_name %>/<%= name %>/<%= name %>-last-deployment-failure.yml
            NEW_FILE: "<%= name %>.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "Failed to deploy <%= name %> manifest\n\nActive profiles: ${PROFILES}\n[skip ci]"
        - put: secrets-full-writer
          get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
          params:
            repository: failed-<%= name %>-secrets
            rebase: true
    params:
      manifest: resolved-manifest-versions/<%= name %>.yml
      cleanup: <%= deployment_details.bosh_details.cleanup? %>
      no_redact: <%= deployment_details.bosh_details.no_redact? %>
      dry_run: <%= deployment_details.bosh_details.dry_run? %>
      fix: <%= deployment_details.bosh_details.fix? %>
      recreate: <%= deployment_details.bosh_details.recreate? %>
      <%= deployment_details.bosh_details.max_in_flight? ? "max_in_flight: #{deployment_details.bosh_details.max_in_flight}":'' %>
      <%= deployment_details.bosh_details.skip_drain? ? "skip_drain: #{deployment_details.bosh_details.skip_drain}":'' %>

  - task: bosh-variables
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-full-writer}
    output_mapping: {result-dir: bosh-variables-result}
    file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
    params:
      BOSH_DEPLOYMENT: <%= name %>
      BOSH_TARGET: ((bosh-target))
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: "((bosh-password))"
      BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
  - task: update-<%= name %>-fingerprints-file
    input_mapping: {reference-resource: secrets-full-writer, generated-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-<%= name %>-fingerprints-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: <%= root_deployment_name %>/<%= name %>/<%= name %>-fingerprints.json
      NEW_FILE: "credential_fingerprints.json"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "<%= name %> variable fingerprints auto update.\nDeployment information: $(cat generated-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - task: update-<%= name %>-files
    input_mapping: {reference-resource: updated-<%= name %>-fingerprints-secrets, generated-resource: <%= name %>-deployment, additional-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-<%= name %>-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: <%= root_deployment_name %>/<%= name %>/<%= name %>.yml
      NEW_FILE: "manifest.yml"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "<%= name %> generated manifest auto update.\nDeployment information: $(cat additional-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - put: secrets-full-writer
    attempts: 2
    get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    params:
      repository: updated-<%= name %>-secrets
      rebase: true
  - task: execute-<%= name %>-post-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-<%= name %>
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: final-release-manifest
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= root_deployment_name %>/<%= name %>/template
      SECRETS_DIR: credentials-resource/<%= root_deployment_name %>/<%= name %>

  <% if deployment_details.errands? %>
    <% deployment_details.errands.each do |errand_name, errand_info| %>
    <% errand_display_name = errand_info&.dig('display-name') || errand_name %>
- name: run-errand-<%= name %>-<%= errand_display_name %>
  <% jobs["deploy-#{name[0]}*"] << "run-errand-#{name}-#{errand_display_name}" %>
  serial_groups: [auto-errand-<%= name %>]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: concourse-meta
      trigger: true
      passed: [deploy-<%= name %>]

  - put: errand-<%= name %>
    params:
      name: <%= errand_name %>
    <% end %>
  <% end %>

  <% if deployment_details.manual_errands? %>
    <% deployment_details.manual_errands.each do |errand_name, errand_info| %>
    <% errand_display_name = errand_info&.dig('display-name') || errand_name %>
- name: run-manual-errand-<%= name %>-<%= errand_display_name %>
  <% jobs["deploy-#{name[0]}*"] << "run-manual-errand-#{name}-#{errand_display_name}" %>

  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
        - get: concourse-meta
          passed: [deploy-<%= name %>]
    - put: errand-<%= name %>
      params:
        name: <%= errand_name %>
    <% end %>
    <% end %>
<% end %>

<% if enabled_deployments.any? %>
- name: retrigger-all-jobs
  <% jobs['utils'] << 'retrigger-all-jobs' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: secrets-<%= root_deployment_name %>-trigger
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
  - task: generate-<%= root_deployment_name %>-pipeline
    output_mapping: {result-dir: trigger-<%= root_deployment_name %>-plan}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))governmentpaas/curl-ssl
          tag: 2857fdbaea59594c06cf9c6e32027091b67d4767
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
  <% enabled_deployments.sort.each do |name, _| %>
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-<%= name %>" >> result-dir/flight-plan
  <% end %>
      params:
        BUILD_PIPELINE_NAME: <%= root_deployment_name %>-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-<%= root_deployment_name %>-plan}
    output_mapping: {flight-report: concourse-<%= root_deployment_name %>-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-<%= root_deployment_name %>-target))
      FLY_USERNAME: ((concourse-<%= root_deployment_name %>-username))
      FLY_PASSWORD: "((concourse-<%= root_deployment_name %>-password))"
      FLY_TEAM: <%= current_team || 'main' %>
<% end %>

- name: recreate-all
  <% jobs['recreate'] << 'recreate-all' %>
  <% jobs['utils'] << 'recreate-all' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  serial_groups: [recreate]
  plan:
  - in_parallel:
     - get: secrets-<%= root_deployment_name %>-limited
       params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
     - get: paas-templates-<%= root_deployment_name %>
       params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
     - get: cf-ops-automation
       params: { submodules: none, depth: <%= git_shallow_clone_depth %> }

<% enabled_deployments.sort.each do |name,boshrelease| %>
- name: recreate-<%= name %>
  <% jobs['recreate'] << "recreate-#{name}" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  serial_groups: [recreate]
  plan:
  - in_parallel:
     - get: secrets-<%= root_deployment_name %>-limited
       params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
       passed: [recreate-all]
       trigger: true
     - get: paas-templates-<%= root_deployment_name %>
       params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
       passed: [recreate-all]
       trigger: true
     - get: cf-ops-automation
       params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
       passed: [recreate-all]

  - task: bosh-recreate-<%= name %>
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-<%= root_deployment_name %>-limited}
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-registry-url))governmentpaas/bosh-cli-v2
            tag: 2857fdbaea59594c06cf9c6e32027091b67d4767
        inputs:
          - name: scripts-resource
          - name: secrets
        outputs:
          - name: run-resource
        run:
          path: bash
          args:
            - -e
            - -c
            - |
              source ./scripts-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET}
              bosh -n recreate --fix
    params:
       BOSH_TARGET: ((bosh-target))
       BOSH_CLIENT: ((bosh-username))
       BOSH_CLIENT_SECRET: "((bosh-password))"
       BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
       BOSH_DEPLOYMENT: <%= name %>
<% end %>

<% if enabled_deployments.any? %>
- name: init-concourse-boshrelease-and-stemcell-for-<%= root_deployment_name %>
  <% jobs['utils'] << "init-concourse-boshrelease-and-stemcell-for-#{root_deployment_name}" %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      attempts: 2
#      trigger: true
    - get: secrets-<%= root_deployment_name %>-trigger
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      attempts: 2
    - get: paas-templates-<%= root_deployment_name %>-versions
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      attempts: 2
      trigger: true
  - task: generate-<%= root_deployment_name %>-flight-plan
    output_mapping: {result-dir: init-<%= root_deployment_name %>-plan}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))governmentpaas/curl-ssl
          tag: 2857fdbaea59594c06cf9c6e32027091b67d4767
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
  <% uniq_releases.sort.each do |name, info| %>
    <% from_prefix = PipelineHelpers.bosh_io_hosted?(info) ? "version" : "tag" %>
    <% if offline_boshreleases_enabled %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/<%= name %> --from path:<%= info['repository']&.split('/')&.first %>/<%= name %>-((releases.<%= name %>.version)).tgz" | tee -a result-dir/flight-plan
    <% else %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/<%= name %> --from <%= from_prefix %>:<%= PipelineHelpers.tag_prefix(info) %>((releases.<%= name %>.version))" | tee -a result-dir/flight-plan
    <% end %>
  <% end %>
  <% if offline_stemcells_enabled %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from path:((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell.version))-((stemcell-main-name)).tgz" | tee -a result-dir/flight-plan
  <% else %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from version:((stemcell.version))" | tee -a result-dir/flight-plan
  <% end %>
      params:
        BUILD_PIPELINE_NAME: <%= root_deployment_name %>-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: init-<%= root_deployment_name %>-plan}
    output_mapping: {flight-report: concourse-<%= root_deployment_name %>-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-<%= root_deployment_name %>-target))
      FLY_USERNAME: ((concourse-<%= root_deployment_name %>-username))
      FLY_PASSWORD: "((concourse-<%= root_deployment_name %>-password))"
      FLY_TEAM: <%= current_team || 'main' %>
<% end %>

<% if all_ci_deployments&.any? %>
  <% if all_ci_deployments&.dig(root_deployment_name, PipelineHelpers::TERRAFORM_CONFIG_DIRNAME_KEY) %>
    <% raise "invalid ci-deployment-overview.yml. Missing key [#{root_deployment_name}][#{PipelineHelpers::TERRAFORM_CONFIG_DIRNAME_KEY}][state_file_path] or delete terraform-config key." if terraform_config_path.nil? %>
- name: check-terraform-consistency
    <% jobs['terraform'] << 'check-terraform-consistency' %>
  serial: true
  serial_groups: [terraform]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
    - get: paas-templates-<%= root_deployment_name %>
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
    - get: secrets-<%= root_deployment_name %>-limited
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
  - task: generate-terraform-tfvars
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= root_deployment_name %>-limited, additional-resource: paas-templates-<%= root_deployment_name %>}
    output_mapping: {generated-files: terraform-tfvars}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      YML_FILES: |
        ./credentials-resource/shared/secrets.yml
        ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
        ./credentials-resource/<%= terraform_config_path %>/secrets/secrets.yml
        ./additional-resource/meta-inf.yml
      YML_TEMPLATE_DIR: additional-resource/<%= terraform_config_path %>/template
      CUSTOM_SCRIPT_DIR: additional-resource/<%= terraform_config_path %>/template
      SUFFIX: -tpl.tfvars.yml
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: terraform-plan
    input_mapping: {secret-state-resource: secrets-<%= root_deployment_name %>-limited,spec-resource: paas-templates-<%= root_deployment_name %>}
    file: cf-ops-automation/concourse/tasks/terraform_plan_cloudfoundry.yml
    params:
      SPEC_PATH: "<%= terraform_config_path %>/spec"
      SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
      IAAS_SPEC_PATH: "<%= terraform_config_path %>/spec-((iaas-type))"
      PROFILES_SPEC_PATH_PREFIX: "<%= terraform_config_path %>/spec-"
      PROFILES: ((profiles))

- name: approve-and-enforce-terraform-consistency
    <% jobs['terraform'] << 'approve-and-enforce-terraform-consistency' %>
  serial: true
  serial_groups: [terraform]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      passed: [check-terraform-consistency]
    - get: paas-templates-<%= root_deployment_name %>
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      passed: [check-terraform-consistency]
      trigger: false
    - get: secrets-<%= root_deployment_name %>-limited
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      passed: [check-terraform-consistency]
  - task: generate-terraform-tfvars
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= root_deployment_name %>-limited, additional-resource: paas-templates-<%= root_deployment_name %>}
    output_mapping: {generated-files: terraform-tfvars}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      YML_FILES: |
        ./credentials-resource/shared/secrets.yml
        ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
        ./credentials-resource/<%= terraform_config_path %>/secrets/secrets.yml
        ./additional-resource/meta-inf.yml
      YML_TEMPLATE_DIR: additional-resource/<%= terraform_config_path %>/template
      CUSTOM_SCRIPT_DIR: additional-resource/<%= terraform_config_path %>/template
      SUFFIX: -tpl.tfvars.yml
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: terraform-apply
    input_mapping: {secret-state-resource: secrets-<%= root_deployment_name %>-limited,spec-resource: paas-templates-<%= root_deployment_name %>}
    output_mapping: {generated-files: terraform-cf}
    file: cf-ops-automation/concourse/tasks/terraform_apply_cloudfoundry.yml
    params:
      SPEC_PATH: "<%= terraform_config_path %>/spec"
      SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
      IAAS_SPEC_PATH: "<%= terraform_config_path %>/spec-((iaas-type))"
      PROFILES_SPEC_PATH_PREFIX: "<%= terraform_config_path %>/spec-"
      PROFILES: ((profiles))
    ensure:
      task: update-terraform-state-file
      input_mapping: {reference-resource: secrets-full-writer, generated-resource: terraform-cf}
      output_mapping: {updated-git-resource: updated-terraform-state-secrets}
      file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: "<%= terraform_config_path %>/terraform.tfstate"
        NEW_FILE: "terraform.tfstate"
        PROFILES: ((profiles))
        COMMIT_MESSAGE: "Terraform TFState auto update\n\nActive profiles: ${PROFILES}"
      on_failure:
        put: failure-alert
        params:
          channel: ((slack-channel))
          text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
      on_success:
        put: secrets-full-writer
        get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        params:
          repository: updated-terraform-state-secrets
          rebase: true
  <% end %>
<% end  %>

groups:
- name: <%= root_deployment_name.capitalize %>
  jobs:
<% jobs.map {|_, job_names| job_names }.flatten.uniq.sort.each do |job_name| %>
    - <%= job_name %>
<% end %>
<% jobs.sort.each do |group_name, job_names| %>
- name: <%= group_name.capitalize %>
  jobs:
  <% job_names&.sort.each do |job_name| %>
    - <%= job_name %>
  <% end %>
<% end %>
