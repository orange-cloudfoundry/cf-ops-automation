---
resource_types:
  - name: concourse-pipeline
    type: docker-image
    source:
      repository: concourse/concourse-pipeline-resource

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

resources:
<% enabled_concourse_deployments = all_dependencies.select{|_,deployment_infos| deployment_infos['status'] == 'enabled' && deployment_infos['concourse'] } %>
<% puts enabled_concourse_deployments %>

<% unless enabled_concourse_deployments.empty? %>

- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

- name: concourse-for-<%= depls %>
  type: concourse-pipeline
  source:
    target: ((concourse-<%= depls %>-target))
    insecure: ((concourse-<%= depls %>-insecure))
    teams:
    - name: main
      username: ((concourse-<%= depls %>-username))
      password: ((concourse-<%= depls %>-password))

- name: cf-ops-automation
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

<% enabled_concourse_deployments&.sort&.each do |name, concourse_config| %>
- name: secrets-<%= name %>
  type: git
  source:
    uri: ((secrets-uri))
    <% ext_scan_path = concourse_config['resources']['secrets']['extended_scan_path'] if ( concourse_config['resources'] && concourse_config['resources']['secrets']['extended_scan_path'] ) %>
    <% ext_scan_path_value = ",\"#{ext_scan_path.join('","')}\"" if ext_scan_path %>
    paths: ["<%= "#{depls}/#{name}" %>","shared"<%= ext_scan_path_value || '' %>]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-<%= name %>
  type: git
  source:
    uri: ((paas-templates-uri))
    paths:
      - "<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>"
      - "<%= "#{depls}/#{depls}-versions.yml" %>"
      <%= '- .gitmodules' if git_submodules[depls] && git_submodules[depls][name] %>
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
<% end %>

<% end %>

jobs:

<% if enabled_concourse_deployments.empty? %>
- name: this-is-an-empty-pipeline
<% else %>
<% enabled_concourse_deployments&.sort&.each do |name, _| %>

<% pipeline_name="#{depls}-#{name}" %>

- name: deploy-concourse-<%= name %>-pipeline
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
      text: |
        ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      username: Concourse
  plan:
  - aggregate:
    - get: paas-templates-<%= name %>
      params: { submodules: none}
      attempts: 3
      trigger: true
    - get: secrets-<%= name %>
      params: { submodules: none}
      attempts: 3
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none}
      attempts: 3
      trigger: false

  - task: spruce-processing-<%= name %>
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= name %>, additional-resource: paas-templates-<%= name %>}
    output_mapping: {generated-files: spruced-files}
    file: cf-ops-automation/concourse/tasks/generate-manifest.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/<%= "#{depls}/#{name}" %>
#TODO: discuss if we share the same secrets dir (ie secrets/secrets.yml) or a secrets per deployer
#for now, we choose a secrets per deployer
      YML_TEMPLATE_DIR: additional-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      YML_FILES: |
          ./credentials-resource/<%= depls %>/<%= name %>/<%= DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME %>/secrets.yml
          ./credentials-resource/shared/secrets.yml
      CUSTOM_SCRIPT_DIR: additional-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      IAAS_TYPE: ((iaas-type))
  - task: execute-<%= name %>-spiff-pre-deploy
    input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-templates-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: spruced-files}
    output_mapping: {generated-files: pre-deploy-resource}
    file: cf-ops-automation/concourse/tasks/spiff_pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
  - task: copy-<%= name %>-required-files
    input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-templates-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: pre-deploy-resource}
    output_mapping: {generated-files: bosh-inputs}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
      MANIFEST_NAME: <%= name %>.yml
  - task: bosh-interpolate-pipeline-with-ops-and-vars-files
# TODO: replace with bosh task
    # this task is required as long as all deployments still don't use ops/vars files
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-<%= name %>}
    output_mapping: {result-dir: final-<%= name %>-pipeline}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: governmentpaas/bosh-cli-v2
      inputs:
        - name: bosh-inputs
        - name: secrets
        - name: scripts-resource
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          ls -lrt bosh-inputs
          VARS_FILES=""
          OPS_FILES=""
          if [ -z "BOSH_YAML_FILE" ]
          then
          echo "ERROR: missing environment variable: BOSH_YAML_FILE"
          exit 1
          fi
          for a_vars_file in $(ls ./bosh-inputs/*${VARS_FILES_SUFFIX}); do
          VARS_FILES="-l ${a_vars_file} ${VARS_FILES}"
          done
          for an_ops_file in $(ls ./bosh-inputs/*${OPS_FILES_SUFFIX}); do
          OPS_FILES="-o ${an_ops_file} ${OPS_FILES}"
          done
          echo "Operators detected: <${OPS_FILES}>"
          echo "Vars files detected: <${VARS_FILES}>"
          INTERPOLATED_FILE="interpolated-${BOSH_YAML_FILE}"
          bosh -n int ${VARS_FILES} ${OPS_FILES} bosh-inputs/${BOSH_YAML_FILE} > result-dir/${INTERPOLATED_FILE}
      params:
         VARS_FILES_SUFFIX: vars.yml
         OPS_FILES_SUFFIX:  operators.yml
         BOSH_YAML_FILE: <%= pipeline_name %>.yml
  - put: concourse-for-<%= depls %>
    params:
      pipelines:
      - name: <%= pipeline_name %>
        team: <%= 'main' %>
        config_file: final-<%= name %>-pipeline/interpolated-<%= pipeline_name %>.yml
  - task: execute-<%= name %>-post-deploy
    input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-templates-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: final-<%= name %>-pipeline}
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>

<% end %>
<% end %>
