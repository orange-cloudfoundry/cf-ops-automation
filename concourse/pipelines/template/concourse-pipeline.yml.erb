<%
  require './lib/pipeline_helpers'

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(depls).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  enabled_parallel_execution_limit = configurer.parallel_execution_limit.overridden?
%>
---
resource_types:
  - name: concourse-pipeline
    type: docker-image
    source:
      repository: concourse/concourse-pipeline-resource
      tag: 3

  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: v1.4.2

resources:
<% enabled_concourse_deployments = all_dependencies.select{|_,deployment_infos| deployment_infos['status'] == 'enabled' && deployment_infos['concourse'] } %>
<% puts enabled_concourse_deployments %>

<% unless enabled_concourse_deployments.empty? %>

- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))

- name: concourse-for-<%= depls %>
  type: concourse-pipeline
  source:
    target: ((concourse-<%= depls %>-target))
    insecure: ((concourse-<%= depls %>-insecure))
    teams:
    - name: main
      username: ((concourse-<%= depls %>-username))
      password: ((concourse-<%= depls %>-password))

- name: cf-ops-automation
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

<% enabled_concourse_deployments&.sort&.each do |name, concourse_config|
  secrets_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: depls,
    name: name,
    git_submodules: git_submodules,
    config: concourse_config,
    config_key: 'secrets',
    defaults: ["#{depls}/#{name}", "shared"])
  paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: depls,
    name: name,
    git_submodules: git_submodules,
    config: concourse_config,
    config_key: 'secrets',
    defaults: ["#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}", "#{depls}/#{depls}-versions.yml"])
%>

- name: secrets-<%= name %>
  type: git
  source:
    uri: ((secrets-uri))
    paths: <%= secrets_selected_paths %>
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-<%= name %>
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: <%= paas_templates_selected_paths %>
    # We trigger before pipeline-current-<paas-template> to update generated pipelines at first
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
<% end %>

<% end %>

jobs:
<% if enabled_concourse_deployments.empty? %>
- name: this-is-an-empty-pipeline
<% else %>
<% enabled_concourse_deployments&.sort&.each do |name, details| %>
  <% current_serial_group = configurer.serial_group_strategy.generate(name, details) %>
  <% pipeline_name = "#{depls}-#{name}" %>

- name: deploy-concourse-<%= name %>-pipeline
  <%= "serial_groups: [#{current_serial_group}]" if enabled_parallel_execution_limit%>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
      text: |
        ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      username: Concourse
  plan:
  - aggregate:
    - get: paas-templates-<%= name %>
      <% current_git_submodule = git_submodules[depls][name] if git_submodules[depls] %>
      params: { submodules: <%= current_git_submodule || 'none' %>}
      attempts: 2
      trigger: true
    - get: secrets-<%= name %>
      params: { submodules: none}
      attempts: 2
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none}
      attempts: 2
      trigger: false

  - task: spruce-processing-<%= name %>
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= name %>, additional-resource: paas-templates-<%= name %>}
    output_mapping: {generated-files: spruced-files}
    file: cf-ops-automation/concourse/tasks/generate-manifest.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/<%= "#{depls}/#{name}" %>
      YML_TEMPLATE_DIR: additional-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      YML_FILES: |
          ./credentials-resource/<%= depls %>/<%= name %>/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
      CUSTOM_SCRIPT_DIR: additional-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      IAAS_TYPE: ((iaas-type))
  - task: execute-<%= name %>-spiff-pre-deploy
    input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-templates-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: spruced-files}
    output_mapping: {generated-files: pre-deploy-resource}
    file: cf-ops-automation/concourse/tasks/spiff_pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
  - task: copy-<%= name %>-required-files
    input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-templates-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: pre-deploy-resource}
    output_mapping: {generated-files: bosh-inputs}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
      MANIFEST_NAME: <%= name %>.yml
  - task: bosh-interpolate-pipeline-with-ops-and-vars-files
    input_mapping:
      bosh-inputs: bosh-inputs
      manifest-dir: bosh-inputs
      scripts-resource: cf-ops-automation
      secrets: secrets-<%= name %>
    output_mapping: {result-dir: final-<%= name %>-pipeline}
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
       VARS_FILES_SUFFIX: vars.yml
       OPS_FILES_SUFFIX:  operators.yml
       BOSH_YAML_FILE: <%= name %>.yml
  - put: concourse-for-<%= depls %>
    params:
      pipelines:
      - name: <%= pipeline_name %>
        team: <%= 'main' %>
        config_file: final-<%= name %>-pipeline/interpolated-<%= name %>.yml
  - task: execute-<%= name %>-post-deploy
    input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-templates-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: final-<%= name %>-pipeline}
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= "#{depls}/#{name}/#{DeploymentDeployersConfig::CONCOURSE_CONFIG_DIRNAME}" %>
      SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
<% end %>
<% end %>
