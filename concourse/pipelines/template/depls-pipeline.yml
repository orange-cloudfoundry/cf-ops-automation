---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

  - name: cron-resource
    type: docker-image
    source:
      repository: cftoolsmiths/cron-test

  - name: bosh-config
    type: docker-image
    source:
      repository: dellemcdojo/bosh-config-resource

  - name: concourse-pipeline
    type: docker-image
    source:
      repository: robdimsdale/concourse-pipeline-resource
      tag: latest-final

resources:

- name: at-noon
  type: cron-resource
  source:
    expression: "15 12 * * 1-5"
    location: "Europe/Paris"
    fire_immediately: true

- name: failure-alert
  type: slack-notification
  source:
    url: {{slack-webhook}}
    ca_certs:
    - domain: {{slack-custom-domain}}
      cert: {{slack-custom-cert}}
    - domain: {{slack-custom-root-domain}}
      cert: {{slack-custom-root-cert}}

- name: bosh-stemcell
  type: bosh-io-stemcell
  source:
    name: {{stemcell-name}}

- name: secrets-<%=depls %>
  type: git
  source:
    uri: {{pipeline-credentials-uri}}
    paths: ["<%= depls %>/secrets","shared"]
    branch: master
    skip_ssl_verification: true

- name: paas-template-<%=depls %>
  type: git
  source:
    uri: {{paas-templates-uri}}
    paths: ["<%= depls %>/template","concourse/tasks","scripts"]
    branch: master
    skip_ssl_verification: true

<% all_dependencies.each do |name,boshrelease| %>
- name: secrets-<%= name %>
  type: git
  source:
    uri: {{pipeline-credentials-uri}}
    <% ext_scan_path = boshrelease["resources"]["secrets"]["extended_scan_path"] if ( boshrelease["resources"] && boshrelease["resources"]["secrets"]["extended_scan_path"] ) %>
    <% ext_scan_path_value = ",\"#{ext_scan_path.join('","')}\"" if ext_scan_path %>
    paths: ["<%= depls %>/<%= name %>","shared"<%= ext_scan_path_value || ""%>]
    branch: master
    skip_ssl_verification: true

- name: paas-template-<%= name %>
  type: git
  source:
    uri: {{paas-templates-uri}}
    paths: ["<%= depls %>/<%= name %>","concourse/tasks","scripts"]
    branch: master
    skip_ssl_verification: true

- name: deploy-<%= name %>
  type: bosh-deployment
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: <%= name %>

<% if boshrelease["errands"] != nil && !boshrelease["errands"].empty? %>
- name: errand-<%= name %>
  type: bosh-errand
  source:
    target: {{bosh-target}}
    username: {{bosh-username}}
    password: {{bosh-password}}
    deployment: <%= name %>
<% end %>

<% end %>

<% if ! all_ci_deployments.empty? %>
- name: <%= all_ci_deployments[depls]["target_name"] %>
  type: concourse-pipeline
  source:
    target: {{concourse-<%= depls %>-target}}
    insecure: {{concourse-<%= depls %>-insecure}}
    teams:
    - name: main
      username: {{concourse-<%= depls %>-username}}
      password: {{concourse-<%= depls %>-password}}

- name: secrets-complete
  type: git
  source:
    uri: {{pipeline-credentials-uri}}
    branch: master
    skip_ssl_verification: true

- name: paas-templates-complete
  type: git
  source:
    uri: {{paas-templates-uri}}
    branch: master
    skip_ssl_verification: true
<% end %>


<% uniq_releases= {} %>
<% all_dependencies.each do |name,boshrelease| %>
<% boshrelease["releases"].each do |release, info|  %>
<% uniq_releases[release]= info %>
<% end %>
<% end %>

<% uniq_releases.each do |release, info|  %>
- name: <%= release %>
  <% if info["base_location"].include?("bosh.io") %>
  type: bosh-io-release
  source:
    repository: <%= info["repository"] %>
  <% else %>
  type: github-release
  source:
    user: <%= info["repository"].split('/').first %>
    repository: <%= info["repository"].split('/').last %>
  <% end %>
<% end %>


jobs:

- name: execute-deploy-script
  plan:
    - get: at-noon
      trigger: true
    - get: secrets-<%= depls %>
      params: { submodules: none}
      <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
    - get: paas-template-<%= depls %>
      params: { submodules: none}
      <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
    - task: run-deploy.sh
      input_mapping: {script-resource: paas-template-<%= depls %>, secrets: secrets-<%= depls %>}
      file: paas-template-<%= depls %>/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: <%= depls %>/template
        COMMON_SCRIPT_DIR: script-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: {{bosh-target}}
        BOSH_USERNAME: {{bosh-username}}
        BOSH_PASSWORD: {{bosh-password}}
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse

- name: cloud-config-and-runtime-config-for-<%= depls %>
  plan:
    - get: secrets-<%=depls %>
      params: { submodules: none}
      trigger: true
      <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
    - get: paas-template-<%=depls %>
      params: { submodules: none}
      trigger: true
      <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>

#    - task: generate-<%= depls %>-terraform-outputs-cloud-config
#      input_mapping: {scripts-resource: paas-template, credentials-resource: secrets-<%=depls %>, additional-resource: terraform-outputs}
#      output_mapping: {generated-files: cloud-config-manifest}
#      file: paas-template/concourse/tasks/extract_terraform_outputs.yml
#      params:
#        STATE_FILE: "state-file-resource/terraform.tfstate"
#        OUTPUT_FILE: "result-dir/bosh.terraform-outputs.yml"
#
#        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= depls %>/
#        YML_TEMPLATE_DIR: scripts-resource/<%= depls %>/template
#        YML_FILES: |
#            ./credentials-resource/<%= depls %>/secrets/meta.yml
#            ./credentials-resource/<%= depls %>/secrets/secrets.yml
#            ./credentials-resource/shared/secrets.yml
#        CUSTOM_SCRIPT_DIR: scripts-resource/<%= depls %>/template

    - task: generate-<%= depls %>-all-config
      input_mapping: {scripts-resource: paas-template-<%=depls %>, credentials-resource: secrets-<%=depls %>, additional-resource: secrets-<%=depls %>}
      output_mapping: {generated-files: config-manifest}
      file: paas-template-<%=depls %>/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= depls %>/
        YML_TEMPLATE_DIR: scripts-resource/<%= depls %>/template
        YML_FILES: |
            ./credentials-resource/<%= depls %>/secrets/meta.yml
            ./credentials-resource/<%= depls %>/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
        CUSTOM_SCRIPT_DIR: scripts-resource/<%= depls %>/template

    - aggregate:
      - task: update-cloud-config-for-<%= depls %>
        attempts: 3
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli
          inputs:
            - name: config-manifest
            - name: secrets-<%=depls %>
            - name: paas-template-<%=depls %>
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-template-<%=depls %>/scripts/bosh_login.sh {{bosh-target}} {{bosh-username}} {{bosh-password}}
                OLD_CONFIG=$(mktemp cloud-config-XXXXXX)
                bosh cloud-config >$OLD_CONFIG
                diff $OLD_CONFIG config-manifest/cloud-config.yml || true
                bosh update cloud-config config-manifest/cloud-config.yml
        ensure:
          task: update-cloud-config
          input_mapping: {reference-resource: secrets-<%=depls %>, generated-resource: config-manifest}
          output_mapping: {updated-git-resource: updated-cloud-config}
          file: paas-template-<%=depls %>/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%=depls %>/cloud-config.yml"
            NEW_FILE: "cloud-config.yml"
            COMMIT_MESSAGE: "<%=depls %> cloud-config auto update - [skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: {{slack-channel}}
              text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-<%=depls %>
            get_params: {submodules: none}
            params:
              - repository: updated-cloud-config
              - rebase: true

      - task: update-runtime-config-for-<%= depls %>
        attempts: 3
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli
          inputs:
            - name: config-manifest
            - name: secrets-<%=depls %>
            - name: paas-template-<%=depls %>
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                ./paas-template-<%=depls %>/scripts/bosh_login.sh {{bosh-target}} {{bosh-username}} {{bosh-password}}
                cat config-manifest/runtime-config.yml
                OLD_CONFIG=$(mktemp runtime-config-XXXXXX)
                bosh runtime-config >$OLD_CONFIG
                diff $OLD_CONFIG config-manifest/runtime-config.yml || true
                bosh update runtime-config config-manifest/runtime-config.yml
        ensure:
          task: update-runtime-config
          input_mapping: {reference-resource: secrets-<%=depls %>, generated-resource: config-manifest}
          output_mapping: {updated-git-resource: updated-runtime-config}
          file: paas-template-<%=depls %>/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%=depls %>/runtime-config.yml"
            NEW_FILE: "runtime-config.yml"
            COMMIT_MESSAGE: "<%=depls %> runtime-config auto update - [skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: {{slack-channel}}
              text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-<%=depls %>
            get_params: {submodules: none}
            params:
              - repository: updated-runtime-config
              - rebase: true


<% all_dependencies.each do |name,boshrelease| %>

- name: deploy-<%= name %>
  plan:
    - aggregate:
      - get: secrets-<%=depls %>
        params: { submodules: none}
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
      - get: paas-template-<%=depls %>
        params: { submodules: none}
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
      - get: bosh-stemcell
        version: { version: {{stemcell-version}} }
        trigger: true
        attempts: 3
      <% boshrelease["releases"].each do |release, info| %>
      - get: <%= release %>
        <% if info["base_location"].include?("bosh.io") %>
        version: { version: {{<%= release %>-version}} }
        <% else %>
        version: { tag: v{{<%= release %>-version}} }
        <% end %>
        trigger: true
        attempts: 3
      <% end %>
      - get: secrets-<%= name %>
        params: { submodules: none}
        trigger: true
      - get: paas-template-<%= name %>
        trigger: true
        <% current_git_submodule = git_submodules[depls][name] if git_submodules[depls] %>
        params: { submodules: <%= current_git_submodule || "none" %>}
    - task: generate-<%= name %>-manifest
      input_mapping: {scripts-resource: paas-template-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: secrets-<%= name %>}
      output_mapping: {generated-files: release-manifest}
      file: paas-template-<%= name %>/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= depls %>/<%= name %>/
        YML_TEMPLATE_DIR: scripts-resource/<%= depls %>/<%= name %>/template
        YML_FILES: |
            ./credentials-resource/<%= depls %>/<%= name %>/secrets/meta.yml
            ./credentials-resource/<%= depls %>/<%= name %>/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
        CUSTOM_SCRIPT_DIR: scripts-resource/<%= depls %>/<%= name %>/template
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    - task: execute-<%= name %>-spiff-pre-bosh-deploy
      input_mapping: {scripts-resource: paas-template-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: release-manifest}
      output_mapping: {generated-files: final-release-manifest}
      file: paas-template-<%= name %>/concourse/tasks/spiff_pre_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: scripts-resource/<%= depls %>/<%= name %>/template
        SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot spiff manifest [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    - put: deploy-<%= name %>
      attempts: 3
      params:
        manifest: final-release-manifest/<%= name %>.yml
        stemcells:
        - bosh-stemcell/stemcell.tgz
        releases: <%= "[]" if boshrelease["releases"].empty? %>
        <% boshrelease["releases"].each do |release, info| %>
        - <%= release %>/release.tgz
        <% end %>
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    - task: execute-<%= name %>-post-bosh-deploy
      input_mapping: {scripts-resource: paas-template-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: final-release-manifest}
      output_mapping: {generated-files: post-deploy-result}
      file: paas-template-<%= name %>/concourse/tasks/post_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: scripts-resource/<%= depls %>/<%= name %>/template
        SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse

    - task: update-<%= name %>-files
      input_mapping: {reference-resource: secrets-<%= name %>, generated-resource: deploy-<%= name %>}
      output_mapping: {updated-git-resource: updated-<%= name %>-secrets}
      file: paas-template-<%= name %>/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: <%= depls %>/<%= name %>/<%= name %>.yml
        NEW_FILE: "manifest.yml"
        COMMIT_MESSAGE: "<%= name %> generated manifest auto update - [skip ci]"
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    - put: secrets-<%= name %>
      get_params: {submodules: none}
      params:
        - repository: updated-<%= name %>-secrets
        - rebase: true

<% if boshrelease["errands"] != nil && !boshrelease["errands"].empty? %>
- name: run-errand-<%= name %>
  plan:
    - aggregate:
      - get: secrets-<%= name %>
        params: { submodules: none}
        trigger: true
        passed: [deploy-<%= name %>]
    <% boshrelease["errands"].each do |errand_name, errand_info| %>
    - put: errand-<%= name %>
      params:
        errand: <%= errand_name %>
        manifest: secrets-<%= name %>/<%= depls %>/<%= name %>/<%= name %>.yml
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: errand-<%= name %> failed  [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    <% end %>
<% end %>

<% end %>

<% previous_deployment_name=nil %>
<% all_dependencies.each do |name,boshrelease| %>
- name: recreate-<%= name %>
  plan:
    - aggregate:
       - get: secrets-<%= depls %>
         params: { submodules: none}
         <%= "passed: [recreate-#{previous_deployment_name}]" if previous_deployment_name != nil %>
         <%= "passed: [update-pipeline-#{depls}-generated]" if previous_deployment_name == nil && ! all_ci_deployments.empty? %>
         <%= "trigger: true" if previous_deployment_name != nil %>
       - get: paas-template-<%= depls %>
         params: { submodules: none}
         <%= "passed: [recreate-#{previous_deployment_name}]" if previous_deployment_name != nil %>
         <%= "passed: [update-pipeline-#{depls}-generated]" if (previous_deployment_name == nil && ! all_ci_deployments.empty?) %>
         <%= "trigger: true" if previous_deployment_name != nil %>
    - task: bosh-recreate-<%= name %>
      input_mapping: {script-resource: paas-template-<%= depls %>, secrets: secrets-<%= depls %>}
      config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/bosh-cli-v2
          inputs:
            - name: script-resource
            - name: secrets
          outputs:
            - name: run-resource
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                source ./script-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET} ${BOSH_USERNAME} ${BOSH_PASSWORD} ${BOSH_CERT_FILE}
                bosh -n -d <%= name %> recreate
      params:
         BOSH_TARGET: {{bosh-target}}
         BOSH_USERNAME: {{bosh-username}}
         BOSH_PASSWORD: {{bosh-password}}
         BOSH_CERT_FILE: secrets/<%= BOSH_CERT_LOCATIONS[depls] %>
      on_failure:
         put: failure-alert
         params:
           channel: {{slack-channel}}
           text: Deployment Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
           icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
           username: Concourse
<% previous_deployment_name=name %>
<% end %>

<% if ! all_ci_deployments.empty? %>
<% current_depls_generated= all_ci_deployments[depls]["pipelines"]["#{depls}-generated"] %>
<% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][pipelines][#{depls}-generated]"  if current_depls_generated == nil  %>
<% current_cf_apps_generated= all_ci_deployments[depls]["pipelines"]["#{depls}-cf-apps-generated"] %>
<% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][pipelines][#{depls}-cf-apps-generated]"  if current_cf_apps_generated == nil  %>
- name: update-pipeline-<%= depls %>-generated
  plan:
  - aggregate:
    - get: paas-template-<%= depls %>
      params: { submodules: none}
      attempts: 3
      trigger: true
    - get: secrets-<%= depls %>
      params: { submodules: none}
      attempts: 3
      trigger: true
    - get: paas-templates-complete
      params: { submodules: none}
      attempts: 3
      trigger: true
    - get: secrets-complete
      params: { submodules: none}
      attempts: 3
      trigger: true
  - task: generate-<%= depls %>-pipeline
    input_mapping: {script-resource: paas-templates-complete,secrets: secrets-complete}
    output_mapping: {result-dir: concourse-<%= depls %>-pipeline}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ruby, tag: 2.3.1-slim}
      inputs:
        - name: script-resource
        - name: secrets
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          cp -r script-resource/. result-dir
          cp -rf secrets/. result-dir
          cd result-dir/concourse
          ./generate-depls.rb --depls <%= depls %> -s ../../script-resource
    on_failure:
      put: failure-alert
      params:
        channel: {{slack-channel}}
        text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse

  - put: <%= all_ci_deployments[depls]["target_name"] %>
    params:
      pipelines:
      <% all_ci_deployments[depls]["pipelines"].each do |pipeline_name,pipeline_details| %>
      - name: <%= pipeline_name %>
        team: main
        config_file: concourse-<%= depls %>-pipeline/concourse/pipelines/<%= pipeline_name %>.yml
        vars_files:
          <% pipeline_details["vars_files"].each do |a_vars_file| %>
          # trick to manage <depls>-versions.yml (not included in secrets)
         <%= "- secrets-complete/#{a_vars_file}" if ! a_vars_file.end_with?("-versions.yml") %>
         <%= "- paas-templates-complete/#{a_vars_file}" if a_vars_file.end_with?("-versions.yml") %>
          <% end %>
     <% end %>
    on_failure:
      put: failure-alert
      params:
        channel: {{slack-channel}}
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
  - task: update-concourse-depls-pipeline
    input_mapping: {reference-resource: secrets-complete, generated-resource: concourse-<%= depls %>-pipeline}
    output_mapping: {updated-git-resource: updated-secrets}
    file: paas-templates-complete/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: <%= current_depls_generated["config_file"] %>
      NEW_FILE: "concourse/pipelines/<%= depls %>-generated.yml"
      COMMIT_MESSAGE: "<%= depls %> generated pipeline auto update - [skip ci]"
    on_failure:
      put: failure-alert
      params:
        channel: {{slack-channel}}
        text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
  - task: update-concourse-cf-apps-pipeline
    input_mapping: {reference-resource: updated-secrets, generated-resource: concourse-<%= depls %>-pipeline}
    output_mapping: {updated-git-resource: updated-secrets}
    file: paas-templates-complete/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: <%= current_cf_apps_generated["config_file"] %>
      NEW_FILE: "concourse/pipelines/<%= depls %>-cf-apps-generated.yml"
      COMMIT_MESSAGE: "<%= depls %> cf-apps generated pipeline auto update - [skip ci]"
    on_failure:
      put: failure-alert
      params:
        channel: {{slack-channel}}
        text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse

  - put: secrets-complete
    get_params: {submodules: none}
    params:
      - repository: updated-secrets
      - rebase: true
    on_failure:
      put: failure-alert
      params:
        channel: {{slack-channel}}
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse


<% puts all_ci_deployments[depls] %>
<% if ! all_ci_deployments[depls]["terraform_config"].nil? %>
<% terraform_config_path= all_ci_deployments[depls]["terraform_config"]["state_file_path"] %>
<% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][terraform-config][state_file_path] or delete terraform-config key "  if terraform_config_path.nil? %>

- name: check-terraform-cf-consistency
  plan:
    - get: at-noon
      trigger: true
    - get: paas-templates-complete
      params: { submodules: none}
      passed: [update-pipeline-<%= depls %>-generated]
    - get: secrets-complete
      passed: [update-pipeline-<%= depls %>-generated]
      params: { submodules: none}
    - task: generate-terraform-tfvars
      input_mapping: {scripts-resource: paas-templates-complete, credentials-resource: secrets-complete, additional-resource: secrets-complete}
      output_mapping: {generated-files: terraform-tfvars}
      file: paas-templates-complete/concourse/tasks/generate-manifest.yml
      params:
        YML_FILES: |
          ./credentials-resource/shared/secrets.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
          ./credentials-resource/<%= terraform_config_path %>secrets/secrets.yml
        YML_TEMPLATE_DIR: scripts-resource/<%= terraform_config_path %>/template
        CUSTOM_SCRIPT_DIR: scripts-resource/<%= terraform_config_path %>/template
        SUFFIX: -tpl.tfvars.yml
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    - task: terraform-plan
      input_mapping: {secret-state-resource: secrets-complete,spec-resource: paas-templates-complete}
      file: paas-templates-complete/concourse/tasks/terraform_plan_cloudfoundry.yml
      params:
        SPEC_PATH: "<%= terraform_config_path %>/spec"
        SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse

- name: cf-manual-approval
  plan:
    - get: paas-templates-complete
      params: { submodules: none}
      passed: [check-terraform-cf-consistency]
    - get: secrets-complete
      params: { submodules: none}
      passed: [check-terraform-cf-consistency]

- name: enforce-terraform-cf-consistency
  plan:
    - aggregate:
      - get: paas-templates-complete
        params: { submodules: none}
        passed: [cf-manual-approval]
        trigger: true
      - get: secrets-complete
        params: { submodules: none}
        passed: [cf-manual-approval]
        trigger: true
    - task: generate-terraform-tfvars
      input_mapping: {scripts-resource: paas-templates-complete, credentials-resource: secrets-complete, additional-resource: secrets-complete}
      output_mapping: {generated-files: terraform-tfvars}
      file: paas-templates-complete/concourse/tasks/generate-manifest.yml
      params:
        YML_FILES: |
          ./credentials-resource/shared/secrets.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
          ./credentials-resource/<%= terraform_config_path %>secrets/secrets.yml
        YML_TEMPLATE_DIR: scripts-resource/<%= terraform_config_path %>/template
        CUSTOM_SCRIPT_DIR: scripts-resource/<%= terraform_config_path %>/template
        SUFFIX: -tpl.tfvars.yml
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failed cannot push master [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
    - task: terraform-apply
      input_mapping: {secret-state-resource: secrets-complete,spec-resource: paas-templates-complete}
      output_mapping: {generated-files: terraform-cf}
      file: paas-templates-complete/concourse/tasks/terraform_apply_cloudfoundry.yml
      params:
        SPEC_PATH: "<%= terraform_config_path %>/spec"
        SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
      on_failure:
        put: failure-alert
        params:
          channel: {{slack-channel}}
          text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
      ensure:
        task: update-terraform-state-file
        input_mapping: {reference-resource: secrets-complete, generated-resource: terraform-cf}
        output_mapping: {updated-git-resource: updated-terraform-state-secrets}
        file: paas-templates-complete/concourse/tasks/git_update_a_file_from_generated.yml
        params:
          OLD_FILE: "<%= terraform_config_path %>/terraform.tfstate"
          NEW_FILE: "terraform.tfstate"
          COMMIT_MESSAGE: "Terraform Cloudfoundry auto update - [skip ci]"
        on_failure:
          put: failure-alert
          params:
            channel: {{slack-channel}}
            text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
            icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
            username: Concourse
        on_success:
          put: secrets-complete
          get_params: {submodules: none}
          params:
            - repository: updated-terraform-state-secrets
            - rebase: true
<% end %>

<% end %>

