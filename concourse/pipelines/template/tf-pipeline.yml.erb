<%
  require "#{ops_automation_path}/lib/pipeline_helpers"

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(depls).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  git_shallow_clone_depth = configurer.git_shallow_clone_depth.get
%>
---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: ((docker-registry-url))cfcommunity/slack-notification-resource
    tag: v1.4.2

resources:
<% if all_ci_deployments&.any? && all_ci_deployments[depls]['terraform_config'] %>
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))

# Scan the whole subdeployment from its root, not only the secret part
- name: secrets-<%=depls %>
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["<%= depls %>/"]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-template-<%=depls %>
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["<%= depls %>/template"]
    branch: ((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  icon: rocket
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

# Used to get other deployments secrets (e.g. micro/master for mattermost/git) as well as shared secrets updates
# This does not trigger automatically a new build, operators have to trigger it manually.
#- name: secrets-full
#  type: git
#  source:
#    uri: ((secrets-uri))
#    branch: ((secrets-branch))
#    skip_ssl_verification: true

- name: paas-templates-full
  icon: home-assistant
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
<% end %>

jobs:
<% jobs = Hash.new {|h,k| h[k]=[]} %>
<% if all_ci_deployments[depls] && all_ci_deployments[depls]['terraform_config'] %>
  <% terraform_config_path= all_ci_deployments[depls]['terraform_config']['state_file_path'] %>
  <% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][terraform-config][state_file_path] or delete terraform-config key" if terraform_config_path.nil? %>
- name: terraform-apply
  <% jobs['terraform'] << 'terraform-apply' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-template-<%=depls %>
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-templates-full
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      - get: secrets-<%=depls %>
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
    - task: generate-terraform-tfvars
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%=depls %>, additional-resource: paas-templates-full}
      output_mapping: {generated-files: terraform-tfvars}
      file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
      params:
        YML_FILES: |
          ./credentials-resource/shared/secrets.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/secrets.yml
          ./additional-resource/meta-inf.yml
        YML_TEMPLATE_DIR: additional-resource/<%= terraform_config_path %>/template
        CUSTOM_SCRIPT_DIR: additional-resource/<%= terraform_config_path %>/template
        SUFFIX: -tpl.tfvars.yml
        PROFILES: ((profiles))
    - task: terraform-apply
      input_mapping: {secret-state-resource: secrets-<%=depls %>,spec-resource: paas-templates-full}
      output_mapping: {generated-files: terraform-cf}
      file: cf-ops-automation/concourse/tasks/terraform_apply_cloudfoundry.yml
      params:
        SPEC_PATH: "<%= terraform_config_path %>/spec"
        SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
        IAAS_SPEC_PATH: "<%= terraform_config_path %>/spec-((iaas-type))"
        PROFILE_SPEC_PATH_PREFIX: "<%= terraform_config_path %>/spec-"
        PROFILES: ((profiles))
      ensure:
        task: update-terraform-state-file
        input_mapping: {reference-resource: secrets-<%=depls %>, generated-resource: terraform-cf}
        output_mapping: {updated-git-resource: updated-terraform-state-secrets}
        file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
        params:
          OLD_FILE: "<%= terraform_config_path %>/terraform.tfstate"
          NEW_FILE: "terraform.tfstate"
          PROFILES: ((profiles))
          COMMIT_MESSAGE: "Terraform Cloudfoundry auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
        on_failure:
          put: failure-alert
          params:
            channel: ((slack-channel))
            text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
            icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
            username: Concourse
        on_success:
          put: secrets-<%=depls %>
          get_params: {submodules: none}
          params:
            repository: updated-terraform-state-secrets
            rebase: true

groups:
- name: <%= depls.downcase %>
  jobs:
  <% jobs.each_value do |jobs_list| %>
    <% jobs_list.each do |job| %>
    - <%= job %>
    <% end %>
  <% end %>

  <% jobs.sort.each do |group_name, jobs_list| %>
- name: <%= group_name.downcase %>
  jobs:
    <% jobs_list&.each do |job| %>
    - <%= job %>
    <% end %>
  <% end %>

<% else %>
- name: this-is-an-empty-pipeline
<% end %>
