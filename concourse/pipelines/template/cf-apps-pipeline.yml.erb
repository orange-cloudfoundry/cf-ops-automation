---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

  - name: cron-resource
    type: docker-image
    source:
      repository: cftoolsmiths/cron-resource

resources:
#- name: at-noon
#  type: cron-resource
#  source:
#    expression: "15 12 * * 1-5"
#    location: "Europe/Paris"
#    fire_immediately: true

<% if ! all_cf_apps.empty? %>
- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))
- name: secrets-full
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: secrets-full-writer
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    skip_ssl_verification: true
    tag_filter: ((cf-ops-automation-tag-filter))
<% end %>

<% all_cf_apps.sort.each do |app_name,cf_app_info| %>
- name: secrets-<%= app_name %>
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["<%= cf_app_info["base-dir"] %>", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-template-<%= app_name %>
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["<%= cf_app_info["base-dir"] %>"]
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
<% end %>

jobs:
<% if all_cf_apps.empty? %>
- name: this-is-an-empty-pipeline
<% else %>
<% jobs = Hash.new {|h,k| h[k]=[]} %>
- name: retrigger-all-jobs
  <% jobs['utils'] << "retrigger-all-jobs" %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: cf-ops-automation
        params: { submodules: none}
      - get: secrets-full
        params: { submodules: none}
    - task: generate-<%= depls %>-pipeline
      output_mapping: {result-dir: trigger-<%= depls %>-plan}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: concourse/busyboxplus, tag: "git"}
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - |
            <% all_cf_apps.sort.each do |app_name,_| %>
            echo "trigger-job -j $BUILD_PIPELINE_NAME/cf-push-<%= app_name %>" >> result-dir/flight-plan
            <% end %>
        params:
          BUILD_PIPELINE_NAME: <%= depls %>-cf-apps-generated
    - task: fly-into-concourse
      input_mapping: {fly-cmd: trigger-<%= depls %>-plan}
      output_mapping: {flight-report: concourse-<%= depls %>-trigger-report}
      file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
      params:
        ATC_EXTERNAL_URL: ((concourse-<%= depls %>-target))
        FLY_USERNAME: ((concourse-<%= depls %>-username))
        FLY_PASSWORD: ((concourse-<%= depls %>-password))

<% end %>

<% all_cf_apps.sort.each do |app_name,cf_app_info| %>
- name: cf-push-<%= app_name %>
<% jobs["app-#{app_name[0]}*"] << "cf-push-#{app_name}" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: secrets-<%= app_name %>
        params: { submodules: none}
        trigger: true
      - get: secrets-full-writer
        params: { submodules: none}
      - get: paas-template-<%= app_name %>
        trigger: true
        params: { submodules: none }
      - get: cf-ops-automation
        trigger: true
        params: { submodules: none }

    - task: generate-<%= app_name %>-manifest
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= app_name %>, additional-resource: paas-template-<%= app_name %>}
      output_mapping: {generated-files: release-manifest}
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= cf_app_info["base-dir"] %>/
        YML_TEMPLATE_DIR: additional-resource/<%= cf_app_info["base-dir"] %>/template
        YML_FILES: |
            ./credentials-resource/<%= cf_app_info["base-dir"] %>/secrets/meta.yml
            ./credentials-resource/<%= cf_app_info["base-dir"] %>/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
        CUSTOM_SCRIPT_DIR: additional-resource/<%= cf_app_info["base-dir"] %>/template
    - task: push-<%= app_name %>
      attempts: 2
      input_mapping: {scripts-resource: cf-ops-automation, templates-resource: paas-template-<%= app_name %>, credentials-resource: secrets-<%= app_name %>, additional-resource: release-manifest}
      output_mapping: {generated-files: final-release-manifest}
      file: cf-ops-automation/concourse/tasks/cf_push.yml
      params:
        CUSTOM_SCRIPT_DIR: templates-resource/<%= cf_app_info["base-dir"] %>/template
        SECRETS_DIR: credentials-resource/<%= cf_app_info["base-dir"] %>
        CF_MANIFEST: generated-files/<%= app_name %>_manifest.yml
        CF_API_URL: <%= cf_app_info["cf_api_url"] %>
        CF_ORG: <%= cf_app_info["cf_organization"] %>
        CF_SPACE: <%= cf_app_info["cf_space"] %>
        CF_USERNAME: <%= cf_app_info["cf_username"].inspect %>
        CF_PASSWORD: <%= cf_app_info["cf_password"].inspect %>

    - task: update-<%= app_name %>-files
      input_mapping: {reference-resource: secrets-full-writer, generated-resource: final-release-manifest}
      output_mapping: {updated-git-resource: updated-<%= app_name %>-secrets}
      file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: <%= cf_app_info["base-dir"] %>/<%= app_name %>_manifest.yml
        NEW_FILE: "<%= app_name %>_manifest.yml"
        COMMIT_MESSAGE: "<%= app_name %> generated CF manifest auto update - [skip ci]"
    - put: secrets-full-writer
      get_params: {submodules: none}
      params:
        repository: updated-<%= app_name %>-secrets
        rebase: true
    - task: execute-<%= app_name %>-post-deploy
      input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-template-<%= app_name %>, credentials-resource: secrets-<%= app_name %>, additional-resource: release-manifest}
      output_mapping: {generated-files: post-deploy-result}
      file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/<%= cf_app_info["base-dir"] %>/template
        SECRETS_DIR: credentials-resource/<%= cf_app_info["base-dir"] %>
        CF_API_URL: <%= cf_app_info["cf_api_url"] %>
        CF_ORG: <%= cf_app_info["cf_organization"] %>
        CF_SPACE: <%= cf_app_info["cf_space"] %>
        CF_USERNAME: <%= cf_app_info["cf_username"].inspect %>
        CF_PASSWORD: <%= cf_app_info["cf_password"].inspect %>

<% end %>

<% unless all_cf_apps.empty? %>
groups:
- name: <%= depls.capitalize %>
  jobs:
    <% jobs.each_value do |job_names| %>
     <% job_names.each do |job_name| %>
      - <%= job_name %>
     <% end %>
    <% end %>

  <% jobs.sort.each do |group_name, job_names| %>
- name: <%= group_name.capitalize %>
  jobs:
    <% job_names.each do |job_name| %>
    - <%= job_name %>
    <% end %>
  <% end %>
<% end %>
