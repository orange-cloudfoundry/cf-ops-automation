<%
  require "#{ops_automation_path}/lib/pipeline_helpers"

  def extract_repo_and_version(an_hash)
    return {} if an_hash.to_s.empty?

    an_hash&.select {|key, _| %w[repository version].include?(key) }
  end

  root_deployment_name = depls
  disabled_deployments = multi_root_dependencies.select do |root_depl_name, deployment_info|
    deployment_info['status'] == 'disabled'
  end
  precompile_pipeline_enabled = config&.fetch('precompile-mode', true) && true
  precompile_excluded_deployments = {}
  root_deployments.each do |name|
    precompile_excluded_deployments[name] = config&.dig(name,'precompile','excluded-deployments') || []
  end


  filtered_deployments = {}
  root_deployments.each do |name|
    filtered_deployments[name] = multi_root_dependencies[name]&.select do |deployment_name, deployment_info|
      !precompile_excluded_deployments[name].include?(deployment_name) && deployment_info['bosh-deployment']
    end
  end

  releases_per_root_deployments = Hash.new { |h, k| h[k] = {} }
  releases_inconsistencies = Hash.new { |h, k| h[k] = [] }
  filtered_deployments&.sort
    &.each do |root_depl, boshreleases|
      boshreleases&.each do |name, boshrelease|
        boshrelease['releases']&.each do |release, info|
          previous_info = releases_per_root_deployments[root_depl][release]
          if previous_info && ! info.eql?(previous_info)
            releases_inconsistencies[root_depl] << "with <#{release}> boshrelease, in <#{name}> deployment: trying to replace\n#{previous_info}\nwith\n#{info}"
          else
            releases_per_root_deployments[root_depl][release] = info
          end
        end
      end
    end
  raise "Inconsistency detected on #{root_deployment_name}: #{releases_inconsistencies[root_deployment_name].to_yaml}" if releases_inconsistencies[root_deployment_name].size >0

  uniq_releases_per_root_deployments = Hash.new { |h, k| h[k] = {} }
  releases_per_root_deployments_reference = releases_per_root_deployments.dup
  releases_per_root_deployments.each do |root_depl, releases_info|
    depends_on = config&.dig(root_depl,'precompile', 'depends-on') || []
    disabled_cached_releases = config&.dig(root_depl,'precompile', 'disabled-cached-releases') || []
    releases_info.each do |release_name, details|
      already_defined = false
      use_cached_release = disabled_cached_releases.include?(release_name)
      unless use_cached_release
        depends_on.each do |depend_root_depl|
          details_from_parent = releases_per_root_deployments_reference&.dig(depend_root_depl, release_name)
          standardized_parent_details = extract_repo_and_version(details_from_parent)
          already_defined = already_defined || standardized_parent_details == extract_repo_and_version(details)
        end
      end
      uniq_releases_per_root_deployments[root_depl][release_name] = details unless already_defined
    end
  end

  uniq_releases = uniq_releases_per_root_deployments[root_deployment_name]
  offline_stemcells_enabled = config&.dig('offline-mode', 'stemcells') && true
  offline_boshreleases_enabled = config&.dig('offline-mode', 'boshreleases') && true
  # precompile_skip_upload = config&.dig('precompile','skip-upload') && true
  precompile_config = config&.dig('precompile') || {}
  precompile_skip_upload = precompile_config.fetch('skip-upload', true) && true

  jobs = Hash.new {|h,k| h[k]=[]}

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(root_deployment_name).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)
  concourse_retry = configurer.concourse_retry
  enabled_parallel_execution_limit = configurer.parallel_execution_limit.overridden?

  # all_dependencies = multi_root_dependencies[root_deployment_name] || {}
  # version_reference = multi_root_version_reference[root_deployment_name] || {}
  all_ci_deployments = multi_root_ci_deployments || {}
  # all_cf_apps = multi_root_cf_apps[root_deployment_name] || {}
  current_team = CiDeployment.team(all_ci_deployments, root_deployment_name, "#{root_deployment_name}-bosh-precompile-generated") || root_deployment_name

%>
---
meta:
  tasks:
    - &on_failure
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
display:
  background_image: ((background-image-url))
resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: elpaasoci/slack-notification-resource
    tag: v1.7.0-orange
- name: bosh-deployment-v2
  type: registry-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
    tag: v2.12.0

resources:
<% if precompile_pipeline_enabled || ! uniq_releases.empty? %>
  - name: failure-alert
    icon: slack
    type: slack-notification
    source:
      url: ((slack-webhook))
      proxy: ((slack-proxy))
      proxy_https_tunnel: ((slack-proxy-https-tunnel))
      disable: ((slack-disable))

  - name: secrets-full-writer
    icon: source-pull
    type: git
    source:
      uri: ((secrets-uri))
      branch: ((secrets-branch))
      skip_ssl_verification: true

  - name: paas-templates-<%= root_deployment_name %>-limited
    icon: home-analytics
    type: git
    source:
      uri: ((paas-templates-uri))
      paths:
        - ".gitmodules"
        - "shared-config.yml"
        - "meta-inf.yml"
        - "<%= root_deployment_name %>/template"
        - "<%= root_deployment_name %>/**/deployment-dependencies*.yml"
        - "<%= root_deployment_name %>/root-deployment.yml"
      branch: ((paas-templates-precompile-branch))
      skip_ssl_verification: true

  - name: cf-ops-automation
    type: git
    icon: rocket
    source:
      uri: ((cf-ops-automation-uri))
      branch: ((cf-ops-automation-branch))
      tag_filter: ((cf-ops-automation-tag-filter))
      skip_ssl_verification: true

  - name: ((stemcell-main-name))
    <% if offline_stemcells_enabled %>
    type: s3
    icon: home-floor-l
    source:
      bucket: ((s3-stemcell-bucket))
      region_name: ((s3-stemcell-region-name))
      regexp: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-(.*)-((stemcell-main-name)).tgz
      access_key_id: ((s3-stemcell-access-key-id))
      secret_access_key: ((s3-stemcell-secret-key))
      endpoint: ((s3-stemcell-endpoint))
      skip_ssl_verification: ((s3-stemcell-skip-ssl-verification))
    version: { path: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell.version))-((stemcell-main-name)).tgz }
    <% else %>
    type: bosh-io-stemcell
    icon: home-floor-g
    source:
      name: ((stemcell-name-prefix))((stemcell-main-name))
    version: { version: "((stemcell.version))" }
    <% end %>

  - name: secrets-<%= root_deployment_name %>-trigger
    icon: source-commit
    type: git
    source:
      uri: ((secrets-uri))
      paths: ["private-config.yml", "<%= root_deployment_name %>", "shared"]
      branch: ((secrets-branch))
      skip_ssl_verification: true

  - name: paas-templates-<%= root_deployment_name %>-versions
    icon: home-thermometer
    type: git
    source:
      uri: ((paas-templates-uri))
      paths: ["<%= root_deployment_name %>/root-deployment.yml"]
      branch: ((paas-templates-precompile-branch))
      skip_ssl_verification: true
<% end %>

<% uniq_releases.sort.each do |release, info| %>
  - name: precompile-<%= release %>-deployment
    icon: cube-send
    type: bosh-deployment-v2
    source:
      target: ((bosh-target))
      client: ((bosh-username))
      client_secret: "((bosh-password))"
      deployment: precompile-<%= release %>-deployment
      ca_cert: <%= bosh_cert[root_deployment_name]&.dump %>

  - name: <%= release %>
  <% if offline_boshreleases_enabled %>
    icon: home-floor-a
    type: s3
    source:
      bucket: ((s3-br-bucket))
      region_name: ((s3-br-region-name))
      regexp: <%= info['repository']&.split('/')&.first %>/<%= release %>-(.*).tgz
      access_key_id: ((s3-br-access-key-id))
      secret_access_key: ((s3-br-secret-key))
      endpoint: ((s3-br-endpoint))
      skip_ssl_verification: ((s3-br-skip-ssl-verification))
    version: { path: <%= info['repository']&.split('/')&.first %>/<%= release %>-((releases.<%= release %>.version)).tgz }
  <% else %>
    type: git
    icon:  github-circle
    source:
      uri: <%= PipelineHelpers.full_repository(info) %>
      tag_filter: <%= PipelineHelpers.tag_prefix(info) %>((releases.<%= release %>.version))
      skip_ssl_verification: false
    #    access_token: ((bot-github-access-token))
    version: { ref: <%= PipelineHelpers.tag_prefix(info) %>((releases.<%= release %>.version)) }
  <% end %>

  <% if offline_boshreleases_enabled %>
  - name: compiled-<%= release %>
    icon: home-floor-b
    type: s3
    source:
      bucket: ((s3-compiled-release-bucket))
      region_name: ((s3-compiled-release-region-name))
      regexp: <%= info['repository']&.split('/')&.first %>/<%= release %>-(.*)-(.*)-(.*)-((stemcell.version)).tgz
      access_key_id: ((s3-compiled-release-access-key-id))
      secret_access_key: ((s3-compiled-release-secret-key))
      endpoint: ((s3-compiled-release-endpoint))
      skip_ssl_verification: ((s3-compiled-release-skip-ssl-verification))
    version: { path: <%= info['repository']&.split('/')&.first %>/<%= release %>-((releases.<%= release %>.version))-((s3-compiled-release-os))-((stemcell.version)).tgz }
  <% end %>

<% end %>

jobs:
<% if uniq_releases.empty? && !precompile_pipeline_enabled %>
  - name: this-is-an-empty-pipeline
<%else %>
  - name: push-boshreleases
    <% jobs['Utils'] << 'push-boshreleases' %>
    serial: true
    on_failure: *on_failure
    plan:
      - in_parallel:
          - get: cf-ops-automation
            params: { submodules: none }
            trigger: true
          - get : secrets-full-writer
            params: { submodules: none }
          - get: paas-templates-<%= root_deployment_name %>-limited
            params: { submodules: none }
            trigger: true
      <% if offline_boshreleases_enabled %>
      - task: reformat-root-deployment-yml
        input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %>-limited }
        output_mapping: { to-csv: expected-boshreleases }
        file: cf-ops-automation/concourse/tasks/reformat_expected_boshreleases_list/task.yml
        params:
          ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
      - task: missing-s3-boshreleases
        input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %>-limited }
        file:  cf-ops-automation/concourse/tasks/s3_missing_boshreleases/task.yml
        params:
          BUCKET: ((s3-br-bucket))
          REGION_NAME: ((s3-br-region-name))
          ACCESS_KEY_ID: ((s3-br-access-key-id))
          SECRET_ACCESS_KEY: ((s3-br-secret-key))
          ENDPOINT: ((s3-br-endpoint))
          SKIP_SSL_VERIFICATION: ((s3-br-skip-ssl-verification))
      <% end %>

      - task: repackage-releases
        input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %>-limited, secrets: secrets-full-writer }
        file:  cf-ops-automation/concourse/tasks/repackage_boshreleases/task.yml
        params:
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: ((bosh-password))
          BOSH_TARGET: ((bosh-target))
          BOSH_CA_CERT: secrets/<%= SharedPipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
          ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>

      - task: repackage-releases-fallback
        file:  cf-ops-automation/concourse/tasks/repackage_boshreleases_fallback/task.yml

      <% if offline_boshreleases_enabled %>
      - task: upload-repackaged-releases
        input_mapping: { local-files-dir: repackaged-releases-fallback, templates-resource: paas-templates-<%= root_deployment_name %>-limited }
        file:  cf-ops-automation/concourse/tasks/s3_boshreleases_upload/task.yml
        params:
          BUCKET: ((s3-br-bucket))
          REGION_NAME: ((s3-br-region-name))
          ACCESS_KEY_ID: ((s3-br-access-key-id))
          SECRET_ACCESS_KEY: ((s3-br-secret-key))
          ENDPOINT: ((s3-br-endpoint))
          SKIP_SSL_VERIFICATION: ((s3-br-skip-ssl-verification))
      <% end %>
      - task: upload-to-director-for-runtime-config
        # this is required to manage runtime config bosh release upload
        attempts: <%= concourse_retry[:task] %>
        input_mapping: { releases-to-upload: repackaged-releases-fallback, config-resource: secrets-full-writer }
        file:  cf-ops-automation/concourse/tasks/bosh_upload_releases/task.yml
        params:
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: ((bosh-password))
          BOSH_ENVIRONMENT: ((bosh-target))
          BOSH_CA_CERT: config-resource/<%= SharedPipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
      - task: check-repackaging-errors
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/curl-ssl
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: repackaged-releases-fallback
          run:
            path: sh
            args:
              - -ec
              - |
                cd repackaged-releases-fallback
                if [ -e fallback-fixes.yml ]; then
                echo "=========================================================="
                  echo "Dump fallback-fixes"
                  cat fallback-fixes.yml
                fi
                echo "=========================================================="
                  if [ -e fallback-errors.yml ]; then
                    echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                    echo "Dump fallback-errors"
                    cat fallback-errors.yml
                    echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                    exit 1
                  elif [ -e errors.yml ]; then
                    echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                    echo "Dump errors"
                    cat errors.yml
                    echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                    exit 1
                  else
                    echo "No errors detected"
                  fi
  <% if offline_stemcells_enabled %>
  - name: upload-stemcell-to-s3
    <% jobs['Utils'] << 'upload-stemcell-to-s3' %>
    serial: true
    on_failure: *on_failure
    plan:
      - in_parallel:
          - get: cf-ops-automation
            params: { submodules: none }
            trigger: true
          - get : secrets-full-writer
            params: { submodules: none }
          - get: paas-templates-<%= root_deployment_name %>-limited
            params: { submodules: none }
            trigger: true
      - task: upload-stemcells
        attempts: <%= concourse_retry[:task] %>
        input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %>-limited }
        file:  cf-ops-automation/concourse/tasks/s3_stemcells_upload/task.yml
        params:
          BUCKET: ((s3-stemcell-bucket))
          REGION_NAME: ((s3-stemcell-region-name))
          ACCESS_KEY_ID: ((s3-stemcell-access-key-id))
          SECRET_ACCESS_KEY: ((s3-stemcell-secret-key))
          ENDPOINT: ((s3-stemcell-endpoint))
          SKIP_SSL_VERIFICATION: ((s3-stemcell-skip-ssl-verification))
          STEMCELL_PREFIX: ((stemcell-name-prefix))
          STEMCELL_MAIN_NAME: ((stemcell-main-name))
          STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells
          VERSIONS_FILE: templates-resource/<%= root_deployment_name %>/root-deployment.yml
  <% end %>


  - name: upload-stemcell-to-director
    <% jobs['Utils'] << 'upload-stemcell-to-director' %>
    serial: true
    on_failure: *on_failure
    plan:
      - in_parallel:
          - get: cf-ops-automation
            params: { submodules: none }
            trigger: true
          - get : secrets-full-writer
            params: { submodules: none }
          - get: ((stemcell-main-name))
            trigger: true
            attempts: <%= concourse_retry[:pull] %>
    <% unless offline_stemcells_enabled %>
          - get: paas-templates-<%= root_deployment_name %>-limited
            params: { submodules: none }
            trigger: true
      - task: download-stemcell
        attempts: <%= concourse_retry[:task] %>
        input_mapping: { templates-resource: paas-templates-<%= root_deployment_name %>-limited }
        output_mapping: { stemcell: ((stemcell-main-name)) }
        file:  cf-ops-automation/concourse/tasks/download_stemcell/task.yml
        params:
          VERSIONS_FILE: templates-resource/<%= root_deployment_name %>/root-deployment.yml
          STEMCELL_PREFIX: ((stemcell-name-prefix))
          STEMCELL_MAIN_NAME: ((stemcell-main-name))
          STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells
    <% end %>
      - task: upload-to-director
        attempts: <%= concourse_retry[:task] %>
        input_mapping: { stemcell: ((stemcell-main-name)), config-resource: secrets-full-writer }
        file:  cf-ops-automation/concourse/tasks/bosh_upload_stemcell/task.yml
        params:
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: ((bosh-password))
          BOSH_ENVIRONMENT: ((bosh-target))
          BOSH_CA_CERT: config-resource/<%= SharedPipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>

  <% uniq_releases.each do |release, info| %>
  <% current_serial_group = configurer.serial_group_strategy.generate(release, info) %>
  - name: compile-and-export-<%= release %>
    <% jobs["Releases"] << "compile-and-export-#{release}" %>
    <% jobs["#{release[0]}"] << "compile-and-export-#{release}" %>
    <%= "serial_groups: [#{current_serial_group}]" if enabled_parallel_execution_limit%>
    serial: true
    on_failure: *on_failure
    plan:
      - in_parallel:
          - get: <%= release %>
            trigger: true
            attempts: <%= concourse_retry[:pull] %>
          - get: secrets-full-writer
            params: { submodules: none}
          - get: ((stemcell-main-name))
            passed: [ upload-stemcell-to-director ]
            trigger: true
            attempts: <%= concourse_retry[:pull] %>
      - task: generate-<%= release %>-deployment-manifest
        <%
        manifest = {'name' => "precompile-#{release}-deployment", 'instance_groups' => [], 'update' => { 'canaries' => 1, 'max_in_flight' => 1, 'canary_watch_time' => '1000-90000', 'update_watch_time' => '1000-90000' }, 'releases' => [] }
        manifest['releases'] << {'name' => release, 'version' => info.fetch('version', 'latest')}

        precompile_manifest = manifest
       %>
        input_mapping: {stemcell: ((stemcell-main-name))}
        output_mapping: {generated-files: final-release-manifest}
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/bosh-cli-v2-cf-cli
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: stemcell
          outputs:
            - name: generated-files
          run:
            path: sh
            args:
              - -ec
              - |
                cd stemcell
                STEMCELL_INFO=$(bosh inspect-local-stemcell --json *.tgz | jq '.Tables|.[0]|.Rows|.[0]')
                export STEMCELL_OS=$(echo ${STEMCELL_INFO} | jq -r '.["os"]')
                cd ..

                ruby -ryaml -e 'ruby_manifest=eval(ENV["MANIFEST_CONTENT"]); ruby_manifest["stemcells"] = [ "alias" => "default", "os" => ENV["STEMCELL_OS"], "version" => "latest"];File.open(File.join("generated-files", ENV["MANIFEST_NAME"]), "w") { |file| file.write(ruby_manifest.to_yaml) }'
                cat generated-files/${MANIFEST_NAME}
          params:
            MANIFEST_NAME: "precompile-<%= release %>-deployment.yml"
            MANIFEST_CONTENT: '<%= precompile_manifest %>'
      - try:
          # this step may fail when boshrelease have been already uploaded to director with another sha1. Indeed, everytime we repackage a bosh release a new sha1 is produced
          task: upload-to-director
          attempts: <%= concourse_retry[:task] %>
          input_mapping: { releases-to-upload: <%= release %>, config-resource: secrets-full-writer }
          config:
            platform: linux
            image_resource:
              type: registry-image
              source:
                repository: elpaasoci/bosh-cli-v2
                tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
            inputs:
              - name: releases-to-upload
              - name: config-resource
            run:
              path: bash
              args:
                - -c
                - |
                  find releases-to-upload/ -name "*.tgz" -exec bosh upload-release {} \;
                  echo "INFO: this step may fail when boshrelease have been already uploaded to director with another sha1. Indeed, everytime we repackage a bosh release a new sha1 is produced."

          params:
            BOSH_CLIENT: ((bosh-username))
            BOSH_CLIENT_SECRET: ((bosh-password))
            BOSH_ENVIRONMENT: ((bosh-target))
            BOSH_CA_CERT: config-resource/<%= SharedPipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>

      - put: precompile-<%= release %>-deployment
        attempts: <%= concourse_retry[:bosh_push] %>
        params:
          manifest: final-release-manifest/precompile-<%= release %>-deployment.yml
          cleanup: true

      - task: compile-and-export-<%= release %>
        attempts: <%= concourse_retry[:task] %>
        input_mapping: {secrets: secrets-full-writer, stemcell: ((stemcell-main-name))}
        output_mapping: {exported-release: <%= release %>-exported-release}
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/bosh-cli-v2-cf-cli
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: stemcell
            - name: secrets
          outputs:
            - name: exported-release
          run:
            path: bash
            args:
              - -ec
              - |
                set -o pipefail
                STEMCELL_INFO=$(bosh inspect-local-stemcell --json stemcell/*.tgz | jq '.Tables|.[0]|.Rows|.[0]')
                export STEMCELL_OS=$(echo ${STEMCELL_INFO} | jq -r '.["os"]')
                export STEMCELL_VERSION=$(echo ${STEMCELL_INFO} | jq -r '.["version"]')
                echo "Exporting ${RELEASE_NAME}/${RELEASE_VERSION} - ${STEMCELL_OS}/${STEMCELL_VERSION}"
                TIMESTAMP=$(date +'%Y-%m-%d-%H-%M-%S')
                if ! bosh export-release "${RELEASE_NAME}/${RELEASE_VERSION}" "${STEMCELL_OS}/${STEMCELL_VERSION}" --dir=exported-release --tty|tee exported-release/${RELEASE_NAME}-${RELEASE_VERSION}-${TIMESTAMP}.log;then
                  BLOBSTORE_ERROR_COUNT=$(grep -i error exported-release/${RELEASE_NAME}-${RELEASE_VERSION}-${TIMESTAMP}.log|grep -i "blobstore"|wc -l)
                  if [ $BLOBSTORE_ERROR_COUNT -gt 0 ];then
                    echo "COA - Blobstore error detected, cleaning deployment and release"
                    bosh delete-deployment --non-interactive
                    bosh delete-release ${RELEASE_NAME}/${RELEASE_VERSION} --non-interactive
                  else
                   echo "" # new line
                   echo "COA - No blobstore error detected, retry without cleaning."
                  fi
                  exit 1
                else
                  echo "" # new line
                  echo "COA - Bosh export-release successful"
                fi
          params:
            BOSH_DEPLOYMENT: precompile-<%= release %>-deployment
            BOSH_ENVIRONMENT: ((bosh-target))
            BOSH_CLIENT: ((bosh-username))
            BOSH_CLIENT_SECRET: "((bosh-password))"
            BOSH_CA_CERT: secrets/<%= SharedPipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
            RELEASE_NAME: <%= release %>
            RELEASE_VERSION: ((releases.<%= release %>.version))
    <% if offline_boshreleases_enabled %>
      - task: generate-<%= release %>-name
        attempts: <%= concourse_retry[:task] %>
        input_mapping: {release: <%= release %>-exported-release, stemcell: ((stemcell-main-name))}
        output_mapping: {result-dir: compiled-<%= release %>}
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/bosh-cli-v2-cf-cli
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: release
            - name: stemcell
          outputs:
            - name: result-dir
          run:
            path: sh
            args:
              - -ec
              - |
                RELEASE_INFO=$(bosh inspect-local-release --json release/*.tgz | jq '.Tables|.[0]|.Rows|.[0]')
                export RELEASE_NAME=$(echo ${RELEASE_INFO} | jq -r '.["name"]')
                export RELEASE_VERSION=$(echo ${RELEASE_INFO} | jq -r '.["version"]')
                STEMCELL_INFO=$(bosh inspect-local-stemcell --json stemcell/*.tgz | jq '.Tables|.[0]|.Rows|.[0]')
                export STEMCELL_OS=$(echo ${STEMCELL_INFO} | jq -r '.["os"]')
                export STEMCELL_VERSION=$(echo ${STEMCELL_INFO} | jq -r '.["version"]')

                cp release/*.tgz result-dir/"${RELEASE_NAME}-${RELEASE_VERSION}-${STEMCELL_OS}-${STEMCELL_VERSION}.tgz"
      - put: compiled-<%= release %>
        attempts: <%= concourse_retry[:push] %>
        params:
          file: compiled-<%= release %>/*.tgz
          acl: public-read
  <% end %>
      - put: precompile-<%= release %>-deployment
        params:
          delete:
            enabled: true
            force: true

    <% if offline_boshreleases_enabled && !precompile_skip_upload %>

    offline_boshreleases_enabled: <%= offline_boshreleases_enabled %>
    precompile_skip_upload: <%= precompile_skip_upload %>
  - name: upload-compiled-<%= release %>
    <% jobs["Compiled-releases"] << "upload-compiled-#{release}" %>
    <% jobs["#{release[0]}"] << "upload-compiled-#{release}" %>
    on_failure: *on_failure
    plan:
      - in_parallel:
        - get: cf-ops-automation
          params: { submodules: none}
          attempts: <%= concourse_retry[:pull] %>
          #trigger: true
        - get: secrets-full-writer
          params: { submodules: none}
          attempts: <%= concourse_retry[:pull] %>
        - get: compiled-<%= release %>
          trigger: true
        - get: ((stemcell-main-name))
      - task: upload-<%= release %>
        attempts: <%= concourse_retry[:task] %>
        input_mapping: {secrets: secrets-full-writer, compiled-release: compiled-<%= release %>}
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: elpaasoci/bosh-cli-v2-cf-cli
              tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
          inputs:
            - name: compiled-release
            - name: secrets
          run:
            path: sh
            args:
              - -ec
              - |
                bosh inspect-local-release compiled-release/*.tgz
                bosh upload-release compiled-release/*.tgz
          params:
            BOSH_ENVIRONMENT: ((bosh-target))
            BOSH_CLIENT: ((bosh-username))
            BOSH_CLIENT_SECRET: "((bosh-password))"
            BOSH_CA_CERT: secrets/<%= SharedPipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
    <% end %>
    <% end %>

  - name: init-concourse-boshrelease-and-stemcell-for-<%= root_deployment_name %>
    <% jobs["Utils"] << "init-concourse-boshrelease-and-stemcell-for-#{root_deployment_name}" %>
    on_failure: *on_failure
    plan:
    - in_parallel:
        - get: cf-ops-automation
          params: { submodules: none}
          attempts: <%= concourse_retry[:pull] %>
          #trigger: true
        - get: secrets-<%= root_deployment_name %>-trigger
          params: { submodules: none}
          attempts: <%= concourse_retry[:pull] %>
        - get: paas-templates-<%= root_deployment_name %>-versions
          params: { submodules: none}
          attempts: <%= concourse_retry[:pull] %>
          trigger: true
    - task: generate-<%= root_deployment_name %>-flight-plan
      output_mapping: {result-dir: init-<%= root_deployment_name %>-plan}
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: elpaasoci/curl-ssl
            tag: ee3c5beba307abed13cb26e3a1ba21dc4ac8807f
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -ec
          - |
    <% uniq_releases.sort.each do |name, info| %>
      <% from_prefix = PipelineHelpers.bosh_io_hosted?(info) ? "version" : "tag" %>
      <% if offline_boshreleases_enabled %>
            echo "check-resource -r $BUILD_PIPELINE_NAME/<%= name %> --from path:<%= info['repository']&.split('/')&.first %>/<%= name %>-((releases.<%= name %>.version)).tgz" | tee -a result-dir/flight-plan
            echo "check-resource -r $BUILD_PIPELINE_NAME/compiled-<%= name %> --from path:<%= info['repository']&.split('/')&.first %>/<%= name %>-((releases.<%= name %>.version))-((s3-compiled-release-os))-((stemcell.version)).tgz" | tee -a result-dir/flight-plan
      <% else %>
            echo "check-resource -r $BUILD_PIPELINE_NAME/<%= name %> --from <%= from_prefix %>:<%= PipelineHelpers.tag_prefix(info) %>((releases.<%= name %>.version))" | tee -a result-dir/flight-plan
      <% end %>
    <% end %>
    <% if offline_stemcells_enabled %>
            echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from path:((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell.version))-((stemcell-main-name)).tgz" | tee -a result-dir/flight-plan
    <% else %>
            echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from version:((stemcell.version))" | tee -a result-dir/flight-plan
    <% end %>
        params:
          BUILD_PIPELINE_NAME: <%= root_deployment_name %>-bosh-precompile-generated
    - task: fly-into-concourse
      input_mapping: {fly-cmd: init-<%= root_deployment_name %>-plan}
      output_mapping: {flight-report: concourse-<%= root_deployment_name %>-init-report}
      file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
      params:
        ATC_EXTERNAL_URL: ((concourse-<%= root_deployment_name %>-target))
        FLY_USERNAME: ((concourse-<%= root_deployment_name %>-username))
        FLY_PASSWORD: "((concourse-<%= root_deployment_name %>-password))"
        FLY_TEAM: <%= current_team %>

groups:
  - name: <%= root_deployment_name.downcase %>
    jobs:
      - "*"
  <% jobs.sort.each do |group_name, job_names| %>
  - name: "<%= group_name.downcase.to_s %>"
    jobs:
      <% job_names&.sort.each do |job_name| %>
      - <%= job_name %>
        <% end %>
  <% end %>
<% end %>