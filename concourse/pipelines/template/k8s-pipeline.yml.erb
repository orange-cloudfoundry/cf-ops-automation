<%
  require "#{ops_automation_path}/lib/pipeline_helpers"
  root_deployment_name = depls

  disabled_deployments = all_dependencies.select do |_, deployment_info|
    deployment_info['status'] == 'disabled'
  end

  enabled_deployments = all_dependencies.select do |_, deployment_info|
    deployment_info['status'] == 'enabled' && deployment_info['kubernetes']
  end

  uniq_releases = {}
  enabled_deployments&.sort&.each do |name, boshrelease|
    boshrelease['releases']&.each do |release, info|
      previous_info = uniq_releases[release]
      raise "Inconsitency detected with '#{release}' boshrelease, in '#{name}' deployment: trying to replace\n#{previous_info} with \n#{info}" if previous_info && ! info.eql?(previous_info)
      uniq_releases[release] = info
    end
  end

  offline_boshreleases_enabled = config&.dig('offline-mode', 'boshreleases') && true
  precompile_pipeline_enabled = config&.fetch('precompile-mode', true) && true
  jobs = Hash.new {|h,k| h[k]=[]}

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(root_deployment_name).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  enabled_parallel_execution_limit = configurer.parallel_execution_limit.overridden?
  git_shallow_clone_depth = configurer.git_shallow_clone_depth.get

  current_team = CiDeployment.team(all_ci_deployments, root_deployment_name, "#{root_deployment_name}-k8s-generated")
%>

---
resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: meta
  type: registry-image
  source:
    repository: olhtbr/metadata-resource
    tag: 2.0.1

resources:
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))

- name: secrets-<%= root_deployment_name %>-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "<%= root_deployment_name %>/ci-deployment-overview.yml", "<%= root_deployment_name %>/secrets", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-<%= root_deployment_name %>
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "<%= root_deployment_name %>/root-deployment.yml", "<%= root_deployment_name %>/template"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

<% unless enabled_deployments.empty? %>
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta

<% enabled_deployments.sort.each do |name, boshrelease|
  secrets_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: root_deployment_name,
    name: name,
    git_submodules: git_submodules,
    config: boshrelease,
    config_key: 'secrets',
    defaults: ["#{root_deployment_name}/#{name}", "shared"])
  paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: root_deployment_name,
    name: name,
    git_submodules: git_submodules,
    config: boshrelease,
    config_key: 'templates',
    defaults: ["#{root_deployment_name}/#{name}"])
  paas_templates_selected_paths << "#{root_deployment_name}/root-deployment.yml" if paas_templates_selected_paths
%>
<% deployment_details = PipelineHelpers::DeploymentDetails.new(name, boshrelease) %>
<% if deployment_details.local_deployment_secrets_scan? %>
- name: secrets-<%= name %>
  icon: source-merge
  type: git
  source:
    uri: ((secrets-uri))
    paths: <%= secrets_selected_paths %>
    branch: ((secrets-branch))
    skip_ssl_verification: true
<% end %>
- name: paas-templates-<%= name %>
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: <%= paas_templates_selected_paths %>
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
<% end %>
<% end %>
<% if enabled_deployments.any? %>
- name: secrets-<%= root_deployment_name %>-trigger
  icon: source-commit
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "<%= root_deployment_name %>", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: k8s-configs-repository
  icon: source-pull
  type: git
  source:
    uri: ((k8s-configs-repository-uri))
    username: ((k8s-configs-repository-username))
    password: ((k8s-configs-repository-password))
    branch: ((k8s-configs-repository-branch))
    skip_ssl_verification: true

#- name: paas-templates-<%#= root_deployment_name %>-versions
#  icon: home-thermometer
#  type: git
#  source:
#    uri: ((paas-templates-uri))
#    paths: ["<%= root_deployment_name %>/root-deployment.yml"]
#    branch: pipeline-current-((paas-templates-branch))
#    skip_ssl_verification: true
<% end %>

<% if disabled_deployments.any? %>
#- name: paas-templates-full
#  icon: home-assistant
#  type: git
#  source:
#    uri: ((paas-templates-uri))
#    branch: pipeline-current-((paas-templates-branch))
#    skip_ssl_verification: true
<% end %>

jobs:
- name: execute-deploy-script
  <% jobs['utils'] << 'execute-deploy-script' %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: secrets-full-writer
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      - get: secrets-<%= root_deployment_name %>-limited
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-templates-<%= root_deployment_name %>
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      - get: k8s-configs-repository
        params: { submodules: none }
    - task: apply-iaas-type-and-profiles
      input_mapping:
        paas-templates-resource: paas-templates-<%= root_deployment_name %>
      file: cf-ops-automation/concourse/tasks/apply_iaas_type_and_profiles/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
        COA_DEPLOYMENT_NAME: hooks
        CONFIG_DIR: k8s
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
    - task: run-deploy.sh
      input_mapping: { paas-templates-resource: paas-templates-<%= root_deployment_name %>,  credentials-resource: secrets-full-writer }
      output_mapping: { result-dir: updated-k8s-repo }
      file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
      params:
        COA_DEPLOYMENT_NAME: <%= root_deployment_name %>-k8s
        CUSTOM_SCRIPT_DIR: paas-templates-resource/<%= root_deployment_name %>/hooks/k8s
        CREDHUB_SERVER: ((credhub-server))
        CREDHUB_CLIENT: ((credhub-client))
        CREDHUB_SECRET: "((credhub-secret))"
        CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
        FILE_EXECUTION_FILTER: "deploy*.sh"

    - put: k8s-configs-repository
      attempts: 2
      get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      params:
        repository: updated-k8s-repo
        rebase: true

<% enabled_deployments.sort.each do |name, boshrelease| %>
<% current_serial_group = configurer.serial_group_strategy.generate(name, boshrelease) %>
<% deployment_details = PipelineHelpers::DeploymentDetails.new(name, boshrelease) %>
- name: deploy-<%= name %>
  <% jobs["deploy-#{name[0]}"] << "deploy-#{name}" %>
  serial: true
  <%= "serial_groups: [#{current_serial_group}]" if enabled_parallel_execution_limit%>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: k8s-configs-repository
      params: { submodules: none }
    - get: secrets-full-writer
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
  <% if deployment_details.local_deployment_secrets_scan? %>
    - get: secrets-<%= name %>
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: <%= deployment_details.local_deployment_secrets_trigger? %>
  <% end %>
    - get: paas-templates-<%= name %>
      trigger: true
      params:
  <%
    paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
      depls: root_deployment_name,
      name: name,
      git_submodules: git_submodules,
      config: boshrelease,
      config_key: 'templates',
      defaults: ["#{root_deployment_name}/#{name}"]
    )
    submodules = PipelineHelpers.git_resource_loaded_submodules(
      depls: root_deployment_name,
      name: name,
      loaded_submodules: git_submodules,
      observed_paths: paas_templates_selected_paths
    )
  %>
        submodules: <%= submodules %>
        submodule_recursive: "<%= deployment_details.git_details.submodule_recursive %>" # this must be a string
        depth: <%= deployment_details.git_details.depth? ? deployment_details.git_details.depth : git_shallow_clone_depth %>
  - task: generate-<%= name %>-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: paas-templates-<%= name %>
    output_mapping: {generated-files: pre-processed-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/<%= root_deployment_name %>/<%= name %>/
      YML_TEMPLATE_DIR: additional-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      YML_FILES: |
          ./credentials-resource/<%= root_deployment_name %>/<%= name %>/secrets/meta.yml
          ./credentials-resource/<%= root_deployment_name %>/<%= name %>/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      COA_DEPLOYMENT_NAME: <%= name %>
  - task: apply-iaas-type-and-profiles
    input_mapping:
      paas-templates-resource: paas-templates-<%= name %>
    file: cf-ops-automation/concourse/tasks/apply_iaas_type_and_profiles/task.yml
    params:
      ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
      COA_DEPLOYMENT_NAME: <%= name %>
      CONFIG_DIR: k8s-config
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: execute-pre-deploy-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
    output_mapping: {result-dir: ignored-k8s-repo-pre-deploy}
    file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
    params:
      COA_DEPLOYMENT_NAME: <%= name %>
      CUSTOM_SCRIPT_DIR: paas-templates-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      FILE_EXECUTION_FILTER: "pre-deploy*.sh"
  - task: execute-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
    output_mapping: {result-dir: updated-k8s-repo}
    file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
    params:
      COA_DEPLOYMENT_NAME: <%= name %>
      CUSTOM_SCRIPT_DIR: paas-templates-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - put: k8s-configs-repository
    attempts: 2
    get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    params:
      repository: updated-k8s-repo
      rebase: true
  - task: execute-post-deploy-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      k8s-configs-repository: updated-k8s-repo
    output_mapping: {result-dir: ignored-k8s-repo-post-deploy}
    file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
    params:
      COA_DEPLOYMENT_NAME: <%= name %>
      CUSTOM_SCRIPT_DIR: paas-templates-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      FILE_EXECUTION_FILTER: "post-deploy*.sh"

<% end %>

<% if enabled_deployments.any? %>
- name: retrigger-all-jobs
  <% jobs['utils'] << 'retrigger-all-jobs' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: secrets-<%= root_deployment_name %>-trigger
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
  - task: generate-<%= root_deployment_name %>-pipeline
    output_mapping: {result-dir: trigger-<%= root_deployment_name %>-plan}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentpaas/curl-ssl
          tag: 19d32c252e328a762f75417fcee7cab6dbac9e97
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
  <% enabled_deployments.sort.each do |name, _| %>
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-<%= name %>" >> result-dir/flight-plan
  <% end %>
      params:
        BUILD_PIPELINE_NAME: <%= root_deployment_name %>-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-<%= root_deployment_name %>-plan}
    output_mapping: {flight-report: concourse-<%= root_deployment_name %>-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-<%= root_deployment_name %>-target))
      FLY_USERNAME: ((concourse-<%= root_deployment_name %>-username))
      FLY_PASSWORD: "((concourse-<%= root_deployment_name %>-password))"
      FLY_TEAM: <%= current_team || 'main' %>
<% end %>

groups:
- name: <%= root_deployment_name.downcase %>
  jobs:
<% jobs.map {|_, job_names| job_names }.flatten.uniq.sort.each do |job_name| %>
    - <%= job_name %>
<% end %>
<% jobs.sort.each do |group_name, job_names| %>
- name: <%= group_name.downcase %>
  jobs:
  <% job_names&.sort.each do |job_name| %>
    - <%= job_name %>
  <% end %>
<% end %>
