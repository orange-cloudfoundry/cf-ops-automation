<%
  require "#{ops_automation_path}/lib/pipeline_helpers"
  root_deployment_name = depls

  disabled_deployments = all_dependencies.select do |_, deployment_info|
    deployment_info['status'] == 'disabled'
  end

  enabled_deployments = all_dependencies.select do |_, deployment_info|
    deployment_info['status'] == 'enabled' && deployment_info['kubernetes']
  end

  uniq_releases = {}
  enabled_deployments&.sort&.each do |name, boshrelease|
    boshrelease['releases']&.each do |release, info|
      previous_info = uniq_releases[release]
      raise "Inconsitency detected with '#{release}' boshrelease, in '#{name}' deployment: trying to replace\n#{previous_info} with \n#{info}" if previous_info && ! info.eql?(previous_info)
      uniq_releases[release] = info
    end
  end

  offline_boshreleases_enabled = config&.dig('offline-mode', 'boshreleases') && true
  precompile_pipeline_enabled = config&.fetch('precompile-mode', true) && true
  jobs = Hash.new {|h,k| h[k]=[]}

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(root_deployment_name).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  enabled_parallel_execution_limit = configurer.parallel_execution_limit.overridden?
  git_shallow_clone_depth = configurer.git_shallow_clone_depth.get

  current_team = CiDeployment.team(all_ci_deployments, root_deployment_name, "#{root_deployment_name}-k8s-generated")
%>

---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: ((docker-registry-url))cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: meta
  type: docker-image
  source:
    repository: ((docker-registry-url))olhtbr/metadata-resource
    tag: 2.0.1

resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta

- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))

- name: secrets-<%= root_deployment_name %>-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "<%= root_deployment_name %>/ci-deployment-overview.yml", "<%= root_deployment_name %>/secrets", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-<%= root_deployment_name %>
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "<%= root_deployment_name %>/root-deployment.yml", "<%= root_deployment_name %>/template"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

<% unless enabled_deployments.empty? %>

<% enabled_deployments.sort.each do |name, boshrelease|
  secrets_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: root_deployment_name,
    name: name,
    git_submodules: git_submodules,
    config: boshrelease,
    config_key: 'secrets',
    defaults: ["#{root_deployment_name}/#{name}", "shared"])
  paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
    depls: root_deployment_name,
    name: name,
    git_submodules: git_submodules,
    config: boshrelease,
    config_key: 'templates',
    defaults: ["#{root_deployment_name}/#{name}"])
  paas_templates_selected_paths << "#{root_deployment_name}/root-deployment.yml" if paas_templates_selected_paths
%>
<% deployment_details = PipelineHelpers::DeploymentDetails.new(name, boshrelease) %>
<% if deployment_details.local_deployment_secrets_scan? %>
- name: secrets-<%= name %>
  icon: source-merge
  type: git
  source:
    uri: ((secrets-uri))
    paths: <%= secrets_selected_paths %>
    branch: ((secrets-branch))
    skip_ssl_verification: true
<% end %>
- name: paas-templates-<%= name %>
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: <%= paas_templates_selected_paths %>
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
<% end %>
<% end %>
<% if enabled_deployments.any? || disabled_deployments.any? || all_ci_deployments&.any? %>
- name: secrets-<%= root_deployment_name %>-trigger
  icon: source-commit
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "<%= root_deployment_name %>", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
<% end %>

<% if enabled_deployments.any? %>
- name: k8s-configs-repository
  icon: source-pull
  type: git
  source:
    uri: ((k8s-configs-repository-uri))
    username: ((k8s-configs-repository-username))
    password: ((k8s-configs-repository-password))
    branch: ((k8s-configs-repository-branch))
    skip_ssl_verification: true

#- name: paas-templates-<%#= root_deployment_name %>-versions
#  icon: home-thermometer
#  type: git
#  source:
#    uri: ((paas-templates-uri))
#    paths: ["<%= root_deployment_name %>/root-deployment.yml"]
#    branch: pipeline-current-((paas-templates-branch))
#    skip_ssl_verification: true
<% end %>

<% if disabled_deployments.any? %>
#- name: paas-templates-full
#  icon: home-assistant
#  type: git
#  source:
#    uri: ((paas-templates-uri))
#    branch: pipeline-current-((paas-templates-branch))
#    skip_ssl_verification: true
<% end %>

jobs:
- name: execute-deploy-script
  <% jobs['utils'] << 'execute-deploy-script' %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: secrets-<%= root_deployment_name %>-limited
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: paas-templates-<%= root_deployment_name %>
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: <%= git_shallow_clone_depth %> }

    - task: run-deploy.sh
      input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-<%= root_deployment_name %>, secrets: secrets-<%= root_deployment_name %>-limited}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: <%= root_deployment_name %>/template
        COMMON_SCRIPT_DIR: scripts-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
        CREDHUB_SERVER: ((credhub-server))
        CREDHUB_CLIENT: ((credhub-client))
        CREDHUB_SECRET: "((credhub-secret))"
        CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>

<% enabled_deployments.sort.each do |name, boshrelease| %>
<% current_serial_group = configurer.serial_group_strategy.generate(name, boshrelease) %>
<% deployment_details = PipelineHelpers::DeploymentDetails.new(name, boshrelease) %>
- name: deploy-<%= name %>
  <% jobs["deploy-#{name[0]}"] << "deploy-#{name}" %>
  serial: true
  <%= "serial_groups: [#{current_serial_group}]" if enabled_parallel_execution_limit%>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: k8s-configs-repository
      params: { submodules: none }
    - get: secrets-full-writer
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: true
  <% if deployment_details.local_deployment_secrets_scan? %>
    - get: secrets-<%= name %>
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
      trigger: <%= deployment_details.local_deployment_secrets_trigger? %>
  <% end %>
    - get: paas-templates-<%= name %>
      trigger: true
      params:
  <%
    paas_templates_selected_paths = PipelineHelpers.git_resource_selected_paths(
      depls: root_deployment_name,
      name: name,
      git_submodules: git_submodules,
      config: boshrelease,
      config_key: 'templates',
      defaults: ["#{root_deployment_name}/#{name}"]
    )
    submodules = PipelineHelpers.git_resource_loaded_submodules(
      depls: root_deployment_name,
      name: name,
      loaded_submodules: git_submodules,
      observed_paths: paas_templates_selected_paths
    )
  %>
        submodules: <%= submodules %>
        submodule_recursive: "<%= deployment_details.git_details.submodule_recursive %>" # this must be a string
        depth: <%= deployment_details.git_details.depth? ? deployment_details.git_details.depth : git_shallow_clone_depth %>
  - task: generate-<%= name %>-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: paas-templates-<%= name %>
    output_mapping: {generated-files: pre-processed-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/<%= root_deployment_name %>/<%= name %>/
      YML_TEMPLATE_DIR: additional-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      YML_FILES: |
          ./credentials-resource/<%= root_deployment_name %>/<%= name %>/secrets/meta.yml
          ./credentials-resource/<%= root_deployment_name %>/<%= name %>/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      COA_DEPLOYMENT_NAME: <%= name %>

  - task: execute-<%= name %>-pre-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-<%= name %>
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
      additional-resource: pre-processed-manifest
    output_mapping: {generated-files: pre-bosh-deploy-resource}
    file: cf-ops-automation/concourse/tasks/pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/<%= root_deployment_name %>/<%= name %>/template
      SECRETS_DIR: credentials-resource/<%= root_deployment_name %>/<%= name %>
      COA_DEPLOYMENT_NAME: <%= name %>
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
  - task: apply-iaas-type-and-profiles
    input_mapping:
      paas-templates-resource: paas-templates-<%= name %>
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))orangecloudfoundry/k8s-tools
          tag: 9f5d31d753d3560c375c85cff3e11796e8d2cbdf
      inputs:
        - name: paas-templates-resource
      outputs:
        - name: paas-templates-resolved
      params:
        ROOT_DEPLOYMENT_NAME: <%= root_deployment_name %>
        COA_DEPLOYMENT_NAME: <%= name %>
        CONFIG_DIR: k8s-config
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
      run:
        path: bash
        args:
          - -ec
          - |
            git clone paas-templates-resource paas-templates-resolved
            echo "Copying git metadata"
            cp -p paas-templates-resource/.git/commit_message paas-templates-resolved/.git
            cp -p paas-templates-resource/.git/commit_timestamp paas-templates-resolved/.git
            cp -p paas-templates-resource/.git/committer paas-templates-resolved/.git
            cp -p paas-templates-resource/.git/describe_ref paas-templates-resolved/.git
            cp -p paas-templates-resource/.git/ref paas-templates-resolved/.git
            cp -p paas-templates-resource/.git/short_ref paas-templates-resolved/.git


            cd paas-templates-resolved
            cd "$ROOT_DEPLOYMENT_NAME/$COA_DEPLOYMENT_NAME/$CONFIG_DIR"

            if [[ -n "${IAAS_TYPE}" && -d "${IAAS_TYPE}" ]]; then
              echo "Copying from ${PWD}/${IAAS_TYPE} to ${PWD}"
              cp -rv "${IAAS_TYPE}"/* .
            else
              echo "ignoring IAAS_TYPE customization. Iaas type not defined / detected at ${PWD}/${IAAS_TYPE}. Iaas type: $IAAS_TYPE"
            fi

            if [ -z "${PROFILES}" ]; then
              echo "\$PROFILES is empty, skipping"
              exit 0
            fi

            echo "${PROFILES}"|sed -e 's/,/\n/g' > /tmp/profiles.txt
            if [ "$PROFILES_AUTOSORT" = "true" ]; then
              NEWLINE_DELIMITED_PROFILES=$(sort </tmp/profiles.txt)
              echo -e "Auto sort profiles:\n${NEWLINE_DELIMITED_PROFILES}"
            else
              NEWLINE_DELIMITED_PROFILES=$(cat /tmp/profiles.txt)
              echo "Auto sort profiles disabled: ${NEWLINE_DELIMITED_PROFILES}"
            fi
            for profile in ${NEWLINE_DELIMITED_PROFILES}; do
              echo "-------------------------"
              if [[ -n ${profile} && -d ${profile} ]]; then
                cp -rv "${profile}"/* .
              else
                echo "ignoring ${profile} customization. Profile not defined / detected at ${PWD}/<PROFILE>. Profile: <${profile}>"
              fi
            done

  - task: execute-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: <%= deployment_details.select_secrets_scan_repository("secrets-#{name}", "secrets-full-writer") %>
    output_mapping: {result-dir: updated-k8s-repo}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))orangecloudfoundry/k8s-tools
          tag: 9f5d31d753d3560c375c85cff3e11796e8d2cbdf
      inputs:
        - name: paas-templates-resource
        - name: credentials-resource
        - name: pre-processed-manifest
        - name: cf-ops-automation
        - name: k8s-configs-repository
      outputs:
        - name: result-dir
      run:
        path: bash
        args:
        - -ec
        - |
          echo "Available tools:"
          for app in $(ls /usr/local/bin); do echo "$app: $($app --version 2>/dev/null|| $app version 2>/dev/null)";done
          echo '---------------------'
          OUTPUT_DIR=$(realpath ${OUTPUT_DIR:-result-dir})
          export CREDHUB_CA_CERT=$(realpath $CREDHUB_CA_CERT)
          export PRE_PROCESSED_MANIFEST_PATH=$(realpath pre-processed-manifest)
          export K8S_GIT_REPO_PATH="${OUTPUT_DIR}"
          export BASE_TEMPLATE_DIR=$(realpath ${CUSTOM_SCRIPT_DIR})
          export PAAS_TEMPLATES_COMMIT_ID=$(cat  paas-templates-resource/.git/ref)
          export PAAS_TEMPLATES_COMMITTER=$(cat  paas-templates-resource/.git/committer)
          export PAAS_TEMPLATES_COMMIT_MESSAGE=$(cat  paas-templates-resource/.git/commit_message)
          echo "Available Env Var:"
          echo "\$COA_DEPLOYMENT_NAME: deployment name (set to: $COA_DEPLOYMENT_NAME)"
          echo "\$COA_deployment__name: deployment name (set to: $COA_deployment__name)"
          echo "\$BASE_TEMPLATE_DIR: directory containing k8s scripts to execute (set to: $BASE_TEMPLATE_DIR)"
          echo "\$K8S_GIT_REPO_PATH: directory containing generated files (set to: $K8S_GIT_REPO_PATH)"
          echo "\$PAAS_TEMPLATES_COMMIT_ID, \$PAAS_TEMPLATES_COMMITTER, \$PAAS_TEMPLATES_COMMIT_MESSAGE"
          echo "\$PRE_PROCESSED_MANIFEST_PATH: directory containing files processed during 'generate-<deployment-name>-manifest' step"
          echo '---------------------'

          echo "setup OUTPUT K8S_GIT_REPO_PATH"
          git config --global advice.detachedHead false
          git config --global user.email "$GIT_USER_EMAIL"
          git config --global user.name "$GIT_USER_NAME"

          git clone k8s-configs-repository "${OUTPUT_DIR}/"

          echo "list pre-proccessed files ($PRE_PROCESSED_MANIFEST_PATH):"
          pushd $PRE_PROCESSED_MANIFEST_PATH
          du -a .
          popd

          if [ -n "$BASE_TEMPLATE_DIR" ]; then
            k8s_scripts_count=$(find $BASE_TEMPLATE_DIR -name "[0-9][0-9]*.sh"|wc -l)
            if [ ${k8s_scripts_count} -gt 0 ]; then
              chmod +x "$BASE_TEMPLATE_DIR"/*.sh
              for k8s_script in $(ls $BASE_TEMPLATE_DIR/[0-9][0-9]*.sh);do
                echo "Processing $k8s_script"
                echo "______________________"
                ${k8s_script}
              done
            else
              echo "ignoring k8s scripts. No scripts matching $BASE_TEMPLATE_DIR/[0-9][0-9]-*.sh"
            fi
          else
            echo "ignoring k8s scripts. No directory ($BASE_TEMPLATE_DIR) detected"
          fi
      params:
        GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
        GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
    params:
      COA_DEPLOYMENT_NAME: <%= name %>
      COA_deployment__name: <%= name %>
      CUSTOM_SCRIPT_DIR: paas-templates-resource/<%= root_deployment_name %>/<%= name %>/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[root_deployment_name] %>
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))

  - put: k8s-configs-repository
    attempts: 2
    get_params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    params:
      repository: updated-k8s-repo
      rebase: true

<% end %>

<% if enabled_deployments.any? %>
- name: retrigger-all-jobs
  <% jobs['utils'] << 'retrigger-all-jobs' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
    - get: secrets-<%= root_deployment_name %>-trigger
      params: { submodules: none, depth: <%= git_shallow_clone_depth %> }
  - task: generate-<%= root_deployment_name %>-pipeline
    output_mapping: {result-dir: trigger-<%= root_deployment_name %>-plan}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))governmentpaas/curl-ssl
          tag: 2857fdbaea59594c06cf9c6e32027091b67d4767
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
  <% enabled_deployments.sort.each do |name, _| %>
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-<%= name %>" >> result-dir/flight-plan
  <% end %>
      params:
        BUILD_PIPELINE_NAME: <%= root_deployment_name %>-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-<%= root_deployment_name %>-plan}
    output_mapping: {flight-report: concourse-<%= root_deployment_name %>-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-<%= root_deployment_name %>-target))
      FLY_USERNAME: ((concourse-<%= root_deployment_name %>-username))
      FLY_PASSWORD: "((concourse-<%= root_deployment_name %>-password))"
      FLY_TEAM: <%= current_team || 'main' %>
<% end %>

groups:
- name: <%= root_deployment_name.downcase %>
  jobs:
<% jobs.map {|_, job_names| job_names }.flatten.uniq.sort.each do |job_name| %>
    - <%= job_name %>
<% end %>
<% jobs.sort.each do |group_name, job_names| %>
- name: <%= group_name.downcase %>
  jobs:
  <% job_names&.sort.each do |job_name| %>
    - <%= job_name %>
  <% end %>
<% end %>
