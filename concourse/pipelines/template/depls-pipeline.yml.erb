---
resource_types:
  - name: bosh-deployment
    type: docker-image
    source:
      repository: concourse/bosh-deployment-resource
      tag: latest
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

  - name: cron-resource
    type: docker-image
    source:
      repository: cftoolsmiths/cron-resource

  - name: bosh-config
    type: docker-image
    source:
      repository: dellemcdojo/bosh-config-resource

  - name: concourse-pipeline
    type: docker-image
    source:
      repository: concourse/concourse-pipeline-resource

  - name: bosh-deployment-v2
    type: docker-image
    source:
      repository: cloudfoundry/bosh-deployment-resource

  - name: bosh-errand
    type: docker-image
    source:
      repository: starkandwayne/bosh2-errand-resource

resources:

- name: at-noon
  type: cron-resource
  source:
    expression: "15 12 * * 1-5"
    location: "Europe/Paris"
    fire_immediately: true

- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

<% terraform_config_path = nil %>
<% TERRAFORM_CONFIG_DIRNAME_KEY='terraform_config'%>
<% unless all_ci_deployments&.empty? || all_ci_deployments[depls][TERRAFORM_CONFIG_DIRNAME_KEY].nil? %>
  <% terraform_config_path = all_ci_deployments[depls][TERRAFORM_CONFIG_DIRNAME_KEY]['state_file_path'] %>
<% end %>
<% terraform_config_path_value = ",\"#{terraform_config_path}\"" if terraform_config_path %>

- name: secrets-<%=depls %>
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml","<%= depls %>/ci-deployment-overview.yml","<%= depls %>/secrets","shared"<%= terraform_config_path_value || '' %>]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: secrets-full-writer
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-template-<%=depls %>
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml","<%= depls %>/template"<%= terraform_config_path_value || '' %>]
    branch: ((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

<% disabled_deployments = all_dependencies.select{|_,deployment_infos| deployment_infos['status']=='disabled'} %>
<% enabled_deployments = all_dependencies.select{|_,deployment_infos| deployment_infos['status']=='enabled' && deployment_infos['bosh-deployment']} %>
<% puts enabled_deployments %>

<% unless enabled_deployments.empty? %>
- name: bosh-stemcell
#    name: ((stemcell-name))
  type: s3
  source:
    bucket: ((s3-stemcell-bucket))
    region_name: ((s3-stemcell-region-name))
    # customization is required to remove bosh prefix in stemcell name
    regexp: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-(.*)-((stemcell-main-name)).tgz
    access_key_id: ((s3-stemcell-access-key-id))
    secret_access_key: ((s3-stemcell-secret-key))
    endpoint: ((s3-stemcell-endpoint))
    skip_ssl_verification: ((s3-stemcell-skip-ssl-verification))

<% end %>
<% enabled_deployments.sort.each do |name,boshrelease| %>
- name: secrets-<%= name %>
  type: git
  source:
    uri: ((secrets-uri))
    <% ext_scan_path = boshrelease['resources']['secrets']['extended_scan_path'] if ( boshrelease['resources'] && boshrelease['resources']['secrets']['extended_scan_path'] ) %>
    <% ext_scan_path_value = ",\"#{ext_scan_path.join('","')}\"" if ext_scan_path %>
    paths: ["<%= depls %>/<%= name %>","shared"<%= ext_scan_path_value || '' %>]
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-template-<%= name %>
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["<%= depls %>/<%= name %>"<%= ',.gitmodules' if git_submodules[depls] && git_submodules[depls][name] %>]
    branch: ((paas-templates-branch))
    skip_ssl_verification: true

<% if boshrelease['cli_version'] == "v1" %>
- name: <%= name %>-deployment
  type: bosh-deployment
  source:
#    target: https://((bosh-target)):25555
    username: ((bosh-username))
    password: ((bosh-password))
    deployment: <%= name %>
<% else %>
- name: <%= name %>-deployment
  type: bosh-deployment-v2
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: ((bosh-password))
    deployment: <%= name %>
    ca_cert: <%= bosh_cert[depls]&.dump %>
<% end %>

<% if boshrelease['errands'] != nil && !boshrelease['errands'].empty? %>
- name: errand-<%= name %>
  type: bosh-errand
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: ((bosh-password))
    deployment: <%= name %>
    ca_cert: <%= bosh_cert[depls].dump %>
<% end %>

<% end %>

<% unless all_ci_deployments.empty? %>
- name: <%= all_ci_deployments[depls]['target_name'] %>
  type: concourse-pipeline
  source:
    target: ((concourse-<%= depls %>-target))
    insecure: ((concourse-<%= depls %>-insecure))
    teams:
    - name: main
      username: ((concourse-<%= depls %>-username))
      password: ((concourse-<%= depls %>-password))
    <% CiDeploymentOverview.teams(all_ci_deployments)&.each do |team| %>
    - name: <%= team %>
      username: ((concourse-<%= depls %>-username))
      password: ((concourse-<%= depls %>-password))
    <% end %>
<% end %>

<% unless all_ci_deployments.empty? && disabled_deployments.empty? %>
- name: secrets-full
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true

- name: paas-templates-full
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true

- name: paas-templates-wip
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true

<% end %>


<% uniq_releases= {} %>
<% enabled_deployments.sort.each do |name,boshrelease| %>
<% boshrelease['releases']&.each do |release, info|  %>
<% uniq_releases[release]= info %>
<% end %>
<% end %>

<% uniq_releases.sort.each do |release, info|  %>
- name: <%= release %>
  <% if !config['offline-mode'].nil? && config['offline-mode']['boshreleases'] %>
  type: s3
  source:
    bucket: ((s3-br-bucket))
    region_name: ((s3-br-region-name))
    regexp: <%= info['repository']&.split('/')&.first %>/<%= release %>-(.*).tgz
    access_key_id: ((s3-br-access-key-id))
    secret_access_key: ((s3-br-secret-key))
    endpoint: ((s3-br-endpoint))
    skip_ssl_verification: ((s3-br-skip-ssl-verification))
  <% else %>
  <% if info['base_location'].include?('bosh.io') %>
  type: bosh-io-release
  source:
    repository: <%= info['repository'] %>
  <% else %>
  type: github-release
  source:
    user: <%= info['repository'].split('/').first %>
    repository: <%= info['repository'].split('/').last %>
  <% end %>
  <% end %>
<% end %>


jobs:
<% jobs = Hash.new {|h,k| h[k]=[]} %>

<% unless disabled_deployments.empty? %>
- name: delete-deployments-review
  <% jobs['utils'] << 'delete-deployments-review' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: cf-ops-automation
        params: { submodules: none}
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
        trigger: true
      - get: paas-templates-full
        params: { submodules: none}
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
      - get: secrets-full
        trigger: true
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
        params: { submodules: none}
    <%  disabled_deployments&.sort&.each do |deployment_name, _| %>
    - task: <%= deployment_name %>_to_be_deleted
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: alpine}
        run:
          path: sh
          args:
            - -ce
            - |
              echo "${BOSH_DEPLOYMENT} deployment has been detected as 'inactive', ie :"
              echo "  - paas-template contains deployment descriptiors"
              echo "  - secrets does not enable this deployment"
              echo "This bosh deployment is going to be deleted when exists.
              echo "Otherwise deletion is run on an unknown deployment.
              echo "! Waiting for manual approval !"
      params:
        BOSH_DEPLOYMENT: <%= deployment_name %>
    <% end %>
- name: approve-and-delete-disabled-deployments
  <% jobs['utils'] << 'approve-and-delete-disabled-deployments' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: cf-ops-automation
        params: { submodules: none}
        passed: [delete-deployments-review]
      - get: secrets-full
        params: { submodules: none}
        passed: [delete-deployments-review]

    <%  disabled_deployments&.sort&.each do |deployment_name, _| %>
    - task: delete_<%= deployment_name %>
      input_mapping: {script-resource: cf-ops-automation, secrets: secrets-full}
      config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 4aff7d1fd0fa27ff9910a77b39cbcaedb4455f0c
          inputs:
            - name: script-resource
            - name: secrets
          outputs:
            - name: run-resource
          run:
            path: sh
            args:
              - -cex
              - |
                source ./script-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET}
                bosh -n delete-deployment
      params:
         BOSH_TARGET: ((bosh-target))
         BOSH_CLIENT: ((bosh-username))
         BOSH_CLIENT_SECRET: ((bosh-password))
         BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[depls] %>
         BOSH_DEPLOYMENT: <%= deployment_name %>
    <% end %>

<% end %>


- name: execute-deploy-script
  <% jobs['utils'] << 'execute-deploy-script' %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - get: at-noon
      trigger: true
    - aggregate:
      - get: secrets-<%= depls %>
        params: { submodules: none}
#        <!--<%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>-->
      - get: paas-template-<%= depls %>
        params: { submodules: none}
#        <!--<%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>-->
      - get: cf-ops-automation
        params: { submodules: none}
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>

    - task: run-deploy.sh
      input_mapping: {script-resource: cf-ops-automation, templates: paas-template-<%= depls %>, secrets: secrets-<%= depls %>}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: <%= depls %>/template
        COMMON_SCRIPT_DIR: script-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[depls] %>

- name: cloud-config-and-runtime-config-for-<%= depls %>
  <% jobs['utils'] << "cloud-config-and-runtime-config-for-#{depls}" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - get: secrets-full-writer
      params: { submodules: none}
    - get: secrets-<%=depls %>
      params: { submodules: none}
      trigger: true
#      <!--<%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>-->
    - get: paas-template-<%=depls %>
      params: { submodules: none}
      trigger: true
#      <!--<%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>-->
    - get: cf-ops-automation
      params: { submodules: none}
      trigger: true
      <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
    - task: generate-<%= depls %>-all-config
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%=depls %>, additional-resource: paas-template-<%=depls %>}
      output_mapping: {generated-files: config-manifest}
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= depls %>/
        YML_TEMPLATE_DIR: additional-resource/<%= depls %>/template
        YML_FILES: |
            ./credentials-resource/<%= depls %>/secrets/meta.yml
            ./credentials-resource/<%= depls %>/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
        CUSTOM_SCRIPT_DIR: additional-resource/<%= depls %>/template
        IAAS_TYPE: ((iaas-type))

    - aggregate:
      - task: update-cloud-config-for-<%= depls %>
        attempts: 2
        input_mapping: {script-resource: cf-ops-automation, secrets: secrets-<%= depls %>}
        file: cf-ops-automation/concourse/tasks/bosh_update_cloud_config.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: ((bosh-password))
           BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[depls] %>

        ensure:
          task: update-cloud-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: config-manifest}
          output_mapping: {updated-git-resource: updated-cloud-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%=depls %>/cloud-config.yml"
            NEW_FILE: "cloud-config.yml"
            COMMIT_MESSAGE: "<%=depls %> cloud-config auto update - [skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: {submodules: none}
            params:
              repository: updated-cloud-config
              rebase: true

      - task: update-runtime-config-for-<%= depls %>
        attempts: 2
        input_mapping: {script-resource: cf-ops-automation, secrets: secrets-<%= depls %>}
        file: cf-ops-automation/concourse/tasks/bosh_update_runtime_config.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: ((bosh-password))
           BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[depls] %>

        ensure:
          task: update-runtime-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: config-manifest}
          output_mapping: {updated-git-resource: updated-runtime-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "<%=depls %>/runtime-config.yml"
            NEW_FILE: "runtime-config.yml"
            COMMIT_MESSAGE: "<%=depls %> runtime-config auto update - [skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: {submodules: none}
            params:
              repository: updated-runtime-config
              rebase: true


<% enabled_deployments.sort.each do |name,boshrelease| %>

- name: deploy-<%= name %>
  <% jobs["deploy-#{name[0]}*"] << "deploy-#{name}" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: secrets-full-writer
        params: { submodules: none}
      - get: bosh-stemcell
        version: { path: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz }
        trigger: true
        attempts: 2
      - get: cf-ops-automation
        params: { submodules: none}
        <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>
        trigger: true
      <% boshrelease['releases']&.sort&.each do |release, info| %>
      - get: <%= release %>
        <% if !config['offline-mode'].nil? && config['offline-mode']['boshreleases'] %>
        version: { path: <%= info['repository']&.split('/')&.first %>/<%= release %>-((<%= release %>-version)).tgz }
        <% else %>
        <% if info['base_location'].include?('bosh.io') %>
        version: { version: ((<%= release %>-version)) }
        <% else %>
        version: { tag: v((<%= release %>-version)) }
        <% end %>
        <% end %>
        trigger: true
        attempts: 2
      <% end %>
      - get: secrets-<%= name %>
        params: { submodules: none}
        trigger: true
#        <!--<%= "passed: [update-pipeline-#{depls}-generated]" unless all_ci_deployments.empty? %>-->
      - get: paas-template-<%= name %>
        trigger: true
        <% current_git_submodule = git_submodules[depls][name] if git_submodules[depls] %>
        params: { submodules: <%= current_git_submodule || 'none' %>}
#        <!--<%= "passed: [update-pipeline-#{depls}-generated]" unless all_ci_deployments.empty? %>-->
    - task: generate-<%= name %>-manifest
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= name %>, additional-resource: paas-template-<%= name %>}
      output_mapping: {generated-files: release-manifest}
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/<%= depls %>/<%= name %>/
        YML_TEMPLATE_DIR: additional-resource/<%= depls %>/<%= name %>/template
        YML_FILES: |
            ./credentials-resource/<%= depls %>/<%= name %>/secrets/meta.yml
            ./credentials-resource/<%= depls %>/<%= name %>/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
        CUSTOM_SCRIPT_DIR: additional-resource/<%= depls %>/<%= name %>/template
        IAAS_TYPE: ((iaas-type))
    - task: execute-<%= name %>-spiff-pre-bosh-deploy
      input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-template-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: release-manifest}
      output_mapping: {generated-files: pre-bosh-deploy-resource}
      file: cf-ops-automation/concourse/tasks/spiff_pre_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/<%= depls %>/<%= name %>/template
        SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
    - task: copy-<%= name %>-required-files
      input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-template-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: pre-bosh-deploy-resource}
      output_mapping: {generated-files: final-release-manifest}
      file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/<%= depls %>/<%= name %>/template
        SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>
        MANIFEST_NAME: <%= name %>.yml
    <% if boshrelease['cli_version'] == 'v1' %>
    - task: convert-bosh-dns-to-bosh-target-v1
      output_mapping: {result-dir: bosh-generated-config}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: concourse/busyboxplus, tag: "git"}
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - |
            export DIRECTOR_IP_URL_WITHOUT_PORT=${BOSH_TARGET%%:25555}
            export DIRECTOR_IP=$(nslookup ${DIRECTOR_IP_URL_WITHOUT_PORT##https://} 2>/dev/null|tail -n2|grep Address|cut -d':' -f2)
            export DIRECTOR_IP_NO_SPACE=$(echo $DIRECTOR_IP |tr -d [:blank:])
            export BOSH_ENVIRONMENT="${DIRECTOR_IP_NO_SPACE}"
            echo "https://$BOSH_ENVIRONMENT:25555" > result-dir/bosh_target
        params:
          BOSH_TARGET: ((bosh-target))
    <% else %>
    - task: convert-bosh-dns-to-ip
      output_mapping: {result-dir: bosh-generated-config}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: concourse/busyboxplus, tag: "git"}
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - |
            export DIRECTOR_IP_URL_WITHOUT_PORT=${BOSH_TARGET%%:25555}
            export DIRECTOR_IP=$(nslookup ${DIRECTOR_IP_URL_WITHOUT_PORT##https://} 2>/dev/null|tail -n2|grep Address|cut -d':' -f2)
            export DIRECTOR_IP_NO_SPACE=$(echo $DIRECTOR_IP |tr -d [:blank:])
            export BOSH_ENVIRONMENT="${DIRECTOR_IP_NO_SPACE}"
            echo '{"target": "'"$BOSH_ENVIRONMENT"'"}' > result-dir/bosh_config.json
        params:
          BOSH_TARGET: ((bosh-target))
    - task: generate-empty-ops-and-vars-files
      # this task is required as long as all deployments still don't use ops/vars files
      output_mapping: {result-dir: ops-and-vars-files}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: concourse/busyboxplus, tag: "git"}
        inputs:
          - name: final-release-manifest
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - |
            mkdir -p result-dir/operators
            mkdir -p result-dir/vars
            find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
            find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
            echo '---' > result-dir/operators/0-empty-operators.yml
            echo '---' > result-dir/vars/0-empty-vars.yml
    <% end %>
    - put: <%= name %>-deployment
      attempts: 2
      params:
        manifest: final-release-manifest/<%= name %>.yml
#        source_file: bosh-generated-config/bosh_config.json
        <% if boshrelease['cli_version'] == 'v1' %>
        target_file: bosh-generated-config/bosh_target
        <% end %>
        stemcells:
          - bosh-stemcell/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz
        releases: <%= '[]' if boshrelease['releases']&.empty? %>
          <% boshrelease['releases']&.sort&.each do |release, info| %>
          <% if !config['offline-mode'].nil? && config['offline-mode']['boshreleases'] %>
          - <%= release %>/<%= release %>-((<%= release %>-version)).tgz
          <% else %>
          - <%= release %>/release.tgz
          <% end %>
          <% end %>
        <% unless boshrelease['cli_version'] == 'v1' %>
        ops_files:
          - ops-and-vars-files/operators/*
        vars_files:
          - ops-and-vars-files/vars/*
        <% end %>
        cleanup: true
    - task: execute-<%= name %>-post-bosh-deploy
      input_mapping: {scripts-resource: cf-ops-automation, template-resource: paas-template-<%= name %>, credentials-resource: secrets-<%= name %>, additional-resource: final-release-manifest}
      output_mapping: {generated-files: post-deploy-result}
      file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/<%= depls %>/<%= name %>/template
        SECRETS_DIR: credentials-resource/<%= depls %>/<%= name %>

    - task: update-<%= name %>-files
      input_mapping: {reference-resource: secrets-full-writer, generated-resource: <%= name %>-deployment}
      output_mapping: {updated-git-resource: updated-<%= name %>-secrets}
      file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: <%= depls %>/<%= name %>/<%= name %>.yml
        NEW_FILE: "manifest.yml"
        COMMIT_MESSAGE: "<%= name %> generated manifest auto update - [skip ci]"
    - put: secrets-full-writer
      get_params: {submodules: none}
      params:
        repository: updated-<%= name %>-secrets
        rebase: true

<% if boshrelease['errands'] != nil && !boshrelease['errands'].empty? %>
- name: run-errand-<%= name %>
  <% jobs["deploy-#{name[0]}*"] << "run-errand-#{name}" %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: secrets-<%= name %>
        params: { submodules: none}
        trigger: true
        passed: [deploy-<%= name %>]
      - get: paas-template-<%= name %>
        params: { submodules: none}
        trigger: true
        passed: [deploy-<%= name %>]
    <% boshrelease['errands'].each do |errand_name, errand_info| %>
    - put: errand-<%= name %>
      params:
        name: <%= errand_name %>
    <% end %>
<% end %>

<% end %>

<% unless enabled_deployments.empty? %>
- name: retrigger-all-jobs
  <% jobs['utils'] << 'retrigger-all-jobs' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: cf-ops-automation
        params: { submodules: none}
      - get: secrets-full
        params: { submodules: none}
    - task: generate-<%= depls %>-pipeline
      output_mapping: {result-dir: trigger-<%= depls %>-plan}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: concourse/busyboxplus, tag: "git"}
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - |
            <% enabled_deployments.sort.each do |name,_| %>
            echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-<%= name %>" >> result-dir/flight-plan
            <% end %>
        params:
          BUILD_PIPELINE_NAME: <%= depls %>-generated
    - task: fly-into-concourse
      input_mapping: {fly-cmd: trigger-<%= depls %>-plan}
      output_mapping: {flight-report: concourse-<%= depls %>-trigger-report}
      file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
      params:
        ATC_EXTERNAL_URL: ((concourse-<%= depls %>-target))
        FLY_USERNAME: ((concourse-<%= depls %>-username))
        FLY_PASSWORD:  ((concourse-<%= depls %>-password))
<% end %>

- name: recreate-all
<% jobs['recreate'] << 'recreate-all' %>
<% jobs['utils'] << 'recreate-all' %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  serial_groups: [recreate]
  plan:
    - aggregate:
       - get: secrets-<%= depls %>
         params: { submodules: none}
         <%= "passed: [update-pipeline-#{depls}-generated]" if  ! all_ci_deployments.empty? %>
       - get: paas-template-<%= depls %>
         params: { submodules: none}
         <%= "passed: [update-pipeline-#{depls}-generated]" if  ! all_ci_deployments.empty? %>
       - get: cf-ops-automation
         params: { submodules: none}
         <%= "passed: [update-pipeline-#{depls}-generated]" if ! all_ci_deployments.empty? %>

<% enabled_deployments.sort.each do |name,boshrelease| %>
- name: recreate-<%= name %>
  <% jobs['recreate'] << "recreate-#{name}" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  serial_groups: [recreate]
  plan:
    - aggregate:
       - get: secrets-<%= depls %>
         params: { submodules: none}
         passed: [recreate-all]
         trigger: true
       - get: paas-template-<%= depls %>
         params: { submodules: none}
         passed: [recreate-all]
         trigger: true
       - get: cf-ops-automation
         params: { submodules: none}
         passed: [recreate-all]

    - task: bosh-recreate-<%= name %>
      input_mapping: {script-resource: cf-ops-automation, secrets: secrets-<%= depls %>}
      config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: governmentpaas/bosh-cli-v2
              tag: 4aff7d1fd0fa27ff9910a77b39cbcaedb4455f0c
          inputs:
            - name: script-resource
            - name: secrets
          outputs:
            - name: run-resource
          run:
            path: sh
            args:
              - -e
              - -c
              - |
                source ./script-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET}
                bosh -n recreate
      params:
         BOSH_TARGET: ((bosh-target))
         BOSH_CLIENT: ((bosh-username))
         BOSH_CLIENT_SECRET: ((bosh-password))
         BOSH_CA_CERT: secrets/<%= PipelineGenerator::BOSH_CERT_LOCATIONS[depls] %>
         BOSH_DEPLOYMENT: <%= name %>
<% end %>
<% unless enabled_deployments.empty? %>
- name: init-concourse-boshrelease-and-stemcell-for-<%= depls %>
  <% jobs['utils'] << "init-concourse-boshrelease-and-stemcell-for-#{depls}" %>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - aggregate:
    - get: cf-ops-automation
      params: { submodules: none}
      attempts: 2
#      trigger: true
    - get: secrets-full
      params: { submodules: none}
      attempts: 2
#      trigger: true
  - task: generate-<%= depls %>-flight-plan
    output_mapping: {result-dir: init-<%= depls %>-plan}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: concourse/busyboxplus, tag: "git"}
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          <% uniq_releases.sort.each do |name,info| %>
          <% if !config['offline-mode'].nil? && config['offline-mode']['boshreleases'] %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/<%= name %> --from path:<%= info['repository']&.split('/')&.first %>/<%= name %>-((<%= name %>-version)).tgz" >> result-dir/flight-plan
          <% else %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/<%= name %> --from version:((<%= name %>-version))" >> result-dir/flight-plan
          <% end %>
          <% end %>
          echo "check-resource -r $BUILD_PIPELINE_NAME/bosh-stemcell --from path:((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz" >> result-dir/flight-plan

      params:
        BUILD_PIPELINE_NAME: <%= depls %>-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: init-<%= depls %>-plan}
    output_mapping: {flight-report: concourse-<%= depls %>-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-<%= depls %>-target))
      FLY_USERNAME: ((concourse-<%= depls %>-username))
      FLY_PASSWORD:  ((concourse-<%= depls %>-password))
<% end %>

<% if ! all_ci_deployments.empty? %>
<% current_depls_generated= all_ci_deployments[depls]["pipelines"]["#{depls}-generated"] || all_ci_deployments[depls]["pipelines"].to_a[0][1] %>
<% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][pipelines][#{depls}-generated]"  if current_depls_generated == nil %>
<% current_cf_apps_generated= all_ci_deployments[depls]["pipelines"]["#{depls}-cf-apps-generated"] || all_ci_deployments[depls]["pipelines"].to_a[1][1]%>
<% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][pipelines][#{depls}-cf-apps-generated]"  if current_cf_apps_generated == nil  %>



- name: update-pipeline-<%= depls %>-generated
  <% jobs['utils'] << "update-pipeline-#{depls}-generated" %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - aggregate:
    - get: secrets-full-writer
      params: { submodules: none}
    - get: paas-template-<%= depls %>
      params: { submodules: none}
      attempts: 2
    - get: paas-templates-wip
      params: { submodules: none}
      attempts: 2
      trigger: true
    - get: secrets-<%= depls %>
      params: { submodules: none}
      attempts: 2
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none}
      attempts: 2
      trigger: true
    - get: paas-templates-full
      params: { submodules: none}
      attempts: 2
    - get: secrets-full
      params: { submodules: none}
      attempts: 2

  - task: generate-<%= depls %>-pipeline
    input_mapping: {script-resource: cf-ops-automation,templates: paas-templates-wip,secrets: secrets-full}
    output_mapping: {result-dir: concourse-<%= depls %>-pipeline}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: ruby, tag: 2.3.1-slim}
      inputs:
        - name: script-resource
        - name: templates
        - name: secrets
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          cp -r templates/. result-dir
          cp -r script-resource/. result-dir
          cp -rf secrets/. result-dir
          cd result-dir/
          ./scripts/generate-depls.rb --depls ${ROOT_DEPLOYMENT} -t ../templates -p . -o concourse
      params:
        ROOT_DEPLOYMENT: <%= depls %>
  - put: <%= all_ci_deployments[depls]['target_name'] %>
    params:
      pipelines:
      <% all_ci_deployments[depls]['pipelines'].each do |pipeline_name,pipeline_details| %>
      - name: <%= pipeline_name %>
        team: <%= pipeline_details['team'] || 'main' %>
        config_file: concourse-<%= depls %>-pipeline/concourse/pipelines/<%= pipeline_name %>.yml
        vars_files:
          <% pipeline_details['vars_files'].each do |a_vars_file| %>
          # trick to manage <depls>-versions.yml (not included in secrets)
         <%= "- secrets-full/#{a_vars_file}" if ! a_vars_file.end_with?('-versions.yml') %>
         <%= "- paas-templates-wip/#{a_vars_file}" if a_vars_file.end_with?('-versions.yml') %>
          <% end %>
     <% end %>
  - task: update-concourse-depls-pipeline
    input_mapping: {reference-resource: secrets-full-writer, generated-resource: concourse-<%= depls %>-pipeline}
    output_mapping: {updated-git-resource: updated-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: <%= current_depls_generated['config_file'] %>
      NEW_FILE: "concourse/pipelines/<%= depls %>-generated.yml"
      COMMIT_MESSAGE: "<%= depls %> generated pipeline auto update - [skip ci]"
  - task: update-concourse-cf-apps-pipeline
    input_mapping: {reference-resource: updated-secrets, generated-resource: concourse-<%= depls %>-pipeline}
    output_mapping: {updated-git-resource: updated-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: <%= current_cf_apps_generated['config_file'] %>
      NEW_FILE: "concourse/pipelines/<%= depls %>-cf-apps-generated.yml"
      COMMIT_MESSAGE: "<%= depls %> cf-apps generated pipeline auto update - [skip ci]"
  - put: secrets-full-writer
    get_params: {submodules: none}
    params:
      repository: updated-secrets
      rebase: true
  - put: paas-templates-full
    get_params: {submodules: none}
    params:
      repository: paas-templates-wip
      force: true


<% if ! all_ci_deployments[depls][TERRAFORM_CONFIG_DIRNAME_KEY].nil? %>
<% raise "invalid ci-deployment-overview.yml. Missing key [#{depls}][#{TERRAFORM_CONFIG_DIRNAME_KEY}][state_file_path] or delete terraform-config key "  if terraform_config_path.nil? %>

- name: check-terraform-cf-consistency
  <% jobs['terraform'] << 'check-terraform-cf-consistency' %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - get: at-noon
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none}
      passed: [update-pipeline-<%= depls %>-generated]
      trigger: true
    - get: paas-template-<%=depls %>
      params: { submodules: none}
    - get: secrets-<%= depls %>
      passed: [update-pipeline-<%= depls %>-generated]
      params: { submodules: none}
    - task: generate-terraform-tfvars
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= depls %>, additional-resource: paas-template-<%=depls %>}
      output_mapping: {generated-files: terraform-tfvars}
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        YML_FILES: |
          ./credentials-resource/shared/secrets.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/secrets.yml
        YML_TEMPLATE_DIR: additional-resource/<%= terraform_config_path %>/template
        CUSTOM_SCRIPT_DIR: additional-resource/<%= terraform_config_path %>/template
        SUFFIX: -tpl.tfvars.yml
        IAAS_TYPE: ((iaas-type))
    - task: terraform-plan
      input_mapping: {secret-state-resource: secrets-<%= depls %>,spec-resource: paas-template-<%=depls %>}
      file: cf-ops-automation/concourse/tasks/terraform_plan_cloudfoundry.yml
      params:
        SPEC_PATH: "<%= terraform_config_path %>/spec"
        SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
        IAAS_SPEC_PATH: "<%= terraform_config_path %>/spec-((iaas-type))"

- name: cf-manual-approval
  <% jobs['terraform'] << 'cf-manual-approval' %>
  plan:
    - get: cf-ops-automation
      params: { submodules: none}
      passed: [check-terraform-cf-consistency]
    - get: paas-template-<%=depls %>
      params: { submodules: none}
      passed: [check-terraform-cf-consistency]
    - get: secrets-<%= depls %>
      params: { submodules: none}
      passed: [check-terraform-cf-consistency]

- name: enforce-terraform-cf-consistency
  <% jobs['terraform'] << 'enforce-terraform-cf-consistency' %>
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: secrets-full-writer
        params: { submodules: none}
      - get: cf-ops-automation
        params: { submodules: none}
        passed: [cf-manual-approval]
        trigger: true
      - get: paas-template-<%=depls %>
        params: { submodules: none}
        passed: [cf-manual-approval]
        trigger: true
      - get: secrets-<%= depls %>
        params: { submodules: none}
        passed: [cf-manual-approval]
        trigger: true
    - task: generate-terraform-tfvars
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-<%= depls %>, additional-resource: paas-template-<%=depls %>}
      output_mapping: {generated-files: terraform-tfvars}
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        YML_FILES: |
          ./credentials-resource/shared/secrets.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/meta.yml
          ./credentials-resource/<%= terraform_config_path %>/secrets/secrets.yml
        YML_TEMPLATE_DIR: additional-resource/<%= terraform_config_path %>/template
        CUSTOM_SCRIPT_DIR: additional-resource/<%= terraform_config_path %>/template
        SUFFIX: -tpl.tfvars.yml
        IAAS_TYPE: ((iaas-type))
    - task: terraform-apply
      input_mapping: {secret-state-resource: secrets-<%= depls %>,spec-resource: paas-template-<%=depls %>}
      output_mapping: {generated-files: terraform-cf}
      file: cf-ops-automation/concourse/tasks/terraform_apply_cloudfoundry.yml
      params:
        SPEC_PATH: "<%= terraform_config_path %>/spec"
        SECRET_STATE_FILE_PATH: "<%= terraform_config_path %>"
        IAAS_SPEC_PATH: "<%= terraform_config_path %>/spec-((iaas-type))"
      ensure:
        task: update-terraform-state-file
        input_mapping: {reference-resource: secrets-full-writer, generated-resource: terraform-cf}
        output_mapping: {updated-git-resource: updated-terraform-state-secrets}
        file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
        params:
          OLD_FILE: "<%= terraform_config_path %>/terraform.tfstate"
          NEW_FILE: "terraform.tfstate"
          COMMIT_MESSAGE: "Terraform TFState auto update"
        on_failure:
          put: failure-alert
          params:
            channel: ((slack-channel))
            text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
            icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
            username: Concourse
        on_success:
          put: secrets-full-writer
          get_params: {submodules: none}
          params:
            repository: updated-terraform-state-secrets
            rebase: true
<% end %>

<% end %>

groups:
- name: <%= depls.capitalize %>
  jobs:
  <% jobs.map {|k,jobs_list| jobs_list}.flatten.uniq.sort.each do |a_job| %>
    - <%= a_job %>
  <% end %>

<% jobs&.sort&.each do |group_name, jobs_list| %>
- name: <%= group_name.capitalize %>
  jobs:
   <% jobs_list&.sort&.each do |a_job| %>
    - <%= a_job %>
   <% end %>
<% end %>
