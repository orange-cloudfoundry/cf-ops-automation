<%
  require './lib/pipeline_helpers'

  enabled_deployments = all_dependencies.select do |_,deployment_infos|
    deployment_infos['status'] == 'enabled'
  end

  uniq_releases= {}
  all_dependencies.sort.each do |name,boshrelease|
    boshrelease["releases"]&.each do |release, info|
      uniq_releases[release] = info
    end

  end

  pipeline_options = PipelineHelpers::PipelineConfigurerOptions.new.with_config(config).with_root_deployment(depls).build
  configurer = PipelineHelpers::PipelineConfigurer.new(pipeline_options)

  enabled_parallel_execution_limit = configurer.parallel_execution_limit.overridden?
%>
---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: v1.4.2

  - name: cron-resource
    type: docker-image
    source:
      repository: cftoolsmiths/cron-resource
      # use latest as no other recent tag available

resources:
<% if enabled_deployments.any? %>
#- name: bosh-stemcell
#  type: bosh-io-stemcell
#  source:
#    name: ((stemcell-name))
  <% if uniq_releases.any? %>
- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

- name: new-version-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

#- name: secrets-complete
#  type: git
#  source:
#    uri: ((secrets-uri))
#    branch: master
#    skip_ssl_verification: true

- name: paas-templates-full
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true

- name: cf-ops-automation
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true

- name: monday-morning
  type: cron-resource
  source:
    expression: 30 8 * * 1
    location: "Europe/Paris"
    fire_immediately: true
  <% end %>
<% end %>

<% uniq_releases.sort.each do |release, info| %>
- name: <%= release %>
  <% if info["base_location"].include?("bosh.io") %>
  type: bosh-io-release
  source:
    repository: <%= info["repository"] %>
  <% else %>
  type: github-release
  source:
    user: <%= info["repository"].split('/').first %>
    repository: <%= info["repository"].split('/').last %>
    access_token: ((bot-github-access-token))
  <% end %>
<% end %>

jobs:
#      - get: bosh-stemcell
#        version: { version: ((stemcell-version)) }
#        trigger: true
#        attempts: 2
<% if enabled_deployments.empty? || uniq_releases.empty? %>
- name: this-is-an-empty-pipeline
<% else %>
  <% uniq_releases.sort.each do |release, info| %>
  <% current_serial_group = configurer.serial_group_strategy.generate(release, info) %>

- name: check-<%= release %>
  <%= "serial_groups: [#{current_serial_group}]" if enabled_parallel_execution_limit%>
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - aggregate:
      - get: monday-morning
        trigger: true
      - get: <%= release %>
        attempts: 2
        params: {tarball: false}
      - get: paas-templates-full
        params: { submodules: none}
      - get: cf-ops-automation
        params: { submodules: none}

    - task: generate-update-message
      input_mapping: {boshrelease: <%= release %>}
      output_mapping: {message: <%= release %>-message}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: governmentpaas/curl-ssl}
        inputs:
          - name: boshrelease
        outputs:
          - name: message
        run:
          path: sh
          args:
          - -exc
          - |
            MESSAGE_FILE=message/update_notif
            NEW_VERSION=$(cat boshrelease/version)
            RELEASE_URL=$(cat boshrelease/url|sed 's|/d/|/releases/|'|sed 's/?v=/?version=/')
            if [ "${NEW_VERSION}" != "${CURRENT_VERSION}" ]
            then
              echo "New version of <%= release %> detected: [${NEW_VERSION}](${RELEASE_URL})." >${MESSAGE_FILE}
              echo "<%= depls %> is using ${CURRENT_VERSION} of <%= release %>" >>${MESSAGE_FILE}
            else
              echo "<%= depls %> is  running the latest <%= release %> (ie [${NEW_VERSION}](${RELEASE_URL}))." >${MESSAGE_FILE}
            fi
      params:
        CURRENT_VERSION: ((<%= release %>-version))
    - put: new-version-alert
      params:
        channel: ((slack-channel))
        text_file: <%= release %>-message/update_notif
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
  <% end %>
<% end %>
