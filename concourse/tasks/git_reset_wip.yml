---
#
# Copyright (C) 2015-2017 Orange
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

platform: linux
image_resource:
  type: docker-image
  source: {repository: ((docker-registry-url))concourse/busyboxplus, tag: "git"}
inputs:
  - name: reference-resource
outputs:
  - name: updated-git-resource
run:
  path: sh
  args:
  - -ec
  - |
    set -o pipefail
    git config --global user.email "$GIT_USER_EMAIL"
    git config --global user.name "$GIT_USER_NAME"
    git config --global merge.renamelimit "$GIT_MERGE_RENAMELIMIT"

    FINAL_RELEASE_REPO=updated-git-resource

    if [ "$SKIP_SSL_VERIFICATION" = "true" ]; then
      export GIT_SSL_NO_VERIFY=true
      echo "Skipping ssl verification"
    fi

    cd reference-resource
    URI=$(git remote get-url origin)

    current_heads=$(git ls-remote -h "$URI" $GIT_BRANCH_FILTER | sed 's/refs\/heads\///' | awk '{print $2, $1}' | sort)
    cd ..
    echo "selected branches list with associated commit id:"
    DISPLAY_SEPARATOR="=================="
    echo ${DISPLAY_SEPARATOR}
    echo "${current_heads}"
    echo ${DISPLAY_SEPARATOR}
    git clone $URI ${FINAL_RELEASE_REPO}
    cd ${FINAL_RELEASE_REPO}
    git checkout -B ${GIT_CHECKOUT_BRANCH} -t origin/${GIT_CHECKOUT_BRANCH}

    git_br=$(echo $current_heads |awk '{ for (i=2;i<=NF;i+=2) $i=""; print}' )
    echo "WIP Reset Complete" > .git/reset_branches
    echo "" >> .git/reset_branches
    echo "Restored branches:" >> .git/reset_branches
    echo "${current_heads}" >> .git/reset_branches
    for i in $git_br; do
      echo ${DISPLAY_SEPARATOR}
      echo "Processing $i"
      git merge -m "Merge branch '$i' after WIP reset [skip ci]" origin/$i
    done

    git diff --name-only origin/${GIT_CHECKOUT_BRANCH} > .git/changed_files
    echo "Changed Files:"
    cat .git/changed_files
    echo "$(date +'%Y-%m-%d-%H-%M-%S')" | tee .git/.last-reset
    if [ -s .git/changed_files ]; then
      # add timestamp to force triggering
      touch .git/all_changed_dirs
      for aFile in $(cat .git/changed_files);do
        dirname ${aFile} >> .git/all_changed_dirs
      done
      cat .git/all_changed_dirs|sort |uniq > .git/changed_dirs
      echo "Changed detected in the following dirs:"
      cat .git/changed_dirs
      echo ${DISPLAY_SEPARATOR}

      for aDir in $(cat .git/changed_dirs); do
        if [ -d ${aDir} ]; then
          cp .git/.last-reset $aDir
        fi
      done
    else
      echo "WARNING: no change detected"
      cp .git/.last-reset .
    fi
    echo "Adding changes to git"
    git add .
    git commit --file .git/reset_branches
params:
    GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
    GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
    GIT_BRANCH_FILTER: WIP-* wip-* feature-* Feature-*
    GIT_CHECKOUT_BRANCH: develop
    SKIP_SSL_VERIFICATION:
    GIT_MERGE_RENAMELIMIT: 10000

