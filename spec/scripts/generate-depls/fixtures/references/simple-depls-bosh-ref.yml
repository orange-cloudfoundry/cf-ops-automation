---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: "((docker-registry-url))cfcommunity/slack-notification-resource"
      tag: v1.4.2
  - name: concourse-pipeline
    type: docker-image
    source:
      repository: "((docker-registry-url))concourse/concourse-pipeline-resource"
      tag: 3
  - name: bosh-deployment-v2
    type: docker-image
    source:
      repository: "((docker-registry-url))cloudfoundry/bosh-deployment-resource"
      tag: v2.12.0
  - name: bosh-errand
    type: docker-image
    source:
      repository: "((docker-registry-url))cfcommunity/bosh2-errand-resource"
      tag: v0.1.2
  - name: meta
    type: docker-image
    source:
      repository: "((docker-registry-url))swce/metadata-resource"
      tag: release-v0.0.3
resources:
  - name: concourse-meta
    type: meta
  - name: failure-alert
    type: slack-notification
    source:
      url: ((slack-webhook))
      proxy: ((slack-proxy))
      proxy_https_tunnel: ((slack-proxy-https-tunnel))
      disable: ((slack-disable))
  - name: secrets-simple-depls-limited
    type: git
    source:
      uri: ((secrets-uri))
      paths: ["private-config.yml", "simple-depls/ci-deployment-overview.yml", "simple-depls/secrets", "shared"]
      branch: ((secrets-branch))
      skip_ssl_verification: true
  - name: secrets-full-writer
    type: git
    source:
      uri: ((secrets-uri))
      branch: ((secrets-branch))
      skip_ssl_verification: true
  - name: paas-templates-simple-depls
    type: git
    source:
      uri: ((paas-templates-uri))
      paths: ["shared-config.yml", "simple-depls/template"]
      branch: pipeline-current-((paas-templates-branch))
      skip_ssl_verification: true
  - name: cf-ops-automation
    type: git
    source:
      uri: ((cf-ops-automation-uri))
      branch: ((cf-ops-automation-branch))
      tag_filter: ((cf-ops-automation-tag-filter))
      skip_ssl_verification: true
  - name: ((stemcell-main-name))
    type: s3
    source:
      bucket: ((s3-stemcell-bucket))
      region_name: ((s3-stemcell-region-name))
      regexp: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-(.*)-((stemcell-main-name)).tgz
      access_key_id: ((s3-stemcell-access-key-id))
      secret_access_key: ((s3-stemcell-secret-key))
      endpoint: ((s3-stemcell-endpoint))
      skip_ssl_verification: ((s3-stemcell-skip-ssl-verification))
    version:
      path: "((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz"
  - name: secrets-ntp-with-scan
    type: git
    source:
      uri: ((secrets-uri))
      paths: ["simple-depls/ntp-with-scan", "shared"]
      branch: ((secrets-branch))
      skip_ssl_verification: true
  - name: paas-templates-ntp-with-scan
    type: git
    source:
      uri: ((paas-templates-uri))
      paths: ["simple-depls/ntp-with-scan"]
      branch: pipeline-current-((paas-templates-branch))
      skip_ssl_verification: true
  - name: ntp-with-scan-deployment
    type: bosh-deployment-v2
    source:
      target: ((bosh-target))
      client: ((bosh-username))
      client_secret: "((bosh-password))"
      deployment: ntp-with-scan
      ca_cert: "-----BEGIN CERTIFICATE-----\nMIIDXDCCAkSgAwIBAgIBATANBgkqhkiG9w0BAQsFADA/MRMwEQYKCZImiZPyLGQB\nGRYDY29tMRYwFAYKCZImiZPyLGQBGRYGb3JhbmdlMRAwDgYDVQQDDAdUZXN0IENB\nMB4XDTE4MDUwODE0MzcwN1oXDTIwMDUwNzE0MzcwN1owPzETMBEGCgmSJomT8ixk\nARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBm9yYW5nZTEQMA4GA1UEAwwHVGVzdCBD\nQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALBLNz1HSlkLUMk6PsYU\nRjPhYi4f1hlDhl1nx/uuObqaePY8neGF8XGUhzc4mnV3DRik4Ufi99t5Ib2xKdv2\nrbl3dSrSfkOTUngAGlKb5WHy2t36gcH6XhY96qAKzeuvWvXPkik6RKmIUh6HuHF0\n47ApkVpauCKWhJibTjsJ1CSEf4lGrBJG9EyEz0fAvsWwySWgDhWbG90WNUPAwChB\n8t3h7WHNXTcriMPth4FIjCgEEde9Xa6r6pCrDFQfLBwy8fJK0cMDjWrGgo8VPHre\n1eXhiSCHowZG7WEM6ikjqeck00cvskzKWNnvgXK5K4wATjynsNJnpd+88cOt7efb\nEQECAwEAAaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD\nVR0OBBYEFAdQsPXMlmEL7xVLP7E+cESV9qYTMB8GA1UdIwQYMBaAFAdQsPXMlmEL\n7xVLP7E+cESV9qYTMA0GCSqGSIb3DQEBCwUAA4IBAQAQWsP6GjMQhWWohODsNbuq\nG3lxTAIX04kNqXduUL1reO7BbzkBqJP9zbIjfOJra7wNyBHRTP4s2AX/ccvgvUp9\n7OqidvwtDszCBzK1an+0i0F5fn4g8WpRFhWq2OeT65PM058RhjpfvVvYYRGM3a7Z\ni1cJQPgqju6WY5esFEQHyQwR+XpL20h38IkurhQ//HzNUboZjoefCfI1bvDFbPY7\nX0YYYuNm3QGmtI2nei8X0rnnM+nE0G/6nMmFT8p9OkYLxA1FiIuGYajaHLhzgkvM\ntdn1DdO4SqwyR+lVlyUC3c4dPzLUpqpXgLSjgl5PiYD8il+PgAoBwM9mwoda5rC2\n-----END CERTIFICATE-----\n"
  - name: paas-templates-zookeeper-without-scan
    type: git
    source:
      uri: "((paas-templates-uri))"
      paths: ["simple-depls/zookeeper-without-scan"]
      branch: pipeline-current-((paas-templates-branch))
      skip_ssl_verification: true

  - name: zookeeper-without-scan-deployment
    type: bosh-deployment-v2
    source:
      target: ((bosh-target))
      client: ((bosh-username))
      client_secret: "((bosh-password))"
      deployment: zookeeper-without-scan
      ca_cert: "-----BEGIN CERTIFICATE-----\nMIIDXDCCAkSgAwIBAgIBATANBgkqhkiG9w0BAQsFADA/MRMwEQYKCZImiZPyLGQB\nGRYDY29tMRYwFAYKCZImiZPyLGQBGRYGb3JhbmdlMRAwDgYDVQQDDAdUZXN0IENB\nMB4XDTE4MDUwODE0MzcwN1oXDTIwMDUwNzE0MzcwN1owPzETMBEGCgmSJomT8ixk\nARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBm9yYW5nZTEQMA4GA1UEAwwHVGVzdCBD\nQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALBLNz1HSlkLUMk6PsYU\nRjPhYi4f1hlDhl1nx/uuObqaePY8neGF8XGUhzc4mnV3DRik4Ufi99t5Ib2xKdv2\nrbl3dSrSfkOTUngAGlKb5WHy2t36gcH6XhY96qAKzeuvWvXPkik6RKmIUh6HuHF0\n47ApkVpauCKWhJibTjsJ1CSEf4lGrBJG9EyEz0fAvsWwySWgDhWbG90WNUPAwChB\n8t3h7WHNXTcriMPth4FIjCgEEde9Xa6r6pCrDFQfLBwy8fJK0cMDjWrGgo8VPHre\n1eXhiSCHowZG7WEM6ikjqeck00cvskzKWNnvgXK5K4wATjynsNJnpd+88cOt7efb\nEQECAwEAAaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD\nVR0OBBYEFAdQsPXMlmEL7xVLP7E+cESV9qYTMB8GA1UdIwQYMBaAFAdQsPXMlmEL\n7xVLP7E+cESV9qYTMA0GCSqGSIb3DQEBCwUAA4IBAQAQWsP6GjMQhWWohODsNbuq\nG3lxTAIX04kNqXduUL1reO7BbzkBqJP9zbIjfOJra7wNyBHRTP4s2AX/ccvgvUp9\n7OqidvwtDszCBzK1an+0i0F5fn4g8WpRFhWq2OeT65PM058RhjpfvVvYYRGM3a7Z\ni1cJQPgqju6WY5esFEQHyQwR+XpL20h38IkurhQ//HzNUboZjoefCfI1bvDFbPY7\nX0YYYuNm3QGmtI2nei8X0rnnM+nE0G/6nMmFT8p9OkYLxA1FiIuGYajaHLhzgkvM\ntdn1DdO4SqwyR+lVlyUC3c4dPzLUpqpXgLSjgl5PiYD8il+PgAoBwM9mwoda5rC2\n-----END CERTIFICATE-----\n"

  - name: secrets-simple-depls-trigger
    type: git
    source:
      uri: ((secrets-uri))
      paths: ["private-config.yml", "simple-depls", "shared"]
      branch: ((secrets-branch))
      skip_ssl_verification: true
  - name: paas-templates-simple-depls-versions
    type: git
    source:
      uri: ((paas-templates-uri))
      paths: ["simple-depls/simple-depls-versions.yml"]
      branch: pipeline-current-((paas-templates-branch))
      skip_ssl_verification: true
  - name: ntp_boshrelease
    type: bosh-io-release
    source:
      repository: cloudfoundry-community/ntp-release
  - name: zookeeper_boshrelease
    type: bosh-io-release
    source:
      repository: cppforlife/zookeeper-release

jobs:
  - name: cancel-all-bosh-tasks
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - aggregate:
          - get: cf-ops-automation
            params: { submodules: none }
          - get : secrets-simple-depls-limited
            params: { submodules: none }
      - task: cancel-all-bosh-tasks
        input_mapping: { scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited }
        file:  cf-ops-automation/concourse/tasks/bosh_cancel_all_tasks/task.yml
        params:
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: ((bosh-password))
          BOSH_TARGET: ((bosh-target))
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
  - name: execute-deploy-script
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - aggregate:
          - get: secrets-simple-depls-limited
            params: { submodules: none}
            trigger: true
          - get: paas-templates-simple-depls
            params: { submodules: none}
            trigger: true
          - get: cf-ops-automation
            params: { submodules: none}
      - task: run-deploy.sh
        input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-simple-depls, secrets: secrets-simple-depls-limited}
        file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
        params:
          CURRENT_DEPLS: simple-depls/template
          COMMON_SCRIPT_DIR: scripts-resource/scripts
          SECRETS_DIR: secrets
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
  - name: cloud-config-and-runtime-config-for-simple-depls
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - get: concourse-meta
      - get: secrets-full-writer
        params: { submodules: none}
      - get: secrets-simple-depls-limited
        params: { submodules: none}
        trigger: true
      - get: paas-templates-simple-depls
        params: { submodules: none}
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none}
        trigger: true
      - task: generate-simple-depls-all-config
        input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-simple-depls-limited, additional-resource: paas-templates-simple-depls}
        output_mapping: {generated-files: config-manifest}
        file: cf-ops-automation/concourse/tasks/generate-manifest.yml
        params:
          SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/
          YML_TEMPLATE_DIR: additional-resource/simple-depls/template
          YML_FILES: |
            ./credentials-resource/simple-depls/secrets/meta.yml
            ./credentials-resource/simple-depls/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
          CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/template
          IAAS_TYPE: ((iaas-type))
      - aggregate:
          - task: update-cloud-config-for-simple-depls
            attempts: 2
            input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
            output_mapping: {deployed-config: deployed-cloud-config}
            file: cf-ops-automation/concourse/tasks/bosh_update_cloud_config.yml
            params:
              BOSH_TARGET: ((bosh-target))
              BOSH_CLIENT: ((bosh-username))
              BOSH_CLIENT_SECRET: "((bosh-password))"
              BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
            ensure:
              task: update-cloud-config
              input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cloud-config}
              output_mapping: {updated-git-resource: updated-cloud-config}
              file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
              params:
                OLD_FILE: "simple-depls/cloud-config.yml"
                NEW_FILE: "cloud-config.yml"
                COMMIT_MESSAGE: "simple-depls cloud-config auto update - [skip ci]"
              on_failure:
                put: failure-alert
                params:
                  channel: ((slack-channel))
                  text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
                  icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
                  username: Concourse
              on_success:
                put: secrets-full-writer
                get_params: {submodules: none}
                params:
                  repository: updated-cloud-config
                  rebase: true
          - task: update-runtime-config-for-simple-depls
            attempts: 2
            input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
            output_mapping: {deployed-config: deployed-runtime-config}
            file: cf-ops-automation/concourse/tasks/bosh_update_runtime_config.yml
            params:
              BOSH_TARGET: ((bosh-target))
              BOSH_CLIENT: ((bosh-username))
              BOSH_CLIENT_SECRET: "((bosh-password))"
              BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
            ensure:
              task: update-runtime-config
              input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-runtime-config}
              output_mapping: {updated-git-resource: updated-runtime-config}
              file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
              params:
                OLD_FILE: "simple-depls/runtime-config.yml"
                NEW_FILE: "runtime-config.yml"
                COMMIT_MESSAGE: "simple-depls runtime-config auto update - [skip ci]"
              on_failure:
                put: failure-alert
                params:
                  channel: ((slack-channel))
                  text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
                  icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
                  username: Concourse
              on_success:
                put: secrets-full-writer
                get_params: {submodules: none}
                params:
                  repository: updated-runtime-config
                  rebase: true
  - name: deploy-ntp-with-scan
    serial: true
    serial_groups: [concurrent-group-0]
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - aggregate:
          - get: concourse-meta
          - get: secrets-full-writer
            params: { submodules: none}
          - get: ((stemcell-main-name))
            trigger: true
            attempts: 2
          - get: cf-ops-automation
            params: { submodules: none}
            trigger: true
          - get: ntp_boshrelease
            version: { version: "((ntp_boshrelease-version))" }
            trigger: true
            attempts: 2
          - get: secrets-ntp-with-scan
            params: { submodules: none}
            trigger: true
          - get: paas-templates-ntp-with-scan
            trigger: true
            params:
              submodules: none
      - task: generate-ntp-with-scan-manifest
        input_mapping:
          scripts-resource: cf-ops-automation
          credentials-resource: secrets-ntp-with-scan
          additional-resource: paas-templates-ntp-with-scan
        output_mapping: {generated-files: release-manifest}
        file: cf-ops-automation/concourse/tasks/generate-manifest.yml
        params:
          SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/ntp-with-scan/
          YML_TEMPLATE_DIR: additional-resource/simple-depls/ntp-with-scan/template
          YML_FILES: |
            ./credentials-resource/simple-depls/ntp-with-scan/secrets/meta.yml
            ./credentials-resource/simple-depls/ntp-with-scan/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
          CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/ntp-with-scan/template
          IAAS_TYPE: ((iaas-type))
      - task: execute-ntp-with-scan-spiff-pre-bosh-deploy
        input_mapping:
          scripts-resource: cf-ops-automation
          template-resource: paas-templates-ntp-with-scan
          credentials-resource: secrets-ntp-with-scan
          additional-resource: release-manifest
        output_mapping: {generated-files: pre-bosh-deploy-resource}
        file: cf-ops-automation/concourse/tasks/spiff_pre_bosh_deploy.yml
        params:
          CUSTOM_SCRIPT_DIR: template-resource/simple-depls/ntp-with-scan/template
          SECRETS_DIR: credentials-resource/simple-depls/ntp-with-scan
      - task: copy-ntp-with-scan-required-files
        input_mapping:
          scripts-resource: cf-ops-automation
          template-resource: paas-templates-ntp-with-scan
          credentials-resource: secrets-ntp-with-scan
          additional-resource: pre-bosh-deploy-resource
        output_mapping: {generated-files: final-release-manifest}
        file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
        params:
          CUSTOM_SCRIPT_DIR: template-resource/simple-depls/ntp-with-scan/template
          SECRETS_DIR: credentials-resource/simple-depls/ntp-with-scan
          MANIFEST_NAME: ntp-with-scan.yml
      - task: convert-bosh-dns-to-ip
        output_mapping: {result-dir: bosh-generated-config}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: { repository: "((docker-registry-url))concourse/busyboxplus", tag: "git"}
          outputs:
            - name: result-dir
          run:
            path: sh
            args:
              - -exc
              - |
                export DIRECTOR_IP_URL_WITHOUT_PORT=${BOSH_TARGET%%:25555}
                export DIRECTOR_IP=$(nslookup ${DIRECTOR_IP_URL_WITHOUT_PORT##https://} 2>/dev/null|tail -n2|grep Address|cut -d':' -f2)
                export DIRECTOR_IP_NO_SPACE=$(echo $DIRECTOR_IP |tr -d [:blank:])
                export BOSH_ENVIRONMENT="${DIRECTOR_IP_NO_SPACE}"
                echo '{"target": "'"$BOSH_ENVIRONMENT"'"}' > result-dir/bosh_config.json
          params:
            BOSH_TARGET: ((bosh-target))
      - task: generate-empty-ops-and-vars-files
        # this task is required as long as all deployments still don't use ops/vars files
        output_mapping: {result-dir: ops-and-vars-files}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: { repository: "((docker-registry-url))concourse/busyboxplus", tag: "git"}
          inputs:
            - name: final-release-manifest
          outputs:
            - name: result-dir
          run:
            path: sh
            args:
              - -exc
              - |
                mkdir -p result-dir/operators
                mkdir -p result-dir/vars
                find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
                find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
                echo '---' > result-dir/operators/0-empty-operators.yml
                echo '---' > result-dir/vars/0-empty-vars.yml
      - task: display-ntp-with-scan-manifest
        input_mapping:
          bosh-inputs: ops-and-vars-files
          manifest-dir: final-release-manifest
          secrets: secrets-ntp-with-scan
          scripts-resource: cf-ops-automation
        output_mapping: { result-dir: interpolated-manifest }
        file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
        params:
          VARS_FILES_SUFFIX: "*/*vars.yml"
          OPS_FILES_SUFFIX:  "*/*operators.yml"
          BOSH_YAML_FILE: ntp-with-scan.yml
      - put: ntp-with-scan-deployment
        attempts: 2
        on_failure:
          do:
            - task: update-ntp-with-scan-files
              input_mapping: {reference-resource: secrets-full-writer, generated-resource: interpolated-manifest}
              output_mapping: {updated-git-resource: failed-ntp-with-scan-secrets}
              file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
              params:
                OLD_FILE: simple-depls/ntp-with-scan/ntp-with-scan-last-deployment-failure.yml
                NEW_FILE: "interpolated-ntp-with-scan.yml"
                COMMIT_MESSAGE: "Failed to deploy ntp-with-scan manifest - [skip ci]"
            - put: secrets-full-writer
              get_params: {submodules: none}
              params:
                repository: failed-ntp-with-scan-secrets
                rebase: true
        params:
          manifest: final-release-manifest/ntp-with-scan.yml
          # source_file: bosh-generated-config/bosh_config.json
          stemcells:
            - ((stemcell-main-name))/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz
          releases:
            - "ntp_boshrelease/*.tgz"
          ops_files:
            - ops-and-vars-files/operators/*
          vars_files:
            - ops-and-vars-files/vars/*
          cleanup: true
      - task: bosh-variables
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-full-writer}
        output_mapping: {result-dir: bosh-variables-result}
        file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
        params:
          BOSH_DEPLOYMENT: ntp-with-scan
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
      - task: update-ntp-with-scan-fingerprints-file
        input_mapping: {reference-resource: secrets-full-writer, generated-resource: bosh-variables-result}
        output_mapping: {updated-git-resource: updated-ntp-with-scan-fingerprints-secrets}
        file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
        params:
          OLD_FILE: simple-depls/ntp-with-scan/ntp-with-scan-fingerprints.json
          NEW_FILE: "credential_fingerprints.json"
          COMMIT_MESSAGE: "ntp-with-scan variable fingerprints auto update - [skip ci]"
      - task: update-ntp-with-scan-files
        input_mapping: {reference-resource: updated-ntp-with-scan-fingerprints-secrets, generated-resource: ntp-with-scan-deployment}
        output_mapping: {updated-git-resource: updated-ntp-with-scan-secrets}
        file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
        params:
          OLD_FILE: simple-depls/ntp-with-scan/ntp-with-scan.yml
          NEW_FILE: "manifest.yml"
          COMMIT_MESSAGE: "ntp-with-scan generated manifest auto update - [skip ci]"
      - put: secrets-full-writer
        get_params: {submodules: none}
        params:
          repository: updated-ntp-with-scan-secrets
          rebase: true
      - task: execute-ntp-with-scan-post-bosh-deploy
        input_mapping:
          scripts-resource: cf-ops-automation
          template-resource: paas-templates-ntp-with-scan
          credentials-resource: secrets-ntp-with-scan
          additional-resource: final-release-manifest
        output_mapping: {generated-files: post-deploy-result}
        file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
        params:
          CUSTOM_SCRIPT_DIR: template-resource/simple-depls/ntp-with-scan/template
          SECRETS_DIR: credentials-resource/simple-depls/ntp-with-scan

  - name: deploy-zookeeper-without-scan
    serial: true
    serial_groups:
    - concurrent-group-1
    on_failure:
      put: failure-alert
      params:
        channel: "((slack-channel))"
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
    - aggregate:
      - get: concourse-meta
      - get: secrets-full-writer
        params:
          submodules: none
      - get: "((stemcell-main-name))"
        trigger: true
        attempts: 2
      - get: cf-ops-automation
        params:
          submodules: none
        trigger: true
      - get: zookeeper_boshrelease
        version:
          version: "((zookeeper_boshrelease-version))"
        trigger: true
        attempts: 2
      - get: paas-templates-zookeeper-without-scan
        trigger: true
        params:
          submodules: none
    - task: generate-zookeeper-without-scan-manifest
      input_mapping:
        scripts-resource: cf-ops-automation
        credentials-resource: secrets-full-writer
        additional-resource: paas-templates-zookeeper-without-scan
      output_mapping:
        generated-files: release-manifest
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/zookeeper-without-scan/
        YML_TEMPLATE_DIR: additional-resource/simple-depls/zookeeper-without-scan/template
        YML_FILES: |
          ./credentials-resource/simple-depls/zookeeper-without-scan/secrets/meta.yml
          ./credentials-resource/simple-depls/zookeeper-without-scan/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
        CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/zookeeper-without-scan/template
        IAAS_TYPE: "((iaas-type))"
    - task: execute-zookeeper-without-scan-spiff-pre-bosh-deploy
      input_mapping:
        scripts-resource: cf-ops-automation
        template-resource: paas-templates-zookeeper-without-scan
        credentials-resource: secrets-full-writer
        additional-resource: release-manifest
      output_mapping:
        generated-files: pre-bosh-deploy-resource
      file: cf-ops-automation/concourse/tasks/spiff_pre_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/simple-depls/zookeeper-without-scan/template
        SECRETS_DIR: credentials-resource/simple-depls/zookeeper-without-scan
    - task: copy-zookeeper-without-scan-required-files
      input_mapping:
        scripts-resource: cf-ops-automation
        template-resource: paas-templates-zookeeper-without-scan
        credentials-resource: secrets-full-writer
        additional-resource: pre-bosh-deploy-resource
      output_mapping:
        generated-files: final-release-manifest
      file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/simple-depls/zookeeper-without-scan/template
        SECRETS_DIR: credentials-resource/simple-depls/zookeeper-without-scan
        MANIFEST_NAME: zookeeper-without-scan.yml
    - task: convert-bosh-dns-to-ip
      output_mapping:
        result-dir: bosh-generated-config
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: "((docker-registry-url))concourse/busyboxplus"
            tag: git
        outputs:
        - name: result-dir
        run:
          path: sh
          args:
          - "-exc"
          - |
            export DIRECTOR_IP_URL_WITHOUT_PORT=${BOSH_TARGET%%:25555}
            export DIRECTOR_IP=$(nslookup ${DIRECTOR_IP_URL_WITHOUT_PORT##https://} 2>/dev/null|tail -n2|grep Address|cut -d':' -f2)
            export DIRECTOR_IP_NO_SPACE=$(echo $DIRECTOR_IP |tr -d [:blank:])
            export BOSH_ENVIRONMENT="${DIRECTOR_IP_NO_SPACE}"
            echo '{"target": "'"$BOSH_ENVIRONMENT"'"}' > result-dir/bosh_config.json
        params:
          BOSH_TARGET: "((bosh-target))"
    - task: generate-empty-ops-and-vars-files
      output_mapping:
        result-dir: ops-and-vars-files
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: "((docker-registry-url))concourse/busyboxplus"
            tag: git
        inputs:
        - name: final-release-manifest
        outputs:
        - name: result-dir
        run:
          path: sh
          args:
          - "-exc"
          - |
            mkdir -p result-dir/operators
            mkdir -p result-dir/vars
            find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
            find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
            echo '---' > result-dir/operators/0-empty-operators.yml
            echo '---' > result-dir/vars/0-empty-vars.yml
    - task: display-zookeeper-without-scan-manifest
      input_mapping:
        bosh-inputs: ops-and-vars-files
        manifest-dir: final-release-manifest
        secrets: secrets-full-writer
        scripts-resource: cf-ops-automation
      output_mapping:
        result-dir: interpolated-manifest
      file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
      params:
        VARS_FILES_SUFFIX: "*/*vars.yml"
        OPS_FILES_SUFFIX: "*/*operators.yml"
        BOSH_YAML_FILE: zookeeper-without-scan.yml
    - put: zookeeper-without-scan-deployment
      attempts: 2
      on_failure:
        do:
        - task: update-zookeeper-without-scan-files
          input_mapping:
            reference-resource: secrets-full-writer
            generated-resource: interpolated-manifest
          output_mapping:
            updated-git-resource: failed-zookeeper-without-scan-secrets
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: simple-depls/zookeeper-without-scan/zookeeper-without-scan-last-deployment-failure.yml
            NEW_FILE: interpolated-zookeeper-without-scan.yml
            COMMIT_MESSAGE: Failed to deploy zookeeper-without-scan manifest - [skip
              ci]
        - put: secrets-full-writer
          get_params:
            submodules: none
          params:
            repository: failed-zookeeper-without-scan-secrets
            rebase: true
      params:
        manifest: final-release-manifest/zookeeper-without-scan.yml
        stemcells:
        - "((stemcell-main-name))/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz"
        releases:
        - zookeeper_boshrelease/*.tgz
        ops_files:
        - ops-and-vars-files/operators/*
        vars_files:
        - ops-and-vars-files/vars/*
        cleanup: true
    - task: bosh-variables
      input_mapping:
        scripts-resource: cf-ops-automation
        secrets: secrets-full-writer
      output_mapping:
        result-dir: bosh-variables-result
      file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
      params:
        BOSH_DEPLOYMENT: zookeeper-without-scan
        BOSH_TARGET: "((bosh-target))"
        BOSH_CLIENT: "((bosh-username))"
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
    - task: update-zookeeper-without-scan-fingerprints-file
      input_mapping:
        reference-resource: secrets-full-writer
        generated-resource: bosh-variables-result
      output_mapping:
        updated-git-resource: updated-zookeeper-without-scan-fingerprints-secrets
      file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: simple-depls/zookeeper-without-scan/zookeeper-without-scan-fingerprints.json
        NEW_FILE: credential_fingerprints.json
        COMMIT_MESSAGE: zookeeper-without-scan variable fingerprints auto update - [skip
          ci]
    - task: update-zookeeper-without-scan-files
      input_mapping:
        reference-resource: updated-zookeeper-without-scan-fingerprints-secrets
        generated-resource: zookeeper-without-scan-deployment
      output_mapping:
        updated-git-resource: updated-zookeeper-without-scan-secrets
      file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: simple-depls/zookeeper-without-scan/zookeeper-without-scan.yml
        NEW_FILE: manifest.yml
        COMMIT_MESSAGE: zookeeper-without-scan generated manifest auto update - [skip
          ci]
    - put: secrets-full-writer
      get_params:
        submodules: none
      params:
        repository: updated-zookeeper-without-scan-secrets
        rebase: true
    - task: execute-zookeeper-without-scan-post-bosh-deploy
      input_mapping:
        scripts-resource: cf-ops-automation
        template-resource: paas-templates-zookeeper-without-scan
        credentials-resource: secrets-full-writer
        additional-resource: final-release-manifest
      output_mapping:
        generated-files: post-deploy-result
      file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
      params:
        CUSTOM_SCRIPT_DIR: template-resource/simple-depls/zookeeper-without-scan/template
        SECRETS_DIR: credentials-resource/simple-depls/zookeeper-without-scan
  

  - name: retrigger-all-jobs
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - aggregate:
          - get: cf-ops-automation
            params: { submodules: none}
          - get: secrets-simple-depls-trigger
            params: { submodules: none}
      - task: generate-simple-depls-pipeline
        output_mapping: {result-dir: trigger-simple-depls-plan}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: { repository: "((docker-registry-url))concourse/busyboxplus", tag: "git"}
          outputs:
            - name: result-dir
          run:
            path: sh
            args:
              - -exc
              - |
                echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-ntp-with-scan" >> result-dir/flight-plan
                echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-zookeeper-without-scan" >> result-dir/flight-plan
          params:
            BUILD_PIPELINE_NAME: simple-depls-bosh-generated
      - task: fly-into-concourse
        input_mapping: {fly-cmd: trigger-simple-depls-plan}
        output_mapping: {flight-report: concourse-simple-depls-trigger-report}
        file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
        params:
          ATC_EXTERNAL_URL: ((concourse-simple-depls-target))
          FLY_USERNAME: ((concourse-simple-depls-username))
          FLY_PASSWORD: "((concourse-simple-depls-password))"
  - name: recreate-all
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    serial_groups: [recreate]
    plan:
      - aggregate:
          - get: secrets-simple-depls-limited
            params: { submodules: none}
          - get: paas-templates-simple-depls
            params: { submodules: none}
          - get: cf-ops-automation
            params: { submodules: none}
  - name: recreate-ntp-with-scan
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    serial_groups: [recreate]
    plan:
      - aggregate:
          - get: secrets-simple-depls-limited
            params: { submodules: none}
            passed: [recreate-all]
            trigger: true
          - get: paas-templates-simple-depls
            params: { submodules: none}
            passed: [recreate-all]
            trigger: true
          - get: cf-ops-automation
            params: { submodules: none}
            passed: [recreate-all]
      - task: bosh-recreate-ntp-with-scan
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: "((docker-registry-url))governmentpaas/bosh-cli-v2"
              tag: c88f3e0b03558c987693fad3f180d9052b77342c
          inputs:
            - name: scripts-resource
            - name: secrets
          outputs:
            - name: run-resource
          run:
            path: bash
            args:
              - -e
              - -c
              - |
                source ./scripts-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET}
                bosh -n recreate --fix
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          BOSH_DEPLOYMENT: ntp-with-scan
  - name: recreate-zookeeper-without-scan
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    serial_groups: [recreate]
    plan:
      - aggregate:
          - get: secrets-simple-depls-limited
            params: { submodules: none}
            passed: [recreate-all]
            trigger: true
          - get: paas-templates-simple-depls
            params: { submodules: none}
            passed: [recreate-all]
            trigger: true
          - get: cf-ops-automation
            params: { submodules: none}
            passed: [recreate-all]
      - task: bosh-recreate-zookeeper-without-scan
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: "((docker-registry-url))governmentpaas/bosh-cli-v2"
              tag: c88f3e0b03558c987693fad3f180d9052b77342c
          inputs:
            - name: scripts-resource
            - name: secrets
          outputs:
            - name: run-resource
          run:
            path: bash
            args:
              - -e
              - -c
              - |
                source ./scripts-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET}
                bosh -n recreate --fix
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          BOSH_DEPLOYMENT: zookeeper-without-scan

  - name: init-concourse-boshrelease-and-stemcell-for-simple-depls
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - aggregate:
          - get: cf-ops-automation
            params: { submodules: none}
            attempts: 2
          #      trigger: true
          - get: secrets-simple-depls-trigger
            params: { submodules: none}
            attempts: 2
          - get: paas-templates-simple-depls-versions
            params: { submodules: none}
            attempts: 2
            trigger: true
      - task: generate-simple-depls-flight-plan
        output_mapping: {result-dir: init-simple-depls-plan}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: { repository: "((docker-registry-url))concourse/busyboxplus", tag: "git"}
          outputs:
            - name: result-dir
          run:
            path: sh
            args:
              - -ec
              - |
                echo "check-resource -r $BUILD_PIPELINE_NAME/ntp_boshrelease --from version:((ntp_boshrelease-version))" | tee -a result-dir/flight-plan
                echo "check-resource -r $BUILD_PIPELINE_NAME/zookeeper_boshrelease --from version:((zookeeper_boshrelease-version))" | tee -a result-dir/flight-plan
                echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from path:((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell-version))-((stemcell-main-name)).tgz" | tee -a result-dir/flight-plan
          params:
            BUILD_PIPELINE_NAME: simple-depls-bosh-generated
      - task: fly-into-concourse
        input_mapping: {fly-cmd: init-simple-depls-plan}
        output_mapping: {flight-report: concourse-simple-depls-init-report}
        file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
        params:
          ATC_EXTERNAL_URL: ((concourse-simple-depls-target))
          FLY_USERNAME: ((concourse-simple-depls-username))
          FLY_PASSWORD: "((concourse-simple-depls-password))"
groups:
  - name: Simple-depls
    jobs:
      - cancel-all-bosh-tasks
      - cloud-config-and-runtime-config-for-simple-depls
      - deploy-ntp-with-scan
      - deploy-zookeeper-without-scan
      - execute-deploy-script
      - init-concourse-boshrelease-and-stemcell-for-simple-depls
      - recreate-all
      - recreate-ntp-with-scan
      - recreate-zookeeper-without-scan
      - retrigger-all-jobs
  - name: Deploy-n*
    jobs:
      - deploy-ntp-with-scan
  - name: Deploy-z*
    jobs:
      - deploy-zookeeper-without-scan
  - name: Recreate
    jobs:
      - recreate-all
      - recreate-ntp-with-scan
      - recreate-zookeeper-without-scan
  - name: Utils
    jobs:
      - cancel-all-bosh-tasks
      - cloud-config-and-runtime-config-for-simple-depls
      - execute-deploy-script
      - init-concourse-boshrelease-and-stemcell-for-simple-depls
      - recreate-all
      - retrigger-all-jobs
