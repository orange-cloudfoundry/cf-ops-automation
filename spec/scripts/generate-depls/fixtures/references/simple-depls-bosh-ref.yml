
---
meta:
  vars:
    - &custom_ca_cert "-----BEGIN CERTIFICATE-----\nMIIDXDCCAkSgAwIBAgIBATANBgkqhkiG9w0BAQsFADA/MRMwEQYKCZImiZPyLGQB\nGRYDY29tMRYwFAYKCZImiZPyLGQBGRYGb3JhbmdlMRAwDgYDVQQDDAdUZXN0IENB\nMB4XDTE4MDUwODE0MzcwN1oXDTIwMDUwNzE0MzcwN1owPzETMBEGCgmSJomT8ixk\nARkWA2NvbTEWMBQGCgmSJomT8ixkARkWBm9yYW5nZTEQMA4GA1UEAwwHVGVzdCBD\nQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALBLNz1HSlkLUMk6PsYU\nRjPhYi4f1hlDhl1nx/uuObqaePY8neGF8XGUhzc4mnV3DRik4Ufi99t5Ib2xKdv2\nrbl3dSrSfkOTUngAGlKb5WHy2t36gcH6XhY96qAKzeuvWvXPkik6RKmIUh6HuHF0\n47ApkVpauCKWhJibTjsJ1CSEf4lGrBJG9EyEz0fAvsWwySWgDhWbG90WNUPAwChB\n8t3h7WHNXTcriMPth4FIjCgEEde9Xa6r6pCrDFQfLBwy8fJK0cMDjWrGgo8VPHre\n1eXhiSCHowZG7WEM6ikjqeck00cvskzKWNnvgXK5K4wATjynsNJnpd+88cOt7efb\nEQECAwEAAaNjMGEwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwHQYD\nVR0OBBYEFAdQsPXMlmEL7xVLP7E+cESV9qYTMB8GA1UdIwQYMBaAFAdQsPXMlmEL\n7xVLP7E+cESV9qYTMA0GCSqGSIb3DQEBCwUAA4IBAQAQWsP6GjMQhWWohODsNbuq\nG3lxTAIX04kNqXduUL1reO7BbzkBqJP9zbIjfOJra7wNyBHRTP4s2AX/ccvgvUp9\n7OqidvwtDszCBzK1an+0i0F5fn4g8WpRFhWq2OeT65PM058RhjpfvVvYYRGM3a7Z\ni1cJQPgqju6WY5esFEQHyQwR+XpL20h38IkurhQ//HzNUboZjoefCfI1bvDFbPY7\nX0YYYuNm3QGmtI2nei8X0rnnM+nE0G/6nMmFT8p9OkYLxA1FiIuGYajaHLhzgkvM\ntdn1DdO4SqwyR+lVlyUC3c4dPzLUpqpXgLSjgl5PiYD8il+PgAoBwM9mwoda5rC2\n-----END CERTIFICATE-----\n"
  tasks:
    - &on_failure
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    - &curl_ssl_image
      type: registry-image
      source:
        repository: elpaasoci/curl-ssl
        tag: 4c45660b9ad1193873b4d59b61678354ee225321
    - &generate_coa_ops_and_vars_files |
        mkdir -p result-dir/operators
        mkdir -p result-dir/vars
        find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
        find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
        echo "Generating '0-coa-templates-reference-operators.yml'"
        {
          echo '- type: replace'
          echo '  path: /tags?/coa-templates-commit-id?'
          echo '  value: "((''coa-templates-commit-id))"'
          echo '- type: replace'
          echo '  path: /tags?/coa-templates-commit-author?'
          echo '  value: "((''coa-templates-commit-author))"'
        } > result-dir/operators/0-coa-templates-reference-operators.yml
        echo "Done - file '0-coa-templates-reference-operators.yml'"
        echo "Generating '0-coa-templates-reference-vars.yml'"
        {
          echo 'coa-templates-commit-id: "'"$(cat  template-resource/.git/ref)"'"'
          echo 'coa-templates-commit-author: "'"$(cat template-resource/.git/committer)"'"'
        } > result-dir/vars/0-coa-templates-reference-vars.yml
        echo "Done - file '0-coa-templates-reference-vars.yml'"
        echo "Generating '0-coa-metadata-vars.yml'"
        {
          echo 'paas_templates_commit_id: "'"$(cat  template-resource/.git/ref)"'"'
          echo 'coa_root_deployment_name: "'"${ROOT_DEPLOYMENT_NAME}"'"'
          echo 'coa_deployment_name: "'"${DEPLOYMENT_NAME}"'"'
          echo 'iaas_type: "'"${IAAS_TYPE}"'"'
          echo 'profiles: "'"${PROFILES}"'"'
        } > result-dir/vars/0-coa-metadata-vars.yml
        echo "Done - file '0-coa-metadata-vars.yml'"
display:
  background_image: ((background-image-url))
resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: bosh-deployment-v2
  type: registry-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
    tag: v2.12.0
- name: bosh-errand
  type: registry-image
  source:
    repository: cfcommunity/bosh2-errand-resource
    tag: v0.1.2
- name: meta
  type: registry-image
  source:
    repository: olhtbr/metadata-resource
    tag: 2.0.1
resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: secrets-simple-depls-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "simple-depls/ci-deployment-overview.yml", "simple-depls/secrets", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-simple-depls
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "simple-depls/root-deployment.yml", "simple-depls/template"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true
- name: ((stemcell-main-name))
  type: s3
  icon: home-floor-l
  source:
    bucket: ((s3-stemcell-bucket))
    region_name: ((s3-stemcell-region-name))
    regexp: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-(.*)-((stemcell-main-name)).tgz
    access_key_id: ((s3-stemcell-access-key-id))
    secret_access_key: ((s3-stemcell-secret-key))
    endpoint: ((s3-stemcell-endpoint))
    skip_ssl_verification: ((s3-stemcell-skip-ssl-verification))
    skip_download: true
  version: { path: ((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell.version))-((stemcell-main-name)).tgz }
- name: secrets-ntp-with-scan
  icon: source-merge
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["simple-depls/ntp-with-scan", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-ntp-with-scan
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["simple-depls/ntp-with-scan", "meta-inf.yml", "simple-depls/root-deployment.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: ntp-with-scan-deployment
  icon: cube-send
  type: bosh-deployment-v2
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: "((bosh-password))"
    deployment: ntp-with-scan
    ca_cert: *custom_ca_cert
- name: paas-templates-zookeeper-without-scan
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["simple-depls/zookeeper-without-scan", "meta-inf.yml", "simple-depls/root-deployment.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: zookeeper-without-scan-deployment
  icon: cube-send
  type: bosh-deployment-v2
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: "((bosh-password))"
    deployment: zookeeper-without-scan
    ca_cert: *custom_ca_cert
- name: secrets-simple-depls-trigger
  icon: source-commit
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "simple-depls", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-simple-depls-versions
  icon: home-thermometer
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["simple-depls/root-deployment.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: ntp_boshrelease
  type: git
  icon:  github-circle
  source:
    uri: https://github.com/cloudfoundry-community/ntp-release
    tag_filter: ((releases.ntp_boshrelease.version))
    skip_ssl_verification: false
#    access_token: ((bot-github-access-token))
  version: { ref: ((releases.ntp_boshrelease.version)) }
- name: zookeeper_boshrelease
  type: git
  icon:  github-circle
  source:
    uri: https://github.com/cppforlife/zookeeper-release
    tag_filter: v((releases.zookeeper_boshrelease.version))
    skip_ssl_verification: false
#    access_token: ((bot-github-access-token))
  version: { ref: v((releases.zookeeper_boshrelease.version)) }
jobs:
- name: push-boshreleases
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
      - get : secrets-simple-depls-limited
        params: { submodules: none, depth: 0 }
      - get: paas-templates-simple-depls
        params: { submodules: none, depth: 0 }
        trigger: true
    - task: repackage-releases
      input_mapping: { templates-resource: paas-templates-simple-depls, secrets: secrets-simple-depls-limited }
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_TARGET: ((bosh-target))
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ROOT_DEPLOYMENT_NAME: simple-depls
    - task: repackage-releases-fallback
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases_fallback/task.yml
    - task: upload-to-director
      input_mapping: { releases-to-upload: repackaged-releases-fallback, config-resource: secrets-simple-depls-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_releases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
    - task: check-repackaging-errors
      config:
        platform: linux
        image_resource: *curl_ssl_image
        inputs:
          - name: repackaged-releases-fallback
        run:
          path: sh
          args:
            - -ec
            - |
              cd repackaged-releases-fallback
              if [ -e fallback-fixes.yml ]; then
              echo "=========================================================="
                echo "Dump fallback-fixes"
                cat fallback-fixes.yml
              fi
              echo "=========================================================="
              if [ -e fallback-errors.yml ]; then
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                echo "Dump fallback-errors"
                cat fallback-errors.yml
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                exit 1
              elif [ -e errors.yml ]; then
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                echo "Dump errors"
                cat errors.yml
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                exit 1
              else
                echo "No errors detected"
              fi
- name: upload-stemcell-to-s3
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: cf-ops-automation
        attempts: 4
        params: { submodules: none, depth: 0 }
        trigger: true
      - get : secrets-simple-depls-limited
        attempts: 4
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: paas-templates-simple-depls
        attempts: 4
        params: { submodules: none }
        trigger: true
    - task: s3-upload-stemcells
      attempts: 3
      input_mapping: { templates-resource: paas-templates-simple-depls }
      file:  cf-ops-automation/concourse/tasks/s3_stemcells_upload/task.yml
      params:
        BUCKET: ((s3-stemcell-bucket))
        REGION_NAME: ((s3-stemcell-region-name))
        ACCESS_KEY_ID: ((s3-stemcell-access-key-id))
        SECRET_ACCESS_KEY: ((s3-stemcell-secret-key))
        ENDPOINT: ((s3-stemcell-endpoint))
        SKIP_SSL_VERIFICATION: ((s3-stemcell-skip-ssl-verification))
        STEMCELL_VERSION: ((stemcell.version))
        STEMCELL_PREFIX: ((stemcell-name-prefix))
        STEMCELL_MAIN_NAME: ((stemcell-main-name))
        STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells
        VERSIONS_FILE: templates-resource/simple-depls/root-deployment.yml
- name: upload-stemcell-to-director
  on_failure: *on_failure
  plan:
    - in_parallel:
        - get: cf-ops-automation
          attempts: 4
          params: { submodules: none }
          trigger: true
        - get : secrets-simple-depls-limited
          attempts: 4
          params: { submodules: none }
        - get: ((stemcell-main-name))
          trigger: true
          attempts: 4
    - task: upload-to-director
      attempts: 3
      input_mapping: { stemcell: ((stemcell-main-name)), config-resource: secrets-simple-depls-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_stemcell/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
        NO_STEMCELL_ADDITIONAL_MESSAGE: "We use offline stemcells and precompile releases, so this task is useful as deploy-<xxx> job triggering dependency."
- name: cancel-all-bosh-tasks
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
    - get : secrets-simple-depls-limited
      params: { submodules: none, depth: 0 }
  - task: cancel-all-bosh-tasks
    input_mapping: { scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited }
    file:  cf-ops-automation/concourse/tasks/bosh_cancel_all_tasks/task.yml
    params:
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: ((bosh-password))
      BOSH_TARGET: ((bosh-target))
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: execute-deploy-script
  serial: true
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: secrets-simple-depls-limited
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: paas-templates-simple-depls
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
    - task: run-deploy.sh
      input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-simple-depls, secrets: secrets-simple-depls-limited}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: simple-depls/template
        COMMON_SCRIPT_DIR: scripts-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: cloud-config-and-runtime-config-for-simple-depls
  serial: true
  on_failure: *on_failure
  plan:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: secrets-simple-depls-limited
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: paas-templates-simple-depls
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - task: generate-simple-depls-all-config
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-simple-depls-limited, additional-resource: paas-templates-simple-depls}
      output_mapping: {generated-files: config-manifest}
      file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/
        YML_TEMPLATE_DIR: additional-resource/simple-depls/template
        YML_FILES: |
            ./credentials-resource/simple-depls/secrets/meta.yml
            ./credentials-resource/simple-depls/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
            ./additional-resource/meta-inf.yml
        CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/template
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
    - in_parallel:
      - task: update-cloud-config-for-simple-depls
        attempts: 3
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
        output_mapping: {deployed-config: deployed-cloud-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          CONFIG_TYPE: cloud
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-cloud-config
            attempts: 3
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cloud-config}
            output_mapping: {updated-git-resource: updated-cloud-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "simple-depls/cloud-config.yml"
              NEW_FILE: "cloud-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "simple-depls cloud-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 6
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-cloud-config
              rebase: true
      - task: update-runtime-config-for-simple-depls
        attempts: 3
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
        output_mapping: {deployed-config: deployed-runtime-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: "((bosh-password))"
           BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
           CONFIG_TYPE: runtime
           CREDHUB_SERVER: ((credhub-server))
           CREDHUB_CLIENT: ((credhub-client))
           CREDHUB_SECRET: "((credhub-secret))"
           CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-runtime-config
            attempts: 3
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-runtime-config}
            output_mapping: {updated-git-resource: updated-runtime-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "simple-depls/runtime-config.yml"
              NEW_FILE: "runtime-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "simple-depls runtime-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 6
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-runtime-config
              rebase: true
      - task: update-cpi-config-for-simple-depls
        attempts: 3
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-simple-depls-limited}
        output_mapping: {deployed-config: deployed-cpi-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          CONFIG_TYPE: cpi
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-cpi-config
            attempts: 3
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cpi-config}
            output_mapping: {updated-git-resource: updated-cpi-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "simple-depls/cpi-config.yml"
              NEW_FILE: "cpi-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "simple-depls cpi-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 6
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-cpi-config
              rebase: true
- name: deploy-ntp-with-scan
  serial: true
  serial_groups: [concurrent-group-0]
  on_failure: *on_failure
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: ((stemcell-main-name))
      passed: [ upload-stemcell-to-director ]
      trigger: true
      params:
      attempts: 4
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: ntp_boshrelease
      trigger: true
      params:
        tarball: false
      attempts: 4
    - get: secrets-ntp-with-scan
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: paas-templates-ntp-with-scan
      trigger: true
      params:
        submodules: none
        submodule_recursive: "false" # this must be a string
        depth: 0
  - task: check-configuration
    input_mapping:
      scripts-resource: cf-ops-automation
      config-resource: secrets-ntp-with-scan
      templates-resource: paas-templates-ntp-with-scan
    output_mapping: {check-configuration-result: check-configuration-result}
    file: cf-ops-automation/concourse/tasks/check_configuration/task.yml
    params:
      ROOT_DEPLOYMENT: simple-depls
      DEPLOYMENT: ntp-with-scan
      SCAN_PATHS: simple-depls/ntp-with-scan meta-inf.yml
      GIT_SUBMODULES: 
      LOCAL_SECRETS_SCAN: true
  - task: generate-ntp-with-scan-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: secrets-ntp-with-scan
      additional-resource: paas-templates-ntp-with-scan
    output_mapping: {generated-files: release-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/ntp-with-scan/
      YML_TEMPLATE_DIR: additional-resource/simple-depls/ntp-with-scan/template
      YML_FILES: |
          ./credentials-resource/simple-depls/ntp-with-scan/secrets/meta.yml
          ./credentials-resource/simple-depls/ntp-with-scan/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/ntp-with-scan/template
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: execute-ntp-with-scan-pre-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-ntp-with-scan
      credentials-resource: secrets-ntp-with-scan
      additional-resource: release-manifest
    output_mapping: {generated-files: pre-bosh-deploy-resource}
    file: cf-ops-automation/concourse/tasks/pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/simple-depls/ntp-with-scan/template
      SECRETS_DIR: credentials-resource/simple-depls/ntp-with-scan
  - task: copy-ntp-with-scan-required-files
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-ntp-with-scan
      credentials-resource: secrets-ntp-with-scan
      additional-resource: pre-bosh-deploy-resource
    output_mapping: {generated-files: final-release-manifest}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/simple-depls/ntp-with-scan/template
      SECRETS_DIR: credentials-resource/simple-depls/ntp-with-scan
      MANIFEST_NAME: ntp-with-scan.yml
  - task: generate-coa-ops-and-vars-files
    input_mapping: {template-resource: paas-templates-ntp-with-scan}
    output_mapping: {result-dir: ops-and-vars-files}
    config:
      platform: linux
      image_resource: *curl_ssl_image
      inputs:
        - name: final-release-manifest
        - name: template-resource
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - *generate_coa_ops_and_vars_files
      params:
        PROFILES: ((profiles))
        IAAS_TYPE: ((iaas-type))
        ROOT_DEPLOYMENT_NAME: simple-depls
        DEPLOYMENT_NAME: ntp-with-scan
  - task: display-ntp-with-scan-manifest
    input_mapping:
      bosh-inputs: ops-and-vars-files
      manifest-dir: final-release-manifest
      secrets: secrets-ntp-with-scan
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: interpolated-manifest }
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
       VARS_FILES_SUFFIX: "*/*vars.yml"
       OPS_FILES_SUFFIX:  "*/*operators.yml"
       BOSH_YAML_FILE: ntp-with-scan.yml
  - task: resolve-manifest-latest-versions
    input_mapping:
      templates-resource: paas-templates-ntp-with-scan
      manifest-dir: interpolated-manifest
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: resolved-manifest-versions }
    file: cf-ops-automation/concourse/tasks/resolve_manifest_versions/task.yml
    params:
      STEMCELL_NAME: ((stemcell-main-name))
      STEMCELL_OS: 
      VERSIONS_FILE:  templates-resource/simple-depls/root-deployment.yml
      MANIFEST_YAML_FILE: manifest-dir/interpolated-ntp-with-scan.yml
      DEPLOYMENT_NAME: ntp-with-scan
      DOWNLOAD_SERVER_URL: https://bosh.io/d/github.com/
      OFFLINE_MODE_ENABLED: false
      PRECOMPILE_MODE_ENABLED: true
      LOCK_RELEASES: false
  - put: ntp-with-scan-deployment
    attempts: 5
    on_failure:
      do:
        - task: update-ntp-with-scan-files
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: resolved-manifest-versions}
          output_mapping: {updated-git-resource: failed-ntp-with-scan-secrets}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: simple-depls/ntp-with-scan/ntp-with-scan-last-deployment-failure.yml
            NEW_FILE: "ntp-with-scan.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "Failed to deploy ntp-with-scan manifest\n\nActive profiles: ${PROFILES}\n[skip ci]"
        - put: secrets-full-writer
          attempts: 6
          get_params: { submodules: none, depth: 0 }
          params:
            repository: failed-ntp-with-scan-secrets
            rebase: true
    params:
      manifest: resolved-manifest-versions/ntp-with-scan.yml
      cleanup: true
      no_redact: false
      dry_run: false
      fix: false
      recreate: false
  - task: bosh-variables
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-full-writer}
    output_mapping: {result-dir: bosh-variables-result}
    file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
    params:
      BOSH_DEPLOYMENT: ntp-with-scan
      BOSH_TARGET: ((bosh-target))
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: "((bosh-password))"
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
  - task: update-ntp-with-scan-fingerprints-file
    input_mapping: {reference-resource: secrets-full-writer, generated-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-ntp-with-scan-fingerprints-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: simple-depls/ntp-with-scan/ntp-with-scan-fingerprints.json
      NEW_FILE: "credential_fingerprints.json"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "ntp-with-scan variable fingerprints auto update.\nDeployment information: $(cat generated-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - task: update-ntp-with-scan-files
    input_mapping: {reference-resource: updated-ntp-with-scan-fingerprints-secrets, generated-resource: ntp-with-scan-deployment, additional-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-ntp-with-scan-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: simple-depls/ntp-with-scan/ntp-with-scan.yml
      NEW_FILE: "manifest.yml"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "ntp-with-scan generated manifest auto update.\nDeployment information: $(cat additional-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - put: secrets-full-writer
    attempts: 6
    get_params: { submodules: none, depth: 0 }
    params:
      repository: updated-ntp-with-scan-secrets
      rebase: true
  - task: execute-ntp-with-scan-post-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-ntp-with-scan
      credentials-resource: secrets-ntp-with-scan
      additional-resource: final-release-manifest
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/simple-depls/ntp-with-scan/template
      SECRETS_DIR: credentials-resource/simple-depls/ntp-with-scan
- name: deploy-zookeeper-without-scan
  serial: true
  serial_groups: [concurrent-group-1]
  on_failure: *on_failure
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: ((stemcell-main-name))
      passed: [ upload-stemcell-to-director ]
      trigger: true
      params:
      attempts: 4
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: zookeeper_boshrelease
      trigger: true
      params:
        tarball: false
      attempts: 4
    - get: paas-templates-zookeeper-without-scan
      trigger: true
      params:
        submodules: none
        submodule_recursive: "false" # this must be a string
        depth: 0
  - task: check-configuration
    input_mapping:
      scripts-resource: cf-ops-automation
      config-resource: secrets-full-writer
      templates-resource: paas-templates-zookeeper-without-scan
    output_mapping: {check-configuration-result: check-configuration-result}
    file: cf-ops-automation/concourse/tasks/check_configuration/task.yml
    params:
      ROOT_DEPLOYMENT: simple-depls
      DEPLOYMENT: zookeeper-without-scan
      SCAN_PATHS: simple-depls/zookeeper-without-scan meta-inf.yml
      GIT_SUBMODULES: 
      LOCAL_SECRETS_SCAN: false
  - task: generate-zookeeper-without-scan-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: secrets-full-writer
      additional-resource: paas-templates-zookeeper-without-scan
    output_mapping: {generated-files: release-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/zookeeper-without-scan/
      YML_TEMPLATE_DIR: additional-resource/simple-depls/zookeeper-without-scan/template
      YML_FILES: |
          ./credentials-resource/simple-depls/zookeeper-without-scan/secrets/meta.yml
          ./credentials-resource/simple-depls/zookeeper-without-scan/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/zookeeper-without-scan/template
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: execute-zookeeper-without-scan-pre-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-zookeeper-without-scan
      credentials-resource: secrets-full-writer
      additional-resource: release-manifest
    output_mapping: {generated-files: pre-bosh-deploy-resource}
    file: cf-ops-automation/concourse/tasks/pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/simple-depls/zookeeper-without-scan/template
      SECRETS_DIR: credentials-resource/simple-depls/zookeeper-without-scan
  - task: copy-zookeeper-without-scan-required-files
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-zookeeper-without-scan
      credentials-resource: secrets-full-writer
      additional-resource: pre-bosh-deploy-resource
    output_mapping: {generated-files: final-release-manifest}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/simple-depls/zookeeper-without-scan/template
      SECRETS_DIR: credentials-resource/simple-depls/zookeeper-without-scan
      MANIFEST_NAME: zookeeper-without-scan.yml
  - task: generate-coa-ops-and-vars-files
    input_mapping: {template-resource: paas-templates-zookeeper-without-scan}
    output_mapping: {result-dir: ops-and-vars-files}
    config:
      platform: linux
      image_resource: *curl_ssl_image
      inputs:
        - name: final-release-manifest
        - name: template-resource
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - *generate_coa_ops_and_vars_files
      params:
        PROFILES: ((profiles))
        IAAS_TYPE: ((iaas-type))
        ROOT_DEPLOYMENT_NAME: simple-depls
        DEPLOYMENT_NAME: zookeeper-without-scan
  - task: display-zookeeper-without-scan-manifest
    input_mapping:
      bosh-inputs: ops-and-vars-files
      manifest-dir: final-release-manifest
      secrets: secrets-full-writer
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: interpolated-manifest }
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
       VARS_FILES_SUFFIX: "*/*vars.yml"
       OPS_FILES_SUFFIX:  "*/*operators.yml"
       BOSH_YAML_FILE: zookeeper-without-scan.yml
  - task: resolve-manifest-latest-versions
    input_mapping:
      templates-resource: paas-templates-zookeeper-without-scan
      manifest-dir: interpolated-manifest
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: resolved-manifest-versions }
    file: cf-ops-automation/concourse/tasks/resolve_manifest_versions/task.yml
    params:
      STEMCELL_NAME: ((stemcell-main-name))
      STEMCELL_OS: 
      VERSIONS_FILE:  templates-resource/simple-depls/root-deployment.yml
      MANIFEST_YAML_FILE: manifest-dir/interpolated-zookeeper-without-scan.yml
      DEPLOYMENT_NAME: zookeeper-without-scan
      DOWNLOAD_SERVER_URL: https://bosh.io/d/github.com/
      OFFLINE_MODE_ENABLED: false
      PRECOMPILE_MODE_ENABLED: true
      LOCK_RELEASES: false
  - put: zookeeper-without-scan-deployment
    attempts: 5
    on_failure:
      do:
        - task: update-zookeeper-without-scan-files
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: resolved-manifest-versions}
          output_mapping: {updated-git-resource: failed-zookeeper-without-scan-secrets}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: simple-depls/zookeeper-without-scan/zookeeper-without-scan-last-deployment-failure.yml
            NEW_FILE: "zookeeper-without-scan.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "Failed to deploy zookeeper-without-scan manifest\n\nActive profiles: ${PROFILES}\n[skip ci]"
        - put: secrets-full-writer
          attempts: 6
          get_params: { submodules: none, depth: 0 }
          params:
            repository: failed-zookeeper-without-scan-secrets
            rebase: true
    params:
      manifest: resolved-manifest-versions/zookeeper-without-scan.yml
      cleanup: true
      no_redact: false
      dry_run: false
      fix: false
      recreate: false
  - task: bosh-variables
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-full-writer}
    output_mapping: {result-dir: bosh-variables-result}
    file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
    params:
      BOSH_DEPLOYMENT: zookeeper-without-scan
      BOSH_TARGET: ((bosh-target))
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: "((bosh-password))"
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
  - task: update-zookeeper-without-scan-fingerprints-file
    input_mapping: {reference-resource: secrets-full-writer, generated-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-zookeeper-without-scan-fingerprints-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: simple-depls/zookeeper-without-scan/zookeeper-without-scan-fingerprints.json
      NEW_FILE: "credential_fingerprints.json"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "zookeeper-without-scan variable fingerprints auto update.\nDeployment information: $(cat generated-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - task: update-zookeeper-without-scan-files
    input_mapping: {reference-resource: updated-zookeeper-without-scan-fingerprints-secrets, generated-resource: zookeeper-without-scan-deployment, additional-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-zookeeper-without-scan-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: simple-depls/zookeeper-without-scan/zookeeper-without-scan.yml
      NEW_FILE: "manifest.yml"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "zookeeper-without-scan generated manifest auto update.\nDeployment information: $(cat additional-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - put: secrets-full-writer
    attempts: 6
    get_params: { submodules: none, depth: 0 }
    params:
      repository: updated-zookeeper-without-scan-secrets
      rebase: true
  - task: execute-zookeeper-without-scan-post-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-zookeeper-without-scan
      credentials-resource: secrets-full-writer
      additional-resource: final-release-manifest
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/simple-depls/zookeeper-without-scan/template
      SECRETS_DIR: credentials-resource/simple-depls/zookeeper-without-scan
- name: retrigger-all-jobs
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
    - get: secrets-simple-depls-trigger
      params: { submodules: none, depth: 0 }
  - task: generate-simple-depls-pipeline
    output_mapping: {result-dir: trigger-simple-depls-plan}
    config:
      platform: linux
      image_resource: *curl_ssl_image
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-ntp-with-scan" >> result-dir/flight-plan
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-zookeeper-without-scan" >> result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: simple-depls-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-simple-depls-plan}
    output_mapping: {flight-report: concourse-simple-depls-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-simple-depls-target))
      FLY_USERNAME: ((concourse-simple-depls-username))
      FLY_PASSWORD: "((concourse-simple-depls-password))"
      FLY_TEAM: main
- name: init-concourse-boshrelease-and-stemcell-for-simple-depls
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      attempts: 4
#      trigger: true
    - get: secrets-simple-depls-trigger
      params: { submodules: none, depth: 0 }
      attempts: 4
    - get: paas-templates-simple-depls-versions
      params: { submodules: none, depth: 0 }
      attempts: 4
      trigger: true
  - task: generate-simple-depls-flight-plan
    output_mapping: {result-dir: init-simple-depls-plan}
    config:
      platform: linux
      image_resource: *curl_ssl_image
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          echo "check-resource -r $BUILD_PIPELINE_NAME/ntp_boshrelease --from tag:((releases.ntp_boshrelease.version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/zookeeper_boshrelease --from tag:v((releases.zookeeper_boshrelease.version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from path:((stemcell-name-prefix))((stemcell-main-name))/bosh-stemcell-((stemcell.version))-((stemcell-main-name)).tgz" | tee -a result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: simple-depls-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: init-simple-depls-plan}
    output_mapping: {flight-report: concourse-simple-depls-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-simple-depls-target))
      FLY_USERNAME: ((concourse-simple-depls-username))
      FLY_PASSWORD: "((concourse-simple-depls-password))"
      FLY_TEAM: main
groups:
- name: simple-depls
  jobs:
    - "*"
- name: deploy-n
  jobs:
    - deploy-n*
- name: deploy-z
  jobs:
    - deploy-z*
- name: utils
  jobs:
    - cancel-all-bosh-tasks
    - cloud-config-and-runtime-config-for-simple-depls
    - execute-deploy-script
    - init-concourse-boshrelease-and-stemcell-for-simple-depls
    - push-boshreleases
    - retrigger-all-jobs
    - upload-stemcell-to-director
    - upload-stemcell-to-s3
