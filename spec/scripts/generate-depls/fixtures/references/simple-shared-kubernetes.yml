
---
display:
  background_image: ((background-image-url))
resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: meta
  type: registry-image
  source:
    repository: olhtbr/metadata-resource
    tag: 2.0.1
resources:
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: secrets-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "*/ci-deployment-overview.yml", "*/secrets", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-limited
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "*/root-deployment.yml", "*/template"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: paas-templates-full
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: reconciliation-loop
  type: time
  source:
    interval: 4m
    location: Europe/Paris
- name: k8s-configs-repository
  icon: source-pull
  type: git
  source:
    uri: ((k8s-configs-repository-uri))
    username: ((k8s-configs-repository-username))
    password: ((k8s-configs-repository-password))
    branch: ((k8s-configs-repository-branch))
    skip_ssl_verification: true
jobs:
- name: execute-deploy-script-simple-depls
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: secrets-full-writer
        params: { submodules: none, depth: 0 }
      - get: secrets-limited
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: paas-templates-limited
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
      - get: k8s-configs-repository
        params: { submodules: none }
    - task: apply-iaas-type-and-profiles
      input_mapping:
        paas-templates-resource: paas-templates-limited
      file: cf-ops-automation/concourse/tasks/apply_iaas_type_and_profiles/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: simple-depls
        COA_DEPLOYMENT_NAME: hooks
        CONFIG_DIR: k8s
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
    - task: run-deploy.sh
      input_mapping: { paas-templates-resource: paas-templates-limited,  credentials-resource: secrets-full-writer }
      output_mapping: { result-dir: updated-k8s-repo }
      file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
      params:
        COA_DEPLOYMENT_NAME: simple-depls-k8s
        COA_ROOT_DEPLOYMENT_NAME: simple-depls
        CUSTOM_SCRIPT_DIR: paas-templates-resource/simple-depls/hooks/k8s
        CREDHUB_SERVER: ((credhub-server))
        CREDHUB_CLIENT: ((credhub-client))
        CREDHUB_SECRET: "((credhub-secret))"
        CREDHUB_CA_CERT: credentials-resource/shared/certs/internal_paas-ca/server-ca.crt
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
        FILE_EXECUTION_FILTER: "deploy*.sh"
    - put: k8s-configs-repository
      attempts: 6
      get_params: { submodules: none, depth: 0 }
      params:
        repository: updated-k8s-repo
        rebase: true
- name: deploy-k8s-sample-simple-depls
  serial: true
  serial_groups: [concurrent-group-0]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: k8s-configs-repository
      params: { submodules: none }
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: reconciliation-loop
      trigger: true
    - get: paas-templates-full
      trigger: true
      params:
        submodules: none
        submodule_recursive: "false" # this must be a string
        depth: 0
  - task: generate-k8s-sample-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: secrets-full-writer
      additional-resource: paas-templates-full
    output_mapping: {generated-files: pre-processed-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/simple-depls/k8s-sample/
      YML_TEMPLATE_DIR: additional-resource/simple-depls/k8s-sample/k8s-config
      YML_FILES: |
          ./credentials-resource/simple-depls/k8s-sample/secrets/meta.yml
          ./credentials-resource/simple-depls/k8s-sample/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/simple-depls/k8s-sample/k8s-config
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      COA_DEPLOYMENT_NAME: k8s-sample
  - task: apply-iaas-type-and-profiles
    input_mapping:
      paas-templates-resource: paas-templates-full
    file: cf-ops-automation/concourse/tasks/apply_iaas_type_and_profiles/task.yml
    params:
      ROOT_DEPLOYMENT_NAME: simple-depls
      COA_DEPLOYMENT_NAME: k8s-sample
      CONFIG_DIR: k8s-config
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: execute-pre-deploy-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: secrets-full-writer
    output_mapping: {result-dir: ignored-k8s-repo-pre-deploy}
    file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
    params:
      COA_DEPLOYMENT_NAME: k8s-sample
      CUSTOM_SCRIPT_DIR: paas-templates-resource/simple-depls/k8s-sample/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/shared/certs/internal_paas-ca/server-ca.crt
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      FILE_EXECUTION_FILTER: "pre-deploy*.sh"
  - task: execute-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: secrets-full-writer
    output_mapping: {result-dir: updated-k8s-repo}
    file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
    params:
      COA_DEPLOYMENT_NAME: k8s-sample
      COA_ROOT_DEPLOYMENT_NAME: simple-depls
      CUSTOM_SCRIPT_DIR: paas-templates-resource/simple-depls/k8s-sample/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/shared/certs/internal_paas-ca/server-ca.crt
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - put: k8s-configs-repository
    attempts: 6
    get_params: { submodules: none, depth: 0 }
    params:
      repository: updated-k8s-repo
      rebase: true
  - task: execute-post-deploy-shell
    input_mapping:
      paas-templates-resource: paas-templates-resolved
      credentials-resource: secrets-full-writer
      k8s-configs-repository: updated-k8s-repo
    output_mapping: {result-dir: ignored-k8s-repo-post-deploy}
    file: cf-ops-automation/concourse/tasks/execute_k8s_shells/task.yml
    params:
      COA_DEPLOYMENT_NAME: k8s-sample
      COA_ROOT_DEPLOYMENT_NAME: simple-depls
      CUSTOM_SCRIPT_DIR: paas-templates-resource/simple-depls/k8s-sample/k8s-config
      CREDHUB_SERVER: ((credhub-server))
      CREDHUB_CLIENT: ((credhub-client))
      CREDHUB_SECRET: "((credhub-secret))"
      CREDHUB_CA_CERT: credentials-resource/shared/certs/internal_paas-ca/server-ca.crt
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
      FILE_EXECUTION_FILTER: "post-deploy*.sh"
- name: retrigger-all-jobs
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
  - task: generate-pipeline
    output_mapping: {result-dir: trigger-plan}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: elpaasoci/curl-ssl
          tag: e3520d05ad3ff8564810ba75f148d9426a7ebe8b
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-k8s-sample-simple-depls" >> result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: shared-kubernetes-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-plan}
    output_mapping: {flight-report: concourse-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-shared-target))
      FLY_USERNAME: ((concourse-shared-username))
      FLY_PASSWORD: "((concourse-shared-password))"
      FLY_TEAM: main
groups:
- name: all
  jobs: ["*"]
- name: deploy-k
  jobs:
    - deploy-k8s-sample-simple-depls
- name: simple-depls
  jobs:
    - deploy-k8s-sample-simple-depls
    - execute-deploy-script-simple-depls
- name: utils
  jobs:
    - execute-deploy-script-simple-depls
    - retrigger-all-jobs
