
---
display:
  background_image: ((background-image-url))
resource_types:
  - name: slack-notification
    type: registry-image
    source:
      repository: cfcommunity/slack-notification-resource
      tag: v1.4.2
  - name: meta
    type: registry-image
    source:
      repository: olhtbr/metadata-resource
      tag: 2.0.1
resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: cf-ops-automation
  icon: rocket
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true
- name: secrets-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: secrets-limited-for-pipeline
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
    paths: [ "*-depls/ci-deployment-overview.yml", coa/config, "coa/pipelines/generated/**/*-generated.yml", shared, private-config.yml, "*-depls/**/enable-cf-app.yml", "*-depls/**/enable-deployment.yml" ]
- name: paas-templates-limited
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: ((paas-templates-branch))
    skip_ssl_verification: true
    paths: [ '*-depls/', '.gitmodules', 'shared-config.yml', 'meta-inf.yml' ]
jobs:
  - name: update-pipeline-apps-depls
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
    - in_parallel:
      - put: concourse-meta
      - get: paas-templates-limited
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: secrets-limited-for-pipeline
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
    - task: generate-apps-depls-pipelines
      input_mapping: {scripts-resource: cf-ops-automation,templates: paas-templates-limited,secrets: secrets-limited-for-pipeline}
      output_mapping: {result-dir: concourse-generated-pipeline}
      file: cf-ops-automation/concourse/tasks/generate_depls/task.yml
      params:
        ROOT_DEPLOYMENT: apps-depls
        IAAS_TYPE: ((iaas-type))
        EXCLUDE_PIPELINES: depls
        PROFILES: ((profiles))
    - task: copy-and-filter-generated-pipeline
      input_mapping: {templates: paas-templates-limited,config: secrets-limited-for-pipeline}
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
              repository: library/ruby
              tag: 3.1.2-slim
        inputs:
        - name: cf-ops-automation
        - name: config
        - name: concourse-generated-pipeline
        outputs:
        - name: selected-pipelines
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            du -a concourse-generated-pipeline/concourse/pipelines
            cat << EOF >copy_pipelines.rb
            require 'fileutils'
            require 'yaml'
            root_deployment = ENV["ROOT_DEPLOYMENT"]
            ci_overview_file = File.join("config",root_deployment ,"ci-deployment-overview.yml")
            raise "ERROR - Missing file : #{ci_overview_file}" unless File.exist?(ci_overview_file)
            ci_overview=YAML.load_file(ci_overview_file, aliases: true)
            ci_overview["ci-deployment"][root_deployment]["pipelines"].each do |pipeline_name,pipeline_details|
              puts "Processing #{pipeline_name} with ${pipeline_details}"
              team = (pipeline_details && pipeline_details["team"]) || "main"
              pipeline_dest_dir = File.join("selected-pipelines", team, root_deployment)
              FileUtils.mkdir_p(pipeline_dest_dir)
              pipeline_filename = File.join("concourse-generated-pipeline","concourse","pipelines","#{pipeline_name}.yml")
              FileUtils.cp(pipeline_filename, pipeline_dest_dir) if File.exist?(pipeline_filename)
            end
            EOF
            ruby copy_pipelines.rb
            echo "Filtering pipelines:"
            cat << EOF >filter_pipelines.rb
            require 'fileutils'
            require 'yaml'
            Dir[File.join("selected-pipelines","**","*.yml")].each do |file_path|
              file_content = YAML.load_file(file_path, aliases: true)
              if file_content["jobs"]&.fetch(0)&.fetch("name") == "this-is-an-empty-pipeline"
               puts " deleting empty pipeline: #{file_path}";
               FileUtils.rm(file_path)
              else
               puts " keeping #{file_path}"
              end
            end
            EOF
            ruby filter_pipelines.rb
      params:
        ROOT_DEPLOYMENT: apps-depls
    - task: format-pipelines
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: teliaoss/concourse-fly
            tag: "20210905"
        inputs:
          - name: selected-pipelines
        outputs:
          - name: formated-pipelines
        run:
          path: /bin/sh
          args:
            - -ec
            - |
              echo "We use fly $(fly --version) to format pipelines"
              cp -rp selected-pipelines/* formated-pipelines/
              find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
    - task: update-git-generated-pipelines
      input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
      output_mapping: {updated-git-resource: generated-pipelines}
      file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
      params:
        COMMIT_MESSAGE: "Generated pipelines update for apps-depls"
        OLD_DIR: "coa/pipelines/generated"
    - put: secrets-writer
      attempts: 6
      params:
        repository: generated-pipelines
        rebase: true
  - name: update-pipeline-delete-depls
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
    - in_parallel:
      - put: concourse-meta
      - get: paas-templates-limited
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: secrets-limited-for-pipeline
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
    - task: generate-delete-depls-pipelines
      input_mapping: {scripts-resource: cf-ops-automation,templates: paas-templates-limited,secrets: secrets-limited-for-pipeline}
      output_mapping: {result-dir: concourse-generated-pipeline}
      file: cf-ops-automation/concourse/tasks/generate_depls/task.yml
      params:
        ROOT_DEPLOYMENT: delete-depls
        IAAS_TYPE: ((iaas-type))
        EXCLUDE_PIPELINES: depls
        PROFILES: ((profiles))
    - task: copy-and-filter-generated-pipeline
      input_mapping: {templates: paas-templates-limited,config: secrets-limited-for-pipeline}
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
              repository: library/ruby
              tag: 3.1.2-slim
        inputs:
        - name: cf-ops-automation
        - name: config
        - name: concourse-generated-pipeline
        outputs:
        - name: selected-pipelines
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            du -a concourse-generated-pipeline/concourse/pipelines
            cat << EOF >copy_pipelines.rb
            require 'fileutils'
            require 'yaml'
            root_deployment = ENV["ROOT_DEPLOYMENT"]
            ci_overview_file = File.join("config",root_deployment ,"ci-deployment-overview.yml")
            raise "ERROR - Missing file : #{ci_overview_file}" unless File.exist?(ci_overview_file)
            ci_overview=YAML.load_file(ci_overview_file, aliases: true)
            ci_overview["ci-deployment"][root_deployment]["pipelines"].each do |pipeline_name,pipeline_details|
              puts "Processing #{pipeline_name} with ${pipeline_details}"
              team = (pipeline_details && pipeline_details["team"]) || "main"
              pipeline_dest_dir = File.join("selected-pipelines", team, root_deployment)
              FileUtils.mkdir_p(pipeline_dest_dir)
              pipeline_filename = File.join("concourse-generated-pipeline","concourse","pipelines","#{pipeline_name}.yml")
              FileUtils.cp(pipeline_filename, pipeline_dest_dir) if File.exist?(pipeline_filename)
            end
            EOF
            ruby copy_pipelines.rb
            echo "Filtering pipelines:"
            cat << EOF >filter_pipelines.rb
            require 'fileutils'
            require 'yaml'
            Dir[File.join("selected-pipelines","**","*.yml")].each do |file_path|
              file_content = YAML.load_file(file_path, aliases: true)
              if file_content["jobs"]&.fetch(0)&.fetch("name") == "this-is-an-empty-pipeline"
               puts " deleting empty pipeline: #{file_path}";
               FileUtils.rm(file_path)
              else
               puts " keeping #{file_path}"
              end
            end
            EOF
            ruby filter_pipelines.rb
      params:
        ROOT_DEPLOYMENT: delete-depls
    - task: format-pipelines
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: teliaoss/concourse-fly
            tag: "20210905"
        inputs:
          - name: selected-pipelines
        outputs:
          - name: formated-pipelines
        run:
          path: /bin/sh
          args:
            - -ec
            - |
              echo "We use fly $(fly --version) to format pipelines"
              cp -rp selected-pipelines/* formated-pipelines/
              find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
    - task: update-git-generated-pipelines
      input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
      output_mapping: {updated-git-resource: generated-pipelines}
      file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
      params:
        COMMIT_MESSAGE: "Generated pipelines update for delete-depls"
        OLD_DIR: "coa/pipelines/generated"
    - put: secrets-writer
      attempts: 6
      params:
        repository: generated-pipelines
        rebase: true
  - name: update-pipeline-no-dependency-depls
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
    - in_parallel:
      - put: concourse-meta
      - get: paas-templates-limited
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: secrets-limited-for-pipeline
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
    - task: generate-no-dependency-depls-pipelines
      input_mapping: {scripts-resource: cf-ops-automation,templates: paas-templates-limited,secrets: secrets-limited-for-pipeline}
      output_mapping: {result-dir: concourse-generated-pipeline}
      file: cf-ops-automation/concourse/tasks/generate_depls/task.yml
      params:
        ROOT_DEPLOYMENT: no-dependency-depls
        IAAS_TYPE: ((iaas-type))
        EXCLUDE_PIPELINES: depls
        PROFILES: ((profiles))
    - task: copy-and-filter-generated-pipeline
      input_mapping: {templates: paas-templates-limited,config: secrets-limited-for-pipeline}
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
              repository: library/ruby
              tag: 3.1.2-slim
        inputs:
        - name: cf-ops-automation
        - name: config
        - name: concourse-generated-pipeline
        outputs:
        - name: selected-pipelines
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            du -a concourse-generated-pipeline/concourse/pipelines
            cat << EOF >copy_pipelines.rb
            require 'fileutils'
            require 'yaml'
            root_deployment = ENV["ROOT_DEPLOYMENT"]
            ci_overview_file = File.join("config",root_deployment ,"ci-deployment-overview.yml")
            raise "ERROR - Missing file : #{ci_overview_file}" unless File.exist?(ci_overview_file)
            ci_overview=YAML.load_file(ci_overview_file, aliases: true)
            ci_overview["ci-deployment"][root_deployment]["pipelines"].each do |pipeline_name,pipeline_details|
              puts "Processing #{pipeline_name} with ${pipeline_details}"
              team = (pipeline_details && pipeline_details["team"]) || "main"
              pipeline_dest_dir = File.join("selected-pipelines", team, root_deployment)
              FileUtils.mkdir_p(pipeline_dest_dir)
              pipeline_filename = File.join("concourse-generated-pipeline","concourse","pipelines","#{pipeline_name}.yml")
              FileUtils.cp(pipeline_filename, pipeline_dest_dir) if File.exist?(pipeline_filename)
            end
            EOF
            ruby copy_pipelines.rb
            echo "Filtering pipelines:"
            cat << EOF >filter_pipelines.rb
            require 'fileutils'
            require 'yaml'
            Dir[File.join("selected-pipelines","**","*.yml")].each do |file_path|
              file_content = YAML.load_file(file_path, aliases: true)
              if file_content["jobs"]&.fetch(0)&.fetch("name") == "this-is-an-empty-pipeline"
               puts " deleting empty pipeline: #{file_path}";
               FileUtils.rm(file_path)
              else
               puts " keeping #{file_path}"
              end
            end
            EOF
            ruby filter_pipelines.rb
      params:
        ROOT_DEPLOYMENT: no-dependency-depls
    - task: format-pipelines
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: teliaoss/concourse-fly
            tag: "20210905"
        inputs:
          - name: selected-pipelines
        outputs:
          - name: formated-pipelines
        run:
          path: /bin/sh
          args:
            - -ec
            - |
              echo "We use fly $(fly --version) to format pipelines"
              cp -rp selected-pipelines/* formated-pipelines/
              find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
    - task: update-git-generated-pipelines
      input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
      output_mapping: {updated-git-resource: generated-pipelines}
      file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
      params:
        COMMIT_MESSAGE: "Generated pipelines update for no-dependency-depls"
        OLD_DIR: "coa/pipelines/generated"
    - put: secrets-writer
      attempts: 6
      params:
        repository: generated-pipelines
        rebase: true
  - name: update-pipeline-simple-depls
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
    - in_parallel:
      - put: concourse-meta
      - get: paas-templates-limited
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: secrets-limited-for-pipeline
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
        attempts: 4
        trigger: true
    - task: generate-simple-depls-pipelines
      input_mapping: {scripts-resource: cf-ops-automation,templates: paas-templates-limited,secrets: secrets-limited-for-pipeline}
      output_mapping: {result-dir: concourse-generated-pipeline}
      file: cf-ops-automation/concourse/tasks/generate_depls/task.yml
      params:
        ROOT_DEPLOYMENT: simple-depls
        IAAS_TYPE: ((iaas-type))
        EXCLUDE_PIPELINES: depls
        PROFILES: ((profiles))
    - task: copy-and-filter-generated-pipeline
      input_mapping: {templates: paas-templates-limited,config: secrets-limited-for-pipeline}
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
              repository: library/ruby
              tag: 3.1.2-slim
        inputs:
        - name: cf-ops-automation
        - name: config
        - name: concourse-generated-pipeline
        outputs:
        - name: selected-pipelines
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            du -a concourse-generated-pipeline/concourse/pipelines
            cat << EOF >copy_pipelines.rb
            require 'fileutils'
            require 'yaml'
            root_deployment = ENV["ROOT_DEPLOYMENT"]
            ci_overview_file = File.join("config",root_deployment ,"ci-deployment-overview.yml")
            raise "ERROR - Missing file : #{ci_overview_file}" unless File.exist?(ci_overview_file)
            ci_overview=YAML.load_file(ci_overview_file, aliases: true)
            ci_overview["ci-deployment"][root_deployment]["pipelines"].each do |pipeline_name,pipeline_details|
              puts "Processing #{pipeline_name} with ${pipeline_details}"
              team = (pipeline_details && pipeline_details["team"]) || "main"
              pipeline_dest_dir = File.join("selected-pipelines", team, root_deployment)
              FileUtils.mkdir_p(pipeline_dest_dir)
              pipeline_filename = File.join("concourse-generated-pipeline","concourse","pipelines","#{pipeline_name}.yml")
              FileUtils.cp(pipeline_filename, pipeline_dest_dir) if File.exist?(pipeline_filename)
            end
            EOF
            ruby copy_pipelines.rb
            echo "Filtering pipelines:"
            cat << EOF >filter_pipelines.rb
            require 'fileutils'
            require 'yaml'
            Dir[File.join("selected-pipelines","**","*.yml")].each do |file_path|
              file_content = YAML.load_file(file_path, aliases: true)
              if file_content["jobs"]&.fetch(0)&.fetch("name") == "this-is-an-empty-pipeline"
               puts " deleting empty pipeline: #{file_path}";
               FileUtils.rm(file_path)
              else
               puts " keeping #{file_path}"
              end
            end
            EOF
            ruby filter_pipelines.rb
      params:
        ROOT_DEPLOYMENT: simple-depls
    - task: format-pipelines
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: teliaoss/concourse-fly
            tag: "20210905"
        inputs:
          - name: selected-pipelines
        outputs:
          - name: formated-pipelines
        run:
          path: /bin/sh
          args:
            - -ec
            - |
              echo "We use fly $(fly --version) to format pipelines"
              cp -rp selected-pipelines/* formated-pipelines/
              find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
    - task: update-git-generated-pipelines
      input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
      output_mapping: {updated-git-resource: generated-pipelines}
      file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
      params:
        COMMIT_MESSAGE: "Generated pipelines update for simple-depls"
        OLD_DIR: "coa/pipelines/generated"
    - put: secrets-writer
      attempts: 6
      params:
        repository: generated-pipelines
        rebase: true
  - name: update-pipeline-shared
    serial: true
    on_failure:
      put: failure-alert
      params:
        channel: ((slack-channel))
        icon_url: https://pbs.twimg.com/profile_images/714899641628753920/3C8UrVPf.jpg
        text: |
          ![failed](https://rawgit.com/orange-cloudfoundry/travis-resource/master/ci/images/concourse-red.png) Failed to deploy [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        username: Concourse
    plan:
      - in_parallel:
          - put: concourse-meta
          - get: paas-templates-limited
            params: { submodules: none, depth: 0 }
            attempts: 4
            trigger: true
          - get: secrets-limited-for-pipeline
            params: { submodules: none, depth: 0 }
            attempts: 4
            trigger: true
          - get: cf-ops-automation
            params: { submodules: none, depth: 0 }
            attempts: 4
            trigger: true
      - task: generate-shared-pipelines
        input_mapping: {scripts-resource: cf-ops-automation,templates-resource: paas-templates-limited,secrets-resource: secrets-limited-for-pipeline}
        output_mapping: {result-dir: concourse-generated-pipeline}
        file: cf-ops-automation/concourse/tasks/generate-shared-pipelines.yml
        params:
          IAAS_TYPE: ((iaas-type))
          PROFILES: ((profiles))
      - task: copy-and-format-pipelines
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: teliaoss/concourse-fly
              tag: "20210905"
          inputs:
            - name: concourse-generated-pipeline
          outputs:
            - name: formated-pipelines
          run:
            path: /bin/sh
            args:
              - -ec
              - |
                pipeline_input_dir="concourse-generated-pipeline/pipelines"
                du -a $pipeline_input_dir
                pipeline_dest_dir="formated-pipelines/main/shared"
                mkdir -p $pipeline_dest_dir
                cp -rp $pipeline_input_dir/* ${pipeline_dest_dir}/
                echo "We use fly $(fly --version) to format pipelines"
                find formated-pipelines -type f -name "*.yml" -print -exec fly format-pipeline -w -c {} \;
      - task: update-git-generated-pipelines
        input_mapping: {reference-resource: secrets-limited-for-pipeline, generated-resource: formated-pipelines}
        output_mapping: {updated-git-resource: generated-pipelines}
        file: cf-ops-automation/concourse/tasks/git_append_a_dir_from_generated/task.yml
        params:
          COMMIT_MESSAGE: "Generated pipelines update for TODO"
          OLD_DIR: "coa/pipelines/generated"
      - put: secrets-writer
        attempts: 6
        params:
          repository: generated-pipelines
          rebase: true
groups:
  - name: all
    jobs: ["*"]
  - name: apps-depls
    jobs:
      - update-pipeline-apps-depls
  - name: delete-depls
    jobs:
      - update-pipeline-delete-depls
  - name: no-dependency-depls
    jobs:
      - update-pipeline-no-dependency-depls
  - name: shared
    jobs:
      - update-pipeline-shared
  - name: simple-depls
    jobs:
      - update-pipeline-simple-depls
