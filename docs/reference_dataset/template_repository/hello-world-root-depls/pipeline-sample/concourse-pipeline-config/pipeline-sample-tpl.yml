---
resources:
- name: (( grab secrets.release-name ))
  type: git
  source:
    uri: (( grab secrets.release-uri ))
    username: (( grab secrets.git-username ))
    password: (( grab secrets.git-password ))
    paths: [(( concat "releases/" secrets.release-name "/index.yml" ))]
- name: (( concat secrets.release-name "-s3" ))
  type: s3
  source:
    bucket: (( grab secrets.s3-br-bucket ))
    region_name: (( grab secrets.s3-br-region-name ))
    regexp: (( concat secrets.github-orga "/" secrets.release-name "-(.*).tgz" ))
    access_key_id: (( grab secrets.s3-br-access-key-id ))
    secret_access_key: (( grab secrets.s3-br-secret-key ))
    endpoint: (( grab secrets.s3-br-endpoint ))
    skip_ssl_verification: (( grab secrets.s3-br-skip-ssl-verification ))
- name: (( concat "latest-" secrets.release-name "-s3" ))
  type: s3
  source:
    bucket: (( grab secrets.s3-br-bucket ))
    region_name: (( grab secrets.s3-br-region-name ))
    regexp: (( concat secrets.github-orga "/" secrets.release-name "-(.*).tgz" ))
    access_key_id: (( grab secrets.s3-br-access-key-id ))
    secret_access_key: (( grab secrets.s3-br-secret-key ))
    endpoint: (( grab secrets.s3-br-endpoint ))
    skip_ssl_verification: (( grab secrets.s3-br-skip-ssl-verification ))

jobs:
- name: (( concat "upload-" secrets.release-name "-" secrets.release-version "-boshrelease-to-s3" ))
  plan:
    - aggregate:
      - get: (( grab secrets.release-name ))
        attempts: 2
    - task: create-boshrelease-tarball
      input_mapping: {release: (( grab secrets.release-name ))}
      output_mapping: {result-dir: result-dir}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-image-repository))
            tag: ((docker-image-tag))
        inputs:
          - name: release
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - (( concat "cd release && bosh create-release releases/" secrets.release-name "/" secrets.release-name "-" secrets.release-version ".yml --tarball ../result-dir/" secrets.release-name "-" secrets.release-version ".tgz" ))
    - put: (( concat secrets.release-name "-s3" ))
      params:
        file: (( concat "result-dir/" secrets.release-name "-" secrets.release-version ".tgz" ))
        acl: public-read

- name: (( concat "upload-latest-" secrets.release-name "-boshrelease-to-s3" ))
  plan:
    - aggregate:
      - get: (( grab secrets.release-name ))
        attempts: 2
        trigger: true
    - task: evalulate-boshrelease-latest-versions
      input_mapping: {release: (( grab secrets.release-name ))}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-image-repository))
            tag: ((docker-image-tag))
        inputs:
          - name: release
        outputs:
          - name: release-version
        run:
          path: sh
          args:
          - -exc
          - |
            echo "require 'yaml'; puts YAML.load_file('release/releases/' + ENV['RELEASE_NAME'] + '/index.yml')['builds'].sort_by { |sha, info| info['version'].to_i }.last[1]['version']" > get_version.rb
            ruby get_version.rb > release-version/version
        params:
          RELEASE_NAME: (( grab secrets.release-name ))

    - task: create-boshrelease-tarball
      input_mapping: {release: (( grab secrets.release-name ))}
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-image-repository))
            tag: ((docker-image-tag))
        inputs:
          - name: release
          - name: release-version
        outputs:
          - name: result-dir
        run:
          path: sh
          args:
          - -exc
          - (( concat "cd release && RELEASE_VERSION=$(cat ../release-version/version) && bosh create-release releases/" secrets.release-name "/" secrets.release-name "-${RELEASE_VERSION}.yml --tarball ../result-dir/" secrets.release-name "-${RELEASE_VERSION}.tgz" ))

    - put: (( concat "latest-" secrets.release-name "-s3" ))
      params:
        file: (( concat "result-dir/" secrets.release-name "-*.tgz" ))
        acl: public-read

- name: validate-secrets-injection-((coa-config-key))
  plan:
    - get: (( grab secrets.release-name ))
      trigger: true