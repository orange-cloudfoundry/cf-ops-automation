
---
meta:
  tasks:
    - &on_failure
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
display:
  background_image: ((background-image-url))
resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: bosh-deployment-v2
  type: registry-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
    tag: v2.12.0
- name: bosh-errand
  type: registry-image
  source:
    repository: cfcommunity/bosh2-errand-resource
    tag: v0.1.2
- name: meta
  type: registry-image
  source:
    repository: olhtbr/metadata-resource
    tag: 2.0.1
resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: secrets-hello-world-root-depls-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "hello-world-root-depls/ci-deployment-overview.yml", "hello-world-root-depls/secrets", "shared", "hello-world-root-depls/terraform-config"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-hello-world-root-depls
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "hello-world-root-depls/root-deployment.yml", "hello-world-root-depls/template", "hello-world-root-depls/terraform-config"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true
- name: ((stemcell-main-name))
  type: bosh-io-stemcell
  icon: home-floor-g
  source:
    name: ((stemcell-name-prefix))((stemcell-main-name))
  version: { version: "((stemcell.version))" }
- name: secrets-bosh-deployment-sample
  icon: source-merge
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["hello-world-root-depls/bosh-deployment-sample", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-bosh-deployment-sample
  icon: home-edit
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["hello-world-root-depls/bosh-deployment-sample", "meta-inf.yml", "shared-files", "hello-world-root-depls/root-deployment.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: bosh-deployment-sample-deployment
  icon: cube-send
  type: bosh-deployment-v2
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: "((bosh-password))"
    deployment: bosh-deployment-sample
    ca_cert: 
- name: secrets-hello-world-root-depls-trigger
  icon: source-commit
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "hello-world-root-depls", "shared", "hello-world-root-depls/terraform-config"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-hello-world-root-depls-versions
  icon: home-thermometer
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["hello-world-root-depls/root-deployment.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: paas-templates-full
  icon: home-assistant
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: nginx
  type: git
  icon:  github-circle
  source:
    uri: https://github.com/cloudfoundry-community/nginx-release
    tag_filter: ((releases.nginx.version))
    skip_ssl_verification: false
#    access_token: ((bot-github-access-token))
  version: { ref: ((releases.nginx.version)) }
- name: ntp
  type: git
  icon:  github-circle
  source:
    uri: https://github.com/cloudfoundry-community/ntp-release
    tag_filter: ((releases.ntp.version))
    skip_ssl_verification: false
#    access_token: ((bot-github-access-token))
  version: { ref: ((releases.ntp.version)) }
- name: vault
  type: git
  icon:  github-circle
  source:
    uri: https://github.com/cloudfoundry-community/vault-boshrelease
    tag_filter: v((releases.vault.version))
    skip_ssl_verification: false
#    access_token: ((bot-github-access-token))
  version: { ref: v((releases.vault.version)) }
jobs:
- name: push-boshreleases
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
      - get : secrets-hello-world-root-depls-limited
        params: { submodules: none, depth: 0 }
      - get: paas-templates-hello-world-root-depls
        params: { submodules: none, depth: 0 }
        trigger: true
    - task: repackage-releases
      input_mapping: { templates-resource: paas-templates-hello-world-root-depls, secrets: secrets-hello-world-root-depls-limited }
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_TARGET: ((bosh-target))
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ROOT_DEPLOYMENT_NAME: hello-world-root-depls
    - task: repackage-releases-fallback
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases_fallback/task.yml
    - task: upload-to-director
      input_mapping: { releases-to-upload: repackaged-releases-fallback, config-resource: secrets-hello-world-root-depls-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_releases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
    - task: check-repackaging-errors
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: elpaasoci/curl-ssl
            tag: e3520d05ad3ff8564810ba75f148d9426a7ebe8b
        inputs:
          - name: repackaged-releases-fallback
        run:
          path: sh
          args:
            - -ec
            - |
              cd repackaged-releases-fallback
              if [ -e fallback-fixes.yml ]; then
              echo "=========================================================="
                echo "Dump fallback-fixes"
                cat fallback-fixes.yml
              fi
              echo "=========================================================="
              if [ -e fallback-errors.yml ]; then
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                echo "Dump fallback-errors"
                cat fallback-errors.yml
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                exit 1
              elif [ -e errors.yml ]; then
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                echo "Dump errors"
                cat errors.yml
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                exit 1
              else
                echo "No errors detected"
              fi
- name: upload-stemcell-to-director
  on_failure: *on_failure
  plan:
    - in_parallel:
        - get: cf-ops-automation
          attempts: 2
          params: { submodules: none }
          trigger: true
        - get : secrets-hello-world-root-depls-limited
          attempts: 2
          params: { submodules: none }
        - get: ((stemcell-main-name))
          trigger: true
          attempts: 2
        - get: paas-templates-hello-world-root-depls
          attempts: 2
          params: { submodules: none }
          trigger: true
    - task: download-stemcell
      attempts: 2
      input_mapping: { templates-resource: paas-templates-hello-world-root-depls }
      output_mapping: { stemcell: ((stemcell-main-name)) }
      file:  cf-ops-automation/concourse/tasks/download_stemcell/task.yml
      params:
        VERSIONS_FILE: templates-resource/hello-world-root-depls/root-deployment.yml
        STEMCELL_PREFIX: ((stemcell-name-prefix))
        STEMCELL_MAIN_NAME: ((stemcell-main-name))
        STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells
    - task: upload-to-director
      attempts: 2
      input_mapping: { stemcell: ((stemcell-main-name)), config-resource: secrets-hello-world-root-depls-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_stemcell/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
- name: cancel-all-bosh-tasks
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
    - get : secrets-hello-world-root-depls-limited
      params: { submodules: none, depth: 0 }
  - task: cancel-all-bosh-tasks
    input_mapping: { scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited }
    file:  cf-ops-automation/concourse/tasks/bosh_cancel_all_tasks/task.yml
    params:
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: ((bosh-password))
      BOSH_TARGET: ((bosh-target))
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: delete-deployments-review
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: paas-templates-full
        params: { submodules: none, depth: 0 }
      - get: secrets-hello-world-root-depls-trigger
        version: every
        trigger: true
        params: { submodules: none, depth: 0 }
    - task: prepare-deployment-to-be-deleted
      input_mapping: {scripts-resource: cf-ops-automation, config-resource: secrets-hello-world-root-depls-trigger}
      file: cf-ops-automation/concourse/tasks/bosh_delete_plan/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: hello-world-root-depls
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_TARGET: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
- name: approve-and-delete-disabled-deployments
  serial: true
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
        passed: [delete-deployments-review]
      - get: secrets-hello-world-root-depls-trigger
        params: { submodules: none, depth: 0 }
        passed: [delete-deployments-review]
      - put: concourse-meta
    - task: delete-deployments
      input_mapping: {scripts-resource: cf-ops-automation, config-resource: secrets-hello-world-root-depls-trigger}
      output_mapping: {output-config-resource: updated-config-resource}
      file: cf-ops-automation/concourse/tasks/bosh_delete_apply/task.yml
      params:
        ROOT_DEPLOYMENT_NAME: hello-world-root-depls
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
        COMMIT_MESSAGE: "${ROOT_DEPLOYMENT_NAME}: Automated Bosh and Secrets Cleanup"
      ensure:
        do:
        - put: secrets-full-writer
          attempts: 2
          get_params: { submodules: none, depth: 0 }
          params:
            repository: updated-config-resource
            rebase: true
- name: execute-deploy-script
  serial: true
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: secrets-hello-world-root-depls-limited
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: paas-templates-hello-world-root-depls
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
    - task: run-deploy.sh
      input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-hello-world-root-depls, secrets: secrets-hello-world-root-depls-limited}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: hello-world-root-depls/template
        COMMON_SCRIPT_DIR: scripts-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: cloud-config-and-runtime-config-for-hello-world-root-depls
  serial: true
  on_failure: *on_failure
  plan:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: secrets-hello-world-root-depls-limited
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: paas-templates-hello-world-root-depls
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - task: generate-hello-world-root-depls-all-config
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
      output_mapping: {generated-files: config-manifest}
      file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/hello-world-root-depls/
        YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/template
        YML_FILES: |
            ./credentials-resource/hello-world-root-depls/secrets/meta.yml
            ./credentials-resource/hello-world-root-depls/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
            ./additional-resource/meta-inf.yml
        CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/template
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
    - in_parallel:
      - task: update-cloud-config-for-hello-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-cloud-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          CONFIG_TYPE: cloud
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-cloud-config
            attempts: 2
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cloud-config}
            output_mapping: {updated-git-resource: updated-cloud-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "hello-world-root-depls/cloud-config.yml"
              NEW_FILE: "cloud-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "hello-world-root-depls cloud-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 2
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-cloud-config
              rebase: true
      - task: update-runtime-config-for-hello-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-runtime-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: "((bosh-password))"
           BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
           CONFIG_TYPE: runtime
           CREDHUB_SERVER: ((credhub-server))
           CREDHUB_CLIENT: ((credhub-client))
           CREDHUB_SECRET: "((credhub-secret))"
           CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-runtime-config
            attempts: 2
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-runtime-config}
            output_mapping: {updated-git-resource: updated-runtime-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "hello-world-root-depls/runtime-config.yml"
              NEW_FILE: "runtime-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "hello-world-root-depls runtime-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 2
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-runtime-config
              rebase: true
      - task: update-cpi-config-for-hello-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-cpi-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          CONFIG_TYPE: cpi
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-cpi-config
            attempts: 2
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cpi-config}
            output_mapping: {updated-git-resource: updated-cpi-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "hello-world-root-depls/cpi-config.yml"
              NEW_FILE: "cpi-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "hello-world-root-depls cpi-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 2
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-cpi-config
              rebase: true
- name: deploy-bosh-deployment-sample
  serial: true
  serial_groups: [concurrent-group-0]
  on_failure: *on_failure
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: ((stemcell-main-name))
      passed: [ upload-stemcell-to-director ]
      trigger: true
      params:
        tarball: false
      attempts: 2
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: nginx
      trigger: true
      params:
        tarball: false
      attempts: 2
    - get: ntp
      trigger: true
      params:
        tarball: false
      attempts: 2
    - get: vault
      trigger: true
      params:
        tarball: false
      attempts: 2
    - get: secrets-bosh-deployment-sample
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: paas-templates-bosh-deployment-sample
      trigger: true
      params:
        submodules: none
        submodule_recursive: "false" # this must be a string
        depth: 0
  - task: check-configuration
    input_mapping:
      scripts-resource: cf-ops-automation
      config-resource: secrets-bosh-deployment-sample
      templates-resource: paas-templates-bosh-deployment-sample
    output_mapping: {check-configuration-result: check-configuration-result}
    file: cf-ops-automation/concourse/tasks/check_configuration/task.yml
    params:
      ROOT_DEPLOYMENT: hello-world-root-depls
      DEPLOYMENT: bosh-deployment-sample
      SCAN_PATHS: hello-world-root-depls/bosh-deployment-sample meta-inf.yml shared-files
      GIT_SUBMODULES: 
      LOCAL_SECRETS_SCAN: true
  - task: generate-bosh-deployment-sample-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: paas-templates-bosh-deployment-sample
    output_mapping: {generated-files: release-manifest}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/hello-world-root-depls/bosh-deployment-sample/
      YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/bosh-deployment-sample/template
      YML_FILES: |
          ./credentials-resource/hello-world-root-depls/bosh-deployment-sample/secrets/meta.yml
          ./credentials-resource/hello-world-root-depls/bosh-deployment-sample/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/bosh-deployment-sample/template
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: execute-bosh-deployment-sample-pre-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-bosh-deployment-sample
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: release-manifest
    output_mapping: {generated-files: pre-bosh-deploy-resource}
    file: cf-ops-automation/concourse/tasks/pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/hello-world-root-depls/bosh-deployment-sample/template
      SECRETS_DIR: credentials-resource/hello-world-root-depls/bosh-deployment-sample
  - task: copy-bosh-deployment-sample-required-files
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-bosh-deployment-sample
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: pre-bosh-deploy-resource
    output_mapping: {generated-files: final-release-manifest}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/hello-world-root-depls/bosh-deployment-sample/template
      SECRETS_DIR: credentials-resource/hello-world-root-depls/bosh-deployment-sample
      MANIFEST_NAME: bosh-deployment-sample.yml
  - task: generate-coa-ops-and-vars-files
    input_mapping: {template-resource: paas-templates-bosh-deployment-sample}
    output_mapping: {result-dir: ops-and-vars-files}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: elpaasoci/curl-ssl
          tag: e3520d05ad3ff8564810ba75f148d9426a7ebe8b
      inputs:
        - name: final-release-manifest
        - name: template-resource
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          mkdir -p result-dir/operators
          mkdir -p result-dir/vars
          find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
          find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
          echo "Generating '0-coa-templates-reference-operators.yml'"
          {
            echo '- type: replace'
            echo '  path: /tags?/coa-templates-commit-id?'
            echo '  value: "((''coa-templates-commit-id))"'
            echo '- type: replace'
            echo '  path: /tags?/coa-templates-commit-author?'
            echo '  value: "((''coa-templates-commit-author))"'
          } > result-dir/operators/0-coa-templates-reference-operators.yml
          echo "Done - file '0-coa-templates-reference-operators.yml'"
          echo "Generating '0-coa-templates-reference-vars.yml'"
          {
            echo 'coa-templates-commit-id: "'"$(cat  template-resource/.git/ref)"'"'
            echo 'coa-templates-commit-author: "'"$(cat template-resource/.git/committer)"'"'
          } > result-dir/vars/0-coa-templates-reference-vars.yml
          echo "Done - file '0-coa-templates-reference-vars.yml'"
          echo "Generating '0-coa-metadata-vars.yml'"
          {
            echo 'paas_templates_commit_id: "'"$(cat  template-resource/.git/ref)"'"'
            echo 'coa_root_deployment_name: "'"${ROOT_DEPLOYMENT_NAME}"'"'
            echo 'coa_deployment_name: "'"${DEPLOYMENT_NAME}"'"'
            echo 'iaas_type: "'"${IAAS_TYPE}"'"'
            echo 'profiles: "'"${PROFILES}"'"'
          } > result-dir/vars/0-coa-metadata-vars.yml
          echo "Done - file '0-coa-metadata-vars.yml'"
      params:
        PROFILES: ((profiles))
        IAAS_TYPE: ((iaas-type))
        ROOT_DEPLOYMENT_NAME: hello-world-root-depls
        DEPLOYMENT_NAME: bosh-deployment-sample
  - task: display-bosh-deployment-sample-manifest
    input_mapping:
      bosh-inputs: ops-and-vars-files
      manifest-dir: final-release-manifest
      secrets: secrets-bosh-deployment-sample
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: interpolated-manifest }
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
       VARS_FILES_SUFFIX: "*/*vars.yml"
       OPS_FILES_SUFFIX:  "*/*operators.yml"
       BOSH_YAML_FILE: bosh-deployment-sample.yml
  - task: resolve-manifest-latest-versions
    input_mapping:
      templates-resource: paas-templates-bosh-deployment-sample
      manifest-dir: interpolated-manifest
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: resolved-manifest-versions }
    file: cf-ops-automation/concourse/tasks/resolve_manifest_versions/task.yml
    params:
      STEMCELL_NAME: ((stemcell-main-name))
      STEMCELL_OS: 
      VERSIONS_FILE:  templates-resource/hello-world-root-depls/root-deployment.yml
      MANIFEST_YAML_FILE: manifest-dir/interpolated-bosh-deployment-sample.yml
      DEPLOYMENT_NAME: bosh-deployment-sample
      DOWNLOAD_SERVER_URL: https://bosh.io/d/github.com/
      OFFLINE_MODE_ENABLED: false
      PRECOMPILE_MODE_ENABLED: true
      LOCK_RELEASES: false
  - put: bosh-deployment-sample-deployment
    attempts: 2
    on_failure:
      do:
        - task: update-bosh-deployment-sample-files
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: resolved-manifest-versions}
          output_mapping: {updated-git-resource: failed-bosh-deployment-sample-secrets}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: hello-world-root-depls/bosh-deployment-sample/bosh-deployment-sample-last-deployment-failure.yml
            NEW_FILE: "bosh-deployment-sample.yml"
            PROFILES: ((profiles))
            COMMIT_MESSAGE: "Failed to deploy bosh-deployment-sample manifest\n\nActive profiles: ${PROFILES}\n[skip ci]"
        - put: secrets-full-writer
          attempts: 2
          get_params: { submodules: none, depth: 0 }
          params:
            repository: failed-bosh-deployment-sample-secrets
            rebase: true
    params:
      manifest: resolved-manifest-versions/bosh-deployment-sample.yml
      cleanup: true
      no_redact: false
      dry_run: false
      fix: false
      recreate: true
      skip_drain: ["ngnix"]
  - task: bosh-variables
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-full-writer}
    output_mapping: {result-dir: bosh-variables-result}
    file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
    params:
      BOSH_DEPLOYMENT: bosh-deployment-sample
      BOSH_TARGET: ((bosh-target))
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: "((bosh-password))"
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
  - task: update-bosh-deployment-sample-fingerprints-file
    input_mapping: {reference-resource: secrets-full-writer, generated-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-bosh-deployment-sample-fingerprints-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: hello-world-root-depls/bosh-deployment-sample/bosh-deployment-sample-fingerprints.json
      NEW_FILE: "credential_fingerprints.json"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "bosh-deployment-sample variable fingerprints auto update.\nDeployment information: $(cat generated-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - task: update-bosh-deployment-sample-files
    input_mapping: {reference-resource: updated-bosh-deployment-sample-fingerprints-secrets, generated-resource: bosh-deployment-sample-deployment, additional-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-bosh-deployment-sample-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: hello-world-root-depls/bosh-deployment-sample/bosh-deployment-sample.yml
      NEW_FILE: "manifest.yml"
      PROFILES: ((profiles))
      COMMIT_MESSAGE: "bosh-deployment-sample generated manifest auto update.\nDeployment information: $(cat additional-resource/deployment_information.txt)\nActive profiles: ${PROFILES}\n[skip ci]"
  - put: secrets-full-writer
    attempts: 2
    get_params: { submodules: none, depth: 0 }
    params:
      repository: updated-bosh-deployment-sample-secrets
      rebase: true
  - task: execute-bosh-deployment-sample-post-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-bosh-deployment-sample
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: final-release-manifest
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/hello-world-root-depls/bosh-deployment-sample/template
      SECRETS_DIR: credentials-resource/hello-world-root-depls/bosh-deployment-sample
- name: retrigger-all-jobs
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
    - get: secrets-hello-world-root-depls-trigger
      params: { submodules: none, depth: 0 }
  - task: generate-hello-world-root-depls-pipeline
    output_mapping: {result-dir: trigger-hello-world-root-depls-plan}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: elpaasoci/curl-ssl
          tag: e3520d05ad3ff8564810ba75f148d9426a7ebe8b
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-bosh-deployment-sample" >> result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: hello-world-root-depls-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-hello-world-root-depls-plan}
    output_mapping: {flight-report: concourse-hello-world-root-depls-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-hello-world-root-depls-target))
      FLY_USERNAME: ((concourse-hello-world-root-depls-username))
      FLY_PASSWORD: "((concourse-hello-world-root-depls-password))"
      FLY_TEAM: hello-world-root-depls
- name: init-concourse-boshrelease-and-stemcell-for-hello-world-root-depls
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      attempts: 2
#      trigger: true
    - get: secrets-hello-world-root-depls-trigger
      params: { submodules: none, depth: 0 }
      attempts: 2
    - get: paas-templates-hello-world-root-depls-versions
      params: { submodules: none, depth: 0 }
      attempts: 2
      trigger: true
  - task: generate-hello-world-root-depls-flight-plan
    output_mapping: {result-dir: init-hello-world-root-depls-plan}
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: elpaasoci/curl-ssl
          tag: e3520d05ad3ff8564810ba75f148d9426a7ebe8b
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          echo "check-resource -r $BUILD_PIPELINE_NAME/nginx --from tag:((releases.nginx.version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/ntp --from tag:((releases.ntp.version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/vault --from tag:v((releases.vault.version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from version:((stemcell.version))" | tee -a result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: hello-world-root-depls-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: init-hello-world-root-depls-plan}
    output_mapping: {flight-report: concourse-hello-world-root-depls-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-hello-world-root-depls-target))
      FLY_USERNAME: ((concourse-hello-world-root-depls-username))
      FLY_PASSWORD: "((concourse-hello-world-root-depls-password))"
      FLY_TEAM: hello-world-root-depls
- name: check-terraform-is-applied
  serial: true
  serial_groups: [terraform-applied]
  on_failure: *on_failure
  plan:
    - in_parallel:
        - get: cf-ops-automation
          params: { submodules: none, depth: 0 }
          trigger: true
        - get: paas-templates-hello-world-root-depls
          params: { submodules: none, depth: 0 }
          trigger: true
        - get: secrets-hello-world-root-depls-limited
          params: { submodules: none, depth: 0 }
          trigger: true
    - task: generate-terraform-tfvars
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
      output_mapping: {generated-files: terraform-tfvars}
      file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
      params:
        YML_FILES: |
          ./credentials-resource/shared/secrets.yml
          ./credentials-resource/hello-world-root-depls/terraform-config/secrets/meta.yml
          ./credentials-resource/hello-world-root-depls/terraform-config/secrets/secrets.yml
          ./additional-resource/meta-inf.yml
        YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/terraform-config/template
        CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/terraform-config/template
        SUFFIX: -tpl.tfvars.yml
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
    - task: terraform-plan
      input_mapping: {secret-state-resource: secrets-hello-world-root-depls-limited,spec-resource: paas-templates-hello-world-root-depls}
      file: cf-ops-automation/concourse/tasks/terraform_plan_cloudfoundry.yml
      params:
        FAIL_ON_DIFF: true
        SPEC_PATH: "hello-world-root-depls/terraform-config/spec"
        SECRET_STATE_FILE_PATH: "hello-world-root-depls/terraform-config"
        IAAS_SPEC_PATH: "hello-world-root-depls/terraform-config/spec-((iaas-type))"
        PROFILES_SPEC_PATH_PREFIX: "hello-world-root-depls/terraform-config/spec-"
        PROFILES: ((profiles))
- name: check-terraform-consistency
  serial: true
  serial_groups: [terraform-consistency]
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: paas-templates-hello-world-root-depls
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: secrets-hello-world-root-depls-limited
      params: { submodules: none, depth: 0 }
      trigger: true
  - task: generate-terraform-tfvars
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
    output_mapping: {generated-files: terraform-tfvars}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      YML_FILES: |
        ./credentials-resource/shared/secrets.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/meta.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/secrets.yml
        ./additional-resource/meta-inf.yml
      YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      SUFFIX: -tpl.tfvars.yml
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: terraform-plan
    input_mapping: {secret-state-resource: secrets-hello-world-root-depls-limited,spec-resource: paas-templates-hello-world-root-depls}
    file: cf-ops-automation/concourse/tasks/terraform_plan_cloudfoundry.yml
    params:
      SPEC_PATH: "hello-world-root-depls/terraform-config/spec"
      SECRET_STATE_FILE_PATH: "hello-world-root-depls/terraform-config"
      IAAS_SPEC_PATH: "hello-world-root-depls/terraform-config/spec-((iaas-type))"
      PROFILES_SPEC_PATH_PREFIX: "hello-world-root-depls/terraform-config/spec-"
      PROFILES: ((profiles))
- name: approve-and-enforce-terraform-consistency
  serial: true
  serial_groups: [terraform-consistency, terraform-applied]
  on_failure: *on_failure
  plan:
  - in_parallel:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      passed: [check-terraform-consistency]
    - get: paas-templates-hello-world-root-depls
      params: { submodules: none, depth: 0 }
      passed: [check-terraform-consistency]
      trigger: false
    - get: secrets-hello-world-root-depls-limited
      params: { submodules: none, depth: 0 }
      passed: [check-terraform-consistency]
  - task: generate-terraform-tfvars
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
    output_mapping: {generated-files: terraform-tfvars}
    file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
    params:
      YML_FILES: |
        ./credentials-resource/shared/secrets.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/meta.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/secrets.yml
        ./additional-resource/meta-inf.yml
      YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      SUFFIX: -tpl.tfvars.yml
      IAAS_TYPE: ((iaas-type))
      PROFILES: ((profiles))
  - task: terraform-apply
    input_mapping: {secret-state-resource: secrets-hello-world-root-depls-limited,spec-resource: paas-templates-hello-world-root-depls}
    output_mapping: {generated-files: terraform-cf}
    file: cf-ops-automation/concourse/tasks/terraform_apply_cloudfoundry.yml
    params:
      SPEC_PATH: "hello-world-root-depls/terraform-config/spec"
      SECRET_STATE_FILE_PATH: "hello-world-root-depls/terraform-config"
      IAAS_SPEC_PATH: "hello-world-root-depls/terraform-config/spec-((iaas-type))"
      PROFILES_SPEC_PATH_PREFIX: "hello-world-root-depls/terraform-config/spec-"
      PROFILES: ((profiles))
    ensure:
      do:
      - task: update-terraform-state-file
        input_mapping: {reference-resource: secrets-full-writer, generated-resource: terraform-cf}
        output_mapping: {updated-git-resource: updated-terraform-state-secrets}
        file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
        params:
          OLD_FILE: "hello-world-root-depls/terraform-config/terraform.tfstate"
          NEW_FILE: "terraform.tfstate"
          PROFILES: ((profiles))
          COMMIT_MESSAGE: "Terraform TFState auto update\n\nActive profiles: ${PROFILES}"
      - put: secrets-full-writer
        attempts: 2
        get_params: { submodules: none, depth: 0 }
        params:
          repository: updated-terraform-state-secrets
          rebase: true
groups:
- name: hello-world-root-depls
  jobs:
    - "*"
- name: deploy-b
  jobs:
    - deploy-bosh-deployment-sample
- name: terraform
  jobs:
    - approve-and-enforce-terraform-consistency
    - check-terraform-consistency
    - check-terraform-is-applied
- name: utils
  jobs:
    - approve-and-delete-disabled-deployments
    - cancel-all-bosh-tasks
    - cloud-config-and-runtime-config-for-hello-world-root-depls
    - delete-deployments-review
    - execute-deploy-script
    - init-concourse-boshrelease-and-stemcell-for-hello-world-root-depls
    - push-boshreleases
    - retrigger-all-jobs
    - upload-stemcell-to-director
