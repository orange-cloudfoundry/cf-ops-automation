
---
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: ((docker-registry-url))cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: bosh-deployment-v2
  type: docker-image
  source:
    repository: ((docker-registry-url))cloudfoundry/bosh-deployment-resource
    tag: v2.12.0
- name: bosh-errand
  type: docker-image
  source:
    repository: ((docker-registry-url))cfcommunity/bosh2-errand-resource
    tag: v0.1.2
- name: meta
  type: docker-image
  source:
    repository: ((docker-registry-url))swce/metadata-resource
    tag: release-v0.0.3
resources:
- name: concourse-meta
  type: meta
- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: secrets-hello-world-root-depls-limited
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "hello-world-root-depls/ci-deployment-overview.yml", "hello-world-root-depls/secrets", "shared", "hello-world-root-depls/terraform-config"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: secrets-full-writer
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-hello-world-root-depls
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "hello-world-root-depls/template", "hello-world-root-depls/terraform-config"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: cf-ops-automation
  type: git
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true
- name: ((stemcell-main-name))
  type: bosh-io-stemcell
  source:
    name: ((stemcell-name-prefix))((stemcell-main-name))
  version: { version: "((stemcell-version))" }
- name: secrets-bosh-deployment-sample
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["hello-world-root-depls/bosh-deployment-sample", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-bosh-deployment-sample
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["hello-world-root-depls/bosh-deployment-sample", "shared-files"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: bosh-deployment-sample-deployment
  type: bosh-deployment-v2
  source:
    target: ((bosh-target))
    client: ((bosh-username))
    client_secret: "((bosh-password))"
    deployment: bosh-deployment-sample
    ca_cert: 
- name: secrets-hello-world-root-depls-trigger
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "hello-world-root-depls", "shared", "hello-world-root-depls/terraform-config"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-hello-world-root-depls-versions
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["hello-world-root-depls/hello-world-root-depls-versions.yml"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: paas-templates-full
  type: git
  source:
    uri: ((paas-templates-uri))
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: ntp
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/ntp-release
- name: vault
  type: github-release
  source:
    user: cloudfoundry-community
    repository: vault-boshrelease
    access_token: ((bot-github-access-token))
#  version: tag:( (-version) ) # FIXME https://github.com/concourse/concourse/issues/3990
jobs:
- name: cancel-all-bosh-tasks
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none }
    - get : secrets-hello-world-root-depls-limited
      params: { submodules: none }
  - task: cancel-all-bosh-tasks
    input_mapping: { scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited }
    file:  cf-ops-automation/concourse/tasks/bosh_cancel_all_tasks/task.yml
    params:
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: ((bosh-password))
      BOSH_TARGET: ((bosh-target))
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: delete-deployments-review
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none}
        trigger: true
      - get: paas-templates-full
        params: { submodules: none}
      - get: secrets-hello-world-root-depls-trigger
        version: every
        trigger: true
        params: { submodules: none}
    - task: prepare_deployment_to_be_deleted
      input_mapping: {scripts-resource: cf-ops-automation}
      file: cf-ops-automation/concourse/tasks/bosh_delete_plan/task.yml
      params:
        DEPLOYMENTS_TO_DELETE: "dummy terraform-sample to-delete-bosh-deployment-sample"
- name: approve-and-delete-disabled-deployments
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none}
        passed: [delete-deployments-review]
      - get: secrets-hello-world-root-depls-trigger
        params: { submodules: none}
        passed: [delete-deployments-review]
    - task: delete_deployments
      input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-trigger}
      file: cf-ops-automation/concourse/tasks/bosh_delete_apply/task.yml
      params:
         BOSH_TARGET: ((bosh-target))
         BOSH_CLIENT: ((bosh-username))
         BOSH_CLIENT_SECRET: "((bosh-password))"
         BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
         DEPLOYMENTS_TO_DELETE: "dummy terraform-sample to-delete-bosh-deployment-sample"
- name: execute-deploy-script
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - in_parallel:
      - get: secrets-hello-world-root-depls-limited
        params: { submodules: none}
        trigger: true
      - get: paas-templates-hello-world-root-depls
        params: { submodules: none}
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none}
    - task: run-deploy.sh
      input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-hello-world-root-depls, secrets: secrets-hello-world-root-depls-limited}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: hello-world-root-depls/template
        COMMON_SCRIPT_DIR: scripts-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: cloud-config-and-runtime-config-for-hello-world-root-depls
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
    - get: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none}
    - get: secrets-hello-world-root-depls-limited
      params: { submodules: none}
      trigger: true
    - get: paas-templates-hello-world-root-depls
      params: { submodules: none}
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none}
      trigger: true
    - task: generate-hello-world-root-depls-all-config
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
      output_mapping: {generated-files: config-manifest}
      file: cf-ops-automation/concourse/tasks/generate-manifest.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/hello-world-root-depls/
        YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/template
        YML_FILES: |
            ./credentials-resource/hello-world-root-depls/secrets/meta.yml
            ./credentials-resource/hello-world-root-depls/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
            ./additional-resource/meta-inf.yml
        CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/template
        IAAS_TYPE: ((iaas-type))
    - in_parallel:
      - task: update-cloud-config-for-hello-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-cloud-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: "((bosh-password))"
           BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          task: update-cloud-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cloud-config}
          output_mapping: {updated-git-resource: updated-cloud-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "hello-world-root-depls/cloud-config.yml"
            NEW_FILE: "cloud-config.yml"
            COMMIT_MESSAGE: "hello-world-root-depls cloud-config auto update - [skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: {submodules: none}
            params:
              repository: updated-cloud-config
              rebase: true
      - task: update-runtime-config-for-hello-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-runtime-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: "((bosh-password))"
           BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          task: update-runtime-config
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-runtime-config}
          output_mapping: {updated-git-resource: updated-runtime-config}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: "hello-world-root-depls/runtime-config.yml"
            NEW_FILE: "runtime-config.yml"
            COMMIT_MESSAGE: "hello-world-root-depls runtime-config auto update - [skip ci]"
          on_failure:
            put: failure-alert
            params:
              channel: ((slack-channel))
              text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
              icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
              username: Concourse
          on_success:
            put: secrets-full-writer
            get_params: {submodules: none}
            params:
              repository: updated-runtime-config
              rebase: true
- name: deploy-bosh-deployment-sample
  serial: true
  serial_groups: [concurrent-group-0]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none}
    - get: ((stemcell-main-name))
      trigger: true
      attempts: 2
    - get: cf-ops-automation
      params: { submodules: none}
      trigger: true
    - get: ntp
      version: { version: ((ntp-version)) }
      trigger: true
      attempts: 2
    - get: vault
      # vault-version is pinned, see resource declaration. This is disabled for now...
      trigger: true
      attempts: 2
    - get: secrets-bosh-deployment-sample
      params: { submodules: none}
      trigger: true
    - get: paas-templates-bosh-deployment-sample
      trigger: true
      params:
        submodules: none
  - task: check-configuration
    input_mapping:
      scripts-resource: cf-ops-automation
      config-resource: secrets-bosh-deployment-sample
      templates-resource: paas-templates-bosh-deployment-sample
    output_mapping: {check-configuration-result: check-configuration-result}
    file: cf-ops-automation/concourse/tasks/check_configuration/task.yml
    params:
      ROOT_DEPLOYMENT: hello-world-root-depls
      DEPLOYMENT: bosh-deployment-sample
      SCAN_PATHS: hello-world-root-depls/bosh-deployment-sample shared-files
      GIT_SUBMODULES: 
      LOCAL_SECRETS_SCAN: true
  - task: generate-bosh-deployment-sample-manifest
    input_mapping:
      scripts-resource: cf-ops-automation
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: paas-templates-bosh-deployment-sample
    output_mapping: {generated-files: release-manifest}
    file: cf-ops-automation/concourse/tasks/generate-manifest.yml
    params:
      SPRUCE_FILE_BASE_PATH: credentials-resource/hello-world-root-depls/bosh-deployment-sample/
      YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/bosh-deployment-sample/template
      YML_FILES: |
          ./credentials-resource/hello-world-root-depls/bosh-deployment-sample/secrets/meta.yml
          ./credentials-resource/hello-world-root-depls/bosh-deployment-sample/secrets/secrets.yml
          ./credentials-resource/shared/secrets.yml
          ./additional-resource/meta-inf.yml
      CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/bosh-deployment-sample/template
      IAAS_TYPE: ((iaas-type))
  - task: execute-bosh-deployment-sample-spiff-pre-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-bosh-deployment-sample
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: release-manifest
    output_mapping: {generated-files: pre-bosh-deploy-resource}
    file: cf-ops-automation/concourse/tasks/spiff_pre_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/hello-world-root-depls/bosh-deployment-sample/template
      SECRETS_DIR: credentials-resource/hello-world-root-depls/bosh-deployment-sample
  - task: copy-bosh-deployment-sample-required-files
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-bosh-deployment-sample
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: pre-bosh-deploy-resource
    output_mapping: {generated-files: final-release-manifest}
    file: cf-ops-automation/concourse/tasks/copy_deployment_required_files.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/hello-world-root-depls/bosh-deployment-sample/template
      SECRETS_DIR: credentials-resource/hello-world-root-depls/bosh-deployment-sample
      MANIFEST_NAME: bosh-deployment-sample.yml
  - task: convert-bosh-dns-to-ip
    output_mapping: {result-dir: bosh-generated-config}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))concourse/busyboxplus
          tag: "git"
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          export DIRECTOR_IP_URL_WITHOUT_PORT=${BOSH_TARGET%%:25555}
          export DIRECTOR_IP=$(nslookup ${DIRECTOR_IP_URL_WITHOUT_PORT##https://} 2>/dev/null|tail -n2|grep Address|cut -d':' -f2)
          export DIRECTOR_IP_NO_SPACE=$(echo $DIRECTOR_IP |tr -d [:blank:])
          export BOSH_ENVIRONMENT="${DIRECTOR_IP_NO_SPACE}"
          echo '{"target": "'"$BOSH_ENVIRONMENT"'"}' > result-dir/bosh_config.json
      params:
        BOSH_TARGET: ((bosh-target))
  - task: generate-empty-ops-and-vars-files
    # this task is required as long as all deployments still don't use ops/vars files
    output_mapping: {result-dir: ops-and-vars-files}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))concourse/busyboxplus
          tag: "git"
      inputs:
        - name: final-release-manifest
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          mkdir -p result-dir/operators
          mkdir -p result-dir/vars
          find final-release-manifest/ -name "*-operators.yml" -type f -exec cp {} result-dir/operators \;
          find final-release-manifest/ -name "*-vars.yml" -type f -exec cp {} result-dir/vars \;
          echo '---' > result-dir/operators/0-empty-operators.yml
          echo '---' > result-dir/vars/0-empty-vars.yml
  - task: display-bosh-deployment-sample-manifest
    input_mapping:
      bosh-inputs: ops-and-vars-files
      manifest-dir: final-release-manifest
      secrets: secrets-bosh-deployment-sample
      scripts-resource: cf-ops-automation
    output_mapping: { result-dir: interpolated-manifest }
    file: cf-ops-automation/concourse/tasks/bosh_interpolate/task.yml
    params:
       VARS_FILES_SUFFIX: "*/*vars.yml"
       OPS_FILES_SUFFIX:  "*/*operators.yml"
       BOSH_YAML_FILE: bosh-deployment-sample.yml
  - put: bosh-deployment-sample-deployment
    attempts: 2
    on_failure:
      do:
        - task: update-bosh-deployment-sample-files
          input_mapping: {reference-resource: secrets-full-writer, generated-resource: interpolated-manifest}
          output_mapping: {updated-git-resource: failed-bosh-deployment-sample-secrets}
          file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
          params:
            OLD_FILE: hello-world-root-depls/bosh-deployment-sample/bosh-deployment-sample-last-deployment-failure.yml
            NEW_FILE: "interpolated-bosh-deployment-sample.yml"
            COMMIT_MESSAGE: "Failed to deploy bosh-deployment-sample manifest - [skip ci]"
        - put: secrets-full-writer
          get_params: {submodules: none}
          params:
            repository: failed-bosh-deployment-sample-secrets
            rebase: true
    params:
      manifest: final-release-manifest/bosh-deployment-sample.yml
      # source_file: bosh-generated-config/bosh_config.json
      stemcells:
      - ((stemcell-main-name))/stemcell.tgz
      releases: 
      - "ntp/*.tgz"
      - "vault/*.tgz"
      ops_files:
      - ops-and-vars-files/operators/*
      vars_files:
      - ops-and-vars-files/vars/*
      cleanup: true
  - task: bosh-variables
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-full-writer}
    output_mapping: {result-dir: bosh-variables-result}
    file: cf-ops-automation/concourse/tasks/bosh_variables/task.yml
    params:
      BOSH_DEPLOYMENT: bosh-deployment-sample
      BOSH_TARGET: ((bosh-target))
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: "((bosh-password))"
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
  - task: update-bosh-deployment-sample-fingerprints-file
    input_mapping: {reference-resource: secrets-full-writer, generated-resource: bosh-variables-result}
    output_mapping: {updated-git-resource: updated-bosh-deployment-sample-fingerprints-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: hello-world-root-depls/bosh-deployment-sample/bosh-deployment-sample-fingerprints.json
      NEW_FILE: "credential_fingerprints.json"
      COMMIT_MESSAGE: "bosh-deployment-sample variable fingerprints auto update - [skip ci]"
  - task: update-bosh-deployment-sample-files
    input_mapping: {reference-resource: updated-bosh-deployment-sample-fingerprints-secrets, generated-resource: bosh-deployment-sample-deployment}
    output_mapping: {updated-git-resource: updated-bosh-deployment-sample-secrets}
    file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
    params:
      OLD_FILE: hello-world-root-depls/bosh-deployment-sample/bosh-deployment-sample.yml
      NEW_FILE: "manifest.yml"
      COMMIT_MESSAGE: "bosh-deployment-sample generated manifest auto update - [skip ci]"
  - put: secrets-full-writer
    get_params: {submodules: none}
    params:
      repository: updated-bosh-deployment-sample-secrets
      rebase: true
  - task: execute-bosh-deployment-sample-post-bosh-deploy
    input_mapping:
      scripts-resource: cf-ops-automation
      template-resource: paas-templates-bosh-deployment-sample
      credentials-resource: secrets-bosh-deployment-sample
      additional-resource: final-release-manifest
    output_mapping: {generated-files: post-deploy-result}
    file: cf-ops-automation/concourse/tasks/post_bosh_deploy.yml
    params:
      CUSTOM_SCRIPT_DIR: template-resource/hello-world-root-depls/bosh-deployment-sample/template
      SECRETS_DIR: credentials-resource/hello-world-root-depls/bosh-deployment-sample
- name: retrigger-all-jobs
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
    - get: secrets-hello-world-root-depls-trigger
      params: { submodules: none}
  - task: generate-hello-world-root-depls-pipeline
    output_mapping: {result-dir: trigger-hello-world-root-depls-plan}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))concourse/busyboxplus
          tag: "git"
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -exc
        - |
          echo "trigger-job -j $BUILD_PIPELINE_NAME/deploy-bosh-deployment-sample" >> result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: hello-world-root-depls-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: trigger-hello-world-root-depls-plan}
    output_mapping: {flight-report: concourse-hello-world-root-depls-trigger-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-hello-world-root-depls-target))
      FLY_USERNAME: ((concourse-hello-world-root-depls-username))
      FLY_PASSWORD: "((concourse-hello-world-root-depls-password))"
      FLY_TEAM: main
- name: recreate-all
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  serial_groups: [recreate]
  plan:
  - in_parallel:
     - get: secrets-hello-world-root-depls-limited
       params: { submodules: none}
     - get: paas-templates-hello-world-root-depls
       params: { submodules: none}
     - get: cf-ops-automation
       params: { submodules: none}
- name: recreate-bosh-deployment-sample
  serial: true
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  serial_groups: [recreate]
  plan:
  - in_parallel:
     - get: secrets-hello-world-root-depls-limited
       params: { submodules: none}
       passed: [recreate-all]
       trigger: true
     - get: paas-templates-hello-world-root-depls
       params: { submodules: none}
       passed: [recreate-all]
       trigger: true
     - get: cf-ops-automation
       params: { submodules: none}
       passed: [recreate-all]
  - task: bosh-recreate-bosh-deployment-sample
    input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-hello-world-root-depls-limited}
    config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: ((docker-registry-url))governmentpaas/bosh-cli-v2
            tag: 2857fdbaea59594c06cf9c6e32027091b67d4767
        inputs:
          - name: scripts-resource
          - name: secrets
        outputs:
          - name: run-resource
        run:
          path: bash
          args:
            - -e
            - -c
            - |
              source ./scripts-resource/scripts/bosh_cli_v2_login.sh ${BOSH_TARGET}
              bosh -n recreate --fix
    params:
       BOSH_TARGET: ((bosh-target))
       BOSH_CLIENT: ((bosh-username))
       BOSH_CLIENT_SECRET: "((bosh-password))"
       BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
       BOSH_DEPLOYMENT: bosh-deployment-sample
- name: init-concourse-boshrelease-and-stemcell-for-hello-world-root-depls
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
      attempts: 2
#      trigger: true
    - get: secrets-hello-world-root-depls-trigger
      params: { submodules: none}
      attempts: 2
    - get: paas-templates-hello-world-root-depls-versions
      params: { submodules: none}
      attempts: 2
      trigger: true
  - task: generate-hello-world-root-depls-flight-plan
    output_mapping: {result-dir: init-hello-world-root-depls-plan}
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: ((docker-registry-url))concourse/busyboxplus
          tag: "git"
      outputs:
        - name: result-dir
      run:
        path: sh
        args:
        - -ec
        - |
          echo "check-resource -r $BUILD_PIPELINE_NAME/ntp --from version:((ntp-version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/vault --from tag:((vault-version))" | tee -a result-dir/flight-plan
          echo "check-resource -r $BUILD_PIPELINE_NAME/((stemcell-main-name)) --from version:((stemcell-version))" | tee -a result-dir/flight-plan
      params:
        BUILD_PIPELINE_NAME: hello-world-root-depls-bosh-generated
  - task: fly-into-concourse
    input_mapping: {fly-cmd: init-hello-world-root-depls-plan}
    output_mapping: {flight-report: concourse-hello-world-root-depls-init-report}
    file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
    params:
      ATC_EXTERNAL_URL: ((concourse-hello-world-root-depls-target))
      FLY_USERNAME: ((concourse-hello-world-root-depls-username))
      FLY_PASSWORD: "((concourse-hello-world-root-depls-password))"
      FLY_TEAM: main
- name: check-terraform-consistency
  serial: true
  serial_groups: [terraform]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none}
      trigger: true
    - get: paas-templates-hello-world-root-depls
      params: { submodules: none }
      trigger: true
    - get: secrets-hello-world-root-depls-limited
      params: { submodules: none }
      trigger: true
  - task: generate-terraform-tfvars
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
    output_mapping: {generated-files: terraform-tfvars}
    file: cf-ops-automation/concourse/tasks/generate-manifest.yml
    params:
      YML_FILES: |
        ./credentials-resource/shared/secrets.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/meta.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/secrets.yml
        ./additional-resource/meta-inf.yml
      YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      SUFFIX: -tpl.tfvars.yml
      IAAS_TYPE: ((iaas-type))
  - task: terraform-plan
    input_mapping: {secret-state-resource: secrets-hello-world-root-depls-limited,spec-resource: paas-templates-hello-world-root-depls}
    file: cf-ops-automation/concourse/tasks/terraform_plan_cloudfoundry.yml
    params:
      SPEC_PATH: "hello-world-root-depls/terraform-config/spec"
      SECRET_STATE_FILE_PATH: "hello-world-root-depls/terraform-config"
      IAAS_SPEC_PATH: "hello-world-root-depls/terraform-config/spec-((iaas-type))"
- name: approve-and-enforce-terraform-consistency
  serial: true
  serial_groups: [terraform]
  on_failure:
    put: failure-alert
    params:
      channel: ((slack-channel))
      text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  plan:
  - in_parallel:
    - get: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none}
    - get: cf-ops-automation
      params: { submodules: none}
      passed: [check-terraform-consistency]
    - get: paas-templates-hello-world-root-depls
      params: { submodules: none}
      passed: [check-terraform-consistency]
      trigger: false
    - get: secrets-hello-world-root-depls-limited
      params: { submodules: none}
      passed: [check-terraform-consistency]
  - task: generate-terraform-tfvars
    input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-hello-world-root-depls-limited, additional-resource: paas-templates-hello-world-root-depls}
    output_mapping: {generated-files: terraform-tfvars}
    file: cf-ops-automation/concourse/tasks/generate-manifest.yml
    params:
      YML_FILES: |
        ./credentials-resource/shared/secrets.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/meta.yml
        ./credentials-resource/hello-world-root-depls/terraform-config/secrets/secrets.yml
        ./additional-resource/meta-inf.yml
      YML_TEMPLATE_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      CUSTOM_SCRIPT_DIR: additional-resource/hello-world-root-depls/terraform-config/template
      SUFFIX: -tpl.tfvars.yml
      IAAS_TYPE: ((iaas-type))
  - task: terraform-apply
    input_mapping: {secret-state-resource: secrets-hello-world-root-depls-limited,spec-resource: paas-templates-hello-world-root-depls}
    output_mapping: {generated-files: terraform-cf}
    file: cf-ops-automation/concourse/tasks/terraform_apply_cloudfoundry.yml
    params:
      SPEC_PATH: "hello-world-root-depls/terraform-config/spec"
      SECRET_STATE_FILE_PATH: "hello-world-root-depls/terraform-config"
      IAAS_SPEC_PATH: "hello-world-root-depls/terraform-config/spec-((iaas-type))"
    ensure:
      task: update-terraform-state-file
      input_mapping: {reference-resource: secrets-full-writer, generated-resource: terraform-cf}
      output_mapping: {updated-git-resource: updated-terraform-state-secrets}
      file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
      params:
        OLD_FILE: "hello-world-root-depls/terraform-config/terraform.tfstate"
        NEW_FILE: "terraform.tfstate"
        COMMIT_MESSAGE: "Terraform TFState auto update"
      on_failure:
        put: failure-alert
        params:
          channel: ((slack-channel))
          text: Failure during [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
      on_success:
        put: secrets-full-writer
        get_params: {submodules: none}
        params:
          repository: updated-terraform-state-secrets
          rebase: true
groups:
- name: Hello-world-root-depls
  jobs:
    - approve-and-delete-disabled-deployments
    - approve-and-enforce-terraform-consistency
    - cancel-all-bosh-tasks
    - check-terraform-consistency
    - cloud-config-and-runtime-config-for-hello-world-root-depls
    - delete-deployments-review
    - deploy-bosh-deployment-sample
    - execute-deploy-script
    - init-concourse-boshrelease-and-stemcell-for-hello-world-root-depls
    - recreate-all
    - recreate-bosh-deployment-sample
    - retrigger-all-jobs
- name: Deploy-b*
  jobs:
    - deploy-bosh-deployment-sample
- name: Recreate
  jobs:
    - recreate-all
    - recreate-bosh-deployment-sample
- name: Terraform
  jobs:
    - approve-and-enforce-terraform-consistency
    - check-terraform-consistency
- name: Utils
  jobs:
    - approve-and-delete-disabled-deployments
    - cancel-all-bosh-tasks
    - cloud-config-and-runtime-config-for-hello-world-root-depls
    - delete-deployments-review
    - execute-deploy-script
    - init-concourse-boshrelease-and-stemcell-for-hello-world-root-depls
    - recreate-all
    - retrigger-all-jobs
