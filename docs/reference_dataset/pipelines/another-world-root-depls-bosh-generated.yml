
---
meta:
  tasks:
    - &on_failure
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: Failed to run [[$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME ($BUILD_NAME)]($ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME)].
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: v1.4.2
- name: bosh-deployment-v2
  type: registry-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
    tag: v2.12.0
- name: bosh-errand
  type: registry-image
  source:
    repository: cfcommunity/bosh2-errand-resource
    tag: v0.1.2
- name: meta
  type: registry-image
  source:
    repository: olhtbr/metadata-resource
    tag: 2.0.1
resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta
- name: failure-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))
    proxy: ((slack-proxy))
    proxy_https_tunnel: ((slack-proxy-https-tunnel))
    disable: ((slack-disable))
- name: secrets-another-world-root-depls-limited
  icon: source-branch
  type: git
  source:
    uri: ((secrets-uri))
    paths: ["private-config.yml", "another-world-root-depls/ci-deployment-overview.yml", "another-world-root-depls/secrets", "shared"]
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: secrets-full-writer
  icon: source-pull
  type: git
  source:
    uri: ((secrets-uri))
    branch: ((secrets-branch))
    skip_ssl_verification: true
- name: paas-templates-another-world-root-depls
  icon: home-analytics
  type: git
  source:
    uri: ((paas-templates-uri))
    paths: ["shared-config.yml", "meta-inf.yml", "another-world-root-depls/root-deployment.yml", "another-world-root-depls/template"]
    branch: pipeline-current-((paas-templates-branch))
    skip_ssl_verification: true
- name: cf-ops-automation
  type: git
  icon: rocket
  source:
    uri: ((cf-ops-automation-uri))
    branch: ((cf-ops-automation-branch))
    tag_filter: ((cf-ops-automation-tag-filter))
    skip_ssl_verification: true
jobs:
- name: push-boshreleases
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
      - get : secrets-another-world-root-depls-limited
        params: { submodules: none, depth: 0 }
      - get: paas-templates-another-world-root-depls
        params: { submodules: none, depth: 0 }
        trigger: true
    - task: repackage-releases
      input_mapping: { templates-resource: paas-templates-another-world-root-depls, secrets: secrets-another-world-root-depls-limited }
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_TARGET: ((bosh-target))
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ROOT_DEPLOYMENT_NAME: another-world-root-depls
    - task: repackage-releases-fallback
      file:  cf-ops-automation/concourse/tasks/repackage_boshreleases_fallback/task.yml
    - task: upload-to-director
      input_mapping: { releases-to-upload: repackaged-releases-fallback, config-resource: secrets-another-world-root-depls-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_releases/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
    - task: check-repackaging-errors
      config:
        platform: linux
        image_resource:
          type: registry-image
          source:
            repository: governmentpaas/curl-ssl
            tag: 469ceea7a619b0abdd6cb27efd4d3bd5e9be3ddb
        inputs:
          - name: repackaged-releases-fallback
        run:
          path: sh
          args:
            - -ec
            - |
              cd repackaged-releases-fallback
              if [ -e fallback-fixes.yml ]; then
              echo "=========================================================="
                echo "Dump fallback-fixes"
                cat fallback-fixes.yml
              fi
              echo "=========================================================="
              if [ -e fallback-errors.yml ]; then
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                echo "Dump fallback-errors"
                cat fallback-errors.yml
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                exit 1
              elif [ -e errors.yml ]; then
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                echo "Dump errors"
                cat errors.yml
                echo "/!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ /!\ "
                exit 1
              else
                echo "No errors detected"
              fi
- name: upload-stemcell-to-director
  on_failure: *on_failure
  plan:
    - in_parallel:
        - get: cf-ops-automation
          attempts: 2
          params: { submodules: none }
          trigger: true
        - get : secrets-another-world-root-depls-limited
          attempts: 2
          params: { submodules: none }
        - get: ((stemcell-main-name))
          trigger: true
          attempts: 2
        - get: paas-templates-another-world-root-depls
          attempts: 2
          params: { submodules: none }
          trigger: true
    - task: download-stemcell
      attempts: 2
      input_mapping: { templates-resource: paas-templates-another-world-root-depls }
      output_mapping: { stemcell: ((stemcell-main-name)) }
      file:  cf-ops-automation/concourse/tasks/download_stemcell/task.yml
      params:
        VERSIONS_FILE: templates-resource/another-world-root-depls/root-deployment.yml
        STEMCELL_PREFIX: ((stemcell-name-prefix))
        STEMCELL_MAIN_NAME: ((stemcell-main-name))
        STEMCELL_BASE_LOCATION: https://bosh.io/d/stemcells
    - task: upload-to-director
      attempts: 2
      input_mapping: { stemcell: ((stemcell-main-name)), config-resource: secrets-another-world-root-depls-limited }
      file:  cf-ops-automation/concourse/tasks/bosh_upload_stemcell/task.yml
      params:
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: ((bosh-password))
        BOSH_ENVIRONMENT: ((bosh-target))
        BOSH_CA_CERT: config-resource/shared/certs/internal_paas-ca/server-ca.crt
- name: cancel-all-bosh-tasks
  on_failure: *on_failure
  plan:
  - in_parallel:
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
    - get : secrets-another-world-root-depls-limited
      params: { submodules: none, depth: 0 }
  - task: cancel-all-bosh-tasks
    input_mapping: { scripts-resource: cf-ops-automation, secrets: secrets-another-world-root-depls-limited }
    file:  cf-ops-automation/concourse/tasks/bosh_cancel_all_tasks/task.yml
    params:
      BOSH_CLIENT: ((bosh-username))
      BOSH_CLIENT_SECRET: ((bosh-password))
      BOSH_TARGET: ((bosh-target))
      BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: execute-deploy-script
  serial: true
  on_failure: *on_failure
  plan:
    - in_parallel:
      - get: secrets-another-world-root-depls-limited
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: paas-templates-another-world-root-depls
        params: { submodules: none, depth: 0 }
        trigger: true
      - get: cf-ops-automation
        params: { submodules: none, depth: 0 }
    - task: run-deploy.sh
      input_mapping: {scripts-resource: cf-ops-automation, templates: paas-templates-another-world-root-depls, secrets: secrets-another-world-root-depls-limited}
      file: cf-ops-automation/concourse/tasks/execute_deploy_script.yml
      params:
        CURRENT_DEPLS: another-world-root-depls/template
        COMMON_SCRIPT_DIR: scripts-resource/scripts
        SECRETS_DIR: secrets
        BOSH_TARGET: ((bosh-target))
        BOSH_CLIENT: ((bosh-username))
        BOSH_CLIENT_SECRET: "((bosh-password))"
        BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
- name: cloud-config-and-runtime-config-for-another-world-root-depls
  serial: true
  on_failure: *on_failure
  plan:
    - put: concourse-meta
    - get: secrets-full-writer
      params: { submodules: none, depth: 0 }
    - get: secrets-another-world-root-depls-limited
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: paas-templates-another-world-root-depls
      params: { submodules: none, depth: 0 }
      trigger: true
    - get: cf-ops-automation
      params: { submodules: none, depth: 0 }
      trigger: true
    - task: generate-another-world-root-depls-all-config
      input_mapping: {scripts-resource: cf-ops-automation, credentials-resource: secrets-another-world-root-depls-limited, additional-resource: paas-templates-another-world-root-depls}
      output_mapping: {generated-files: config-manifest}
      file: cf-ops-automation/concourse/tasks/generate_manifest/task.yml
      params:
        SPRUCE_FILE_BASE_PATH: credentials-resource/another-world-root-depls/
        YML_TEMPLATE_DIR: additional-resource/another-world-root-depls/template
        YML_FILES: |
            ./credentials-resource/another-world-root-depls/secrets/meta.yml
            ./credentials-resource/another-world-root-depls/secrets/secrets.yml
            ./credentials-resource/shared/secrets.yml
            ./additional-resource/meta-inf.yml
        CUSTOM_SCRIPT_DIR: additional-resource/another-world-root-depls/template
        IAAS_TYPE: ((iaas-type))
        PROFILES: ((profiles))
    - in_parallel:
      - task: update-cloud-config-for-another-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-another-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-cloud-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          CONFIG_TYPE: cloud
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-cloud-config
            attempts: 2
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cloud-config}
            output_mapping: {updated-git-resource: updated-cloud-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "another-world-root-depls/cloud-config.yml"
              NEW_FILE: "cloud-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "another-world-root-depls cloud-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 2
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-cloud-config
              rebase: true
      - task: update-runtime-config-for-another-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-another-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-runtime-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
           BOSH_TARGET: ((bosh-target))
           BOSH_CLIENT: ((bosh-username))
           BOSH_CLIENT_SECRET: "((bosh-password))"
           BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
           CONFIG_TYPE: runtime
           CREDHUB_SERVER: ((credhub-server))
           CREDHUB_CLIENT: ((credhub-client))
           CREDHUB_SECRET: "((credhub-secret))"
           CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-runtime-config
            attempts: 2
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-runtime-config}
            output_mapping: {updated-git-resource: updated-runtime-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "another-world-root-depls/runtime-config.yml"
              NEW_FILE: "runtime-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "another-world-root-depls runtime-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 2
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-runtime-config
              rebase: true
      - task: update-cpi-config-for-another-world-root-depls
        attempts: 2
        input_mapping: {scripts-resource: cf-ops-automation, secrets: secrets-another-world-root-depls-limited}
        output_mapping: {deployed-config: deployed-cpi-config}
        file: cf-ops-automation/concourse/tasks/bosh_update_config/task.yml
        params:
          BOSH_TARGET: ((bosh-target))
          BOSH_CLIENT: ((bosh-username))
          BOSH_CLIENT_SECRET: "((bosh-password))"
          BOSH_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
          CONFIG_TYPE: cpi
          CREDHUB_SERVER: ((credhub-server))
          CREDHUB_CLIENT: ((credhub-client))
          CREDHUB_SECRET: "((credhub-secret))"
          CREDHUB_CA_CERT: secrets/shared/certs/internal_paas-ca/server-ca.crt
        ensure:
          do:
          - task: update-cpi-config
            attempts: 2
            input_mapping: {reference-resource: secrets-full-writer, generated-resource: deployed-cpi-config}
            output_mapping: {updated-git-resource: updated-cpi-config}
            file: cf-ops-automation/concourse/tasks/git_update_a_file_from_generated.yml
            params:
              OLD_FILE: "another-world-root-depls/cpi-config.yml"
              NEW_FILE: "cpi-config.yml"
              PROFILES: ((profiles))
              COMMIT_MESSAGE: "another-world-root-depls cpi-config auto update\n\nActive profiles: ${PROFILES}\n[skip ci]"
          - put: secrets-full-writer
            attempts: 2
            get_params: { submodules: none, depth: 0 }
            params:
              repository: updated-cpi-config
              rebase: true
groups:
- name: another-world-root-depls
  jobs:
    - "*"
- name: utils
  jobs:
    - cancel-all-bosh-tasks
    - cloud-config-and-runtime-config-for-another-world-root-depls
    - execute-deploy-script
    - push-boshreleases
    - upload-stemcell-to-director
