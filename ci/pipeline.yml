---
meta:
  tasks:
  - &on_failure_alert
    put: slack-alert
    params:
      channel: ((slack-channel))
      text: |
        Failed to run <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME/$BUILD_NAME>
        https://github.com/orange-cloudfoundry/cf-ops-automation/commit/$TEXT_FILE_CONTENT
      text_file: cf-ops-automation/.git/ref
      icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
      username: Concourse
  - &coa-failure-pr
    put: pr-develop
    params:
      path: cf-ops-automation
      status: failure
  - &coa-failure-acceptance-pr
    put: pr-develop
    params:
      path: cf-ops-automation
      status: failure
      context: acceptance-tests
  - &coa-failure-it-pr
    put: pr-develop
    params:
      path: cf-ops-automation
      status: failure
      context: integration-tests
  - &coa-failure-ut-pr
    put: pr-develop
    params:
      path: cf-ops-automation
      status: failure
      context: unit-tests
  - &coa-pending-pr
    put: pr-develop
    params:
      path: cf-ops-automation
      status: pending
  - &pending-pr
    put: pr-develop
    attempts: 2
    params:
      path: pr-develop
      status: pending
  - &failed-pr
    put: pr-develop
    params:
      path: pr-develop
      status: failure
display:
  background_image: https://wallpapercave.com/download/pirate-flag-wallpapers-wp2022142
resource_types:
  - name: slack-notification
    type: registry-image
    source:
      repository: ((docker-registry-url))elpaasoci/slack-notification-resource

  - name: pull-request
    type: registry-image
    source:
      repository: ((docker-registry-url))elpaasoci/github-pr-resource

  - name: meta
    type: registry-image
    source:
      repository: ((docker-registry-url))elpaasoci/metadata-resource
      tag: 2.0.3-orange
resources:
- name: concourse-meta
  icon: file-document-box-search-outline
  type: meta

- name: slack-alert
  icon: slack
  type: slack-notification
  source:
    url: ((slack-webhook))

- name: cf-ops-automation-docker-image-develop
  icon: docker
  type: docker-image
  source:
    repository: coabot/cf-ops-automation
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    tag: develop-latest

- name: cf-ops-automation-docker-image-pr
  icon: docker
  type: docker-image
  source:
    repository: coabot/cf-ops-automation
    username: ((dockerhub-username))
    password: ((dockerhub-password))

- name: version
  icon: tag-multiple
  type: semver
  source:
    driver: git
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: version
    initial_version: 1.3.1
    file: version

- name: ci-develop
  icon: github-circle
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: ((cf-ops-automation-git-branch))
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

- name: ci-master
  icon: github-circle
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: master
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

- name: pr-develop
  icon: source-pull
  type: pull-request
  source:
    repository: ((cf-ops-automation-git-hub-owner))/((cf-ops-automation-git-hub-repository))
    access_token: ((cf-ops-automation-git-hub-token))
    base_branch: develop
    skip_ssl_verification: ((cf-ops-automation-git-insecure))
    disable_forks: true

- name: cf-ops-automation-docker-image-source
  icon: github-circle
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    branch: ((cf-ops-automation-git-branch))
    skip_ssl_verification: ((cf-ops-automation-git-insecure))
    paths: [ "Gemfile*", "Dockerfile" ]

- name: gh-release
  icon: package-variant
  type: github-release
  source:
    owner: ((cf-ops-automation-git-hub-owner))
    repository: ((cf-ops-automation-git-hub-repository))
    access_token: ((cf-ops-automation-git-hub-token))


#- name: coa-ci-secrets
#  type: git
#  source:
#    uri: ((coa-ci-secrets-git-uri))
#    username: ((coa-ci-secrets-git-username))
#    password: ((coa-ci-secrets-git-password))

jobs:
#  - name: auto-update-pipeline
#    serial: true
#    on_failure: *on_failure_alert
#    plan:
#      - in_parallel:
#        - get: coa-ci-secrets
#          trigger: true
#        - get: cf-ops-automation
#          resource: ci-develop
#          trigger: true
#      - set_pipeline: self
#        file: cf-ops-automation/ci/pipeline.yml
#        var_files:
#          - coa-ci-secrets/flexible-engine-env/credentials-fe-int.yml

  - name: build-cached-image
    serial: true
    on_failure: *on_failure_alert
    plan:
    - get: cf-ops-automation
      resource: ci-develop
    - get: cf-ops-automation-docker-image-source
      trigger: true
    - put: cf-ops-automation-docker-image-develop
      attempts: 5
      params:
        build: cf-ops-automation-docker-image-source
        tag_as_latest: true
      get_params: {skip_download: true}
  - name: unit-tests
    on_failure: *on_failure_alert
    serial: true
    plan:
    - in_parallel:
      - put: concourse-meta
      - get: cf-ops-automation-docker-image-develop
        passed: [build-cached-image]
        trigger: true
      - get: cf-ops-automation
        resource: ci-develop
        trigger: true
    - task: run-tests
      attempts: 2
      image: cf-ops-automation-docker-image-develop
      timeout: 30m
      config: &unit_tests_config
        platform: linux
        inputs:
        - name: cf-ops-automation
        - name: concourse-meta
        outputs:
        - name: test-reports
        run:
          dir: cf-ops-automation
          path: /bin/bash
          args:
          - -ce
          - |
            echo "Testing environment config:"
            echo "---------------------------"
            echo "System: $(uname -a)"
            echo "Docker image fly $(fly --version)"
            ruby --version
            bundle --version
            bundle exec rspec --version
            cc-test-reporter --version
            echo "---------------------------"
            echo "Setup Code Climate pre-requisites"
            cd ../concourse-meta
            BUILD_TEAM=$(if [ -f build_team_name ];then cat build_team_name;fi)
            BUILD_PIPELINE=$(if [ -f build_pipeline_name ];then cat build_pipeline_name;fi)
            BUILD_JOB=$(if [ -f build_job_name ];then cat build_job_name;fi)
            BUILD_ID=$(if [ -f build_id ];then cat build_id;fi)
            BUILD_NAME=$(if [ -f build_name ];then cat build_name;fi)
            ATC_EXTERNAL_URL=$(if [ -f atc_external_url ];then cat atc_external_url;fi)
            BUILD_INFO=$(echo "$BUILD_TEAM/$BUILD_PIPELINE/$BUILD_JOB/$BUILD_NAME - $BUILD_ID")
            cd -
            export GIT_COMMIT_SHA=$(eval $GIT_SHA_CMD)
            export GIT_BRANCH=$(eval $GIT_BRANCH_CMD)
            export CI_NAME=${BUILD_INFO}
            export CI_BUILD_ID=${BUILD_ID}
            export CI_BUILD_URL=$ATC_EXTERNAL_URL/builds/${BUILD_ID}
            echo "Setup git config"
            git config --global user.email "coa@cf-automation.org"
            git config --global user.name "COA CI"
            echo "Running tests for $GIT_COMMIT_SHA@$GIT_BRANCH"
            fly -t cf-ops-automation login -u ((concourse-username)) -p '((concourse-password))' -k -c ((concourse-url))
            echo "Ensure local fly version is in sync with concourse"
            fly -t cf-ops-automation sync
            echo "Setup Code Climate coverage"
            cc-test-reporter before-build
            bundle exec rspec --format documentation --format html --out ../test-reports/rspec-results.html
            echo "Sending coverage to Code Climate"
            if [ $(cc-test-reporter after-build) -eq 0 ]; then
              echo "Failed to run cc-test-reporter. Re-launch in debug mode";
              echo "---------------------------"
              cc-test-reporter after-build -d;
            fi
        params:
          CC_TEST_REPORTER_ID: ((code-climate-test-reporter-id))
          COVERAGE: true
          GIT_SHA_CMD: cat .git/ref
          GIT_BRANCH_CMD: echo "((cf-ops-automation-git-branch))"

  - name: acceptance-tests
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation-docker-image-develop
          passed: [unit-tests, integration-tests]
          trigger: true
        - get: version
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [unit-tests, integration-tests]
      - task: run-acceptance-tests
        attempts: 2
        image: cf-ops-automation-docker-image-develop
        timeout: 30m
        config: &acceptance_tests_config
          platform: linux
          inputs:
          - name: cf-ops-automation
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -ce
            - |
              ruby --version
              bundle --version
              export CUCUMBER_PUBLISH_QUIET=true
              bundle exec cucumber
      - task: ensure-changelog-is-working
        image: cf-ops-automation-docker-image-develop
        config: &changelog_working
          platform: linux
          inputs:
            - name: cf-ops-automation
            - name: version
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
              - -ce
              - |
                RELEASE_VERSION=$(cat ../version/version)
                echo "Github changelog generator version: $(bundle exec github_changelog_generator --version)"
                bundle exec github_changelog_generator --no-author --future-release "v${RELEASE_VERSION}" --add-sections '{"misc":{"prefix":"**Miscellaneous:**","labels":["chore","CI/Build"]}}' --token $CHANGELOG_GITHUB_TOKEN #--unreleased-only # temporary disable due to https://github.com/github-changelog-generator/github-changelog-generator/issues/977
                cat CHANGELOG.md
          params:
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))


  - name: integration-tests
    on_failure: *on_failure_alert
    serial_groups: [integration]
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
        - get: cf-ops-automation-docker-image-develop
          passed: [build-cached-image]
          trigger: true
      - task: setup-pre-requisites
        attempts: 1
        image: cf-ops-automation-docker-image-develop
        config: &integration_tests_setup_pre_requisites_task_config
          platform: linux
          inputs:
          - name: cf-ops-automation
          outputs:
          - name: prereqs
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              echo "Setup pre-requisites"
              cp -v cf-ops-automation/ci/bootstrap_coa_env/*-prereqs.yml  prereqs/
              echo "  bot-github-access-token: ((cf-ops-automation-git-hub-token))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-webhook: ((slack-webhook))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-channel: ((slack-channel))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-proxy:" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-disable: ((slack-disable-it))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-proxy-https-tunnel:" >> prereqs/pipeline-vars-prereqs.yml
              if [ -z "$INTEGRATION_TEST_PREREQS" ]; then
                echo "Error \$INTEGRATION_TEST_PREREQS is empty"
                exit 1
              fi
              printenv INTEGRATION_TEST_PREREQS > prereqs/integration-test-prereqs.yml
              #ruby -ryaml -e 'puts YAML.load(ENV["CLOUD_CONFIG_PREREQS"]).to_yaml' > prereqs/cloud-config-prereqs.yml
              cf-ops-automation/ci/scripts/deploy-bosh-releases.rb prereqs/bosh-deployment-manifest-prereqs.yml
              echo "removing 'ntp' release and 'bosh-deployment-sample' deployment"
              bosh delete-deployment --force -d bosh-deployment-sample --non-interactive
              bosh delete-deployment --force -d hello-world-root-depls-release-precompile-deployment --non-interactive
              bosh delete-release --non-interactive ntp
              bosh deployments
              bosh releases
              bosh stemcells
              echo "Setup DONE"
        # it is not possible to include it as config param, otherwise we get an deserialization error
        params: &integration_tests_setup_pre_requisites_task_config_params
            INTEGRATION_TEST_PREREQS: ((integration-test-prereqs))
            BOSH_ENVIRONMENT: ((integration-test-prereqs.bosh.bosh_environment))
            BOSH_CLIENT: ((integration-test-prereqs.bosh.bosh_client))
            BOSH_CLIENT_SECRET: "((integration-test-prereqs.bosh.bosh_client_secret))"
            BOSH_CA_CERT: ((integration-test-prereqs.bosh.bosh_ca_cert))
      - task: setup-credhub-pre-requisites
        attempts: 1
        config: &integration_tests_setup_credhub_pre_requisites_task_config
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ((docker-registry-url))elpaasoci/bosh-cli-v2
              tag: 16d8df77e94455af3bccce2b058318fd3fd8b9bc
          inputs:
            - name: cf-ops-automation
          params:
            CREDHUB_SERVER: ((integration-test-prereqs.credhub.server))
            CREDHUB_CLIENT: ((integration-test-prereqs.credhub.client))
            CREDHUB_SECRET: "((integration-test-prereqs.credhub.secret))"
            CREDHUB_CA_CERT: ((integration-test-prereqs.credhub.ca-cert))
            CREDHUB_CONCOURSE_NAMESPACE: "/coa-ci"
            DOCKER_REGISTRY_URL: ((integration-test-prereqs.docker-registry-url))
          run:
            path: /bin/bash
            args:
              - -ce
              - |
                echo "Setup Credhub pre-requisites"
                ca_cert() {
                    local ca_cert=$1
                    local tmp=$(mktemp -d)
                    local ca_cert_file="${tmp}/ca.pem"
                    echo "writting credhub certificates to ${ca_cert_file}"
                    echo $ca_cert >> $ca_cert_file
                }
                ca_cert ${CREDHUB_CA_CERT}
                credhub login
                credhub --version
                credhub f --path {CREDHUB_CONCOURSE_NAMESPACE} 
                #credhub set -n
                ruby --version
                cd cf-ops-automation
                CURRENT_TEAMS=$(grep -E "^[[:space:]]*team:" docs/reference_dataset/config_repository/hello-world-root-depls/ci-deployment-overview.yml|sort|uniq|cut -d':' -f2|cut -c2-)
                CONCOURSE_TEAMS="main $CURRENT_TEAMS"
                echo "Teams to process: ${CONCOURSE_TEAMS}"
                for team in ${CONCOURSE_TEAMS};do
                  credhub set --type value -n "${CREDHUB_CONCOURSE_NAMESPACE}/${team}/docker-registry-url" -v "$DOCKER_REGISTRY_URL"
                done

      - task: upload-pipelines
        attempts: 2
        image: cf-ops-automation-docker-image-develop
        config: &integration_tests_upload-pipelines_task_config
          platform: linux
          inputs:
            - name: cf-ops-automation
            - name: prereqs
          outputs:
            - name: coa-logs
          run:
            path: /bin/bash
            args:
              - -c
              - |
                cd cf-ops-automation/
                echo "Git configuration:"
                git config -l
                echo "========================"
                echo "removing 'url.https://.insteadof' properties"
                git config --unset url.https://.insteadof
                cd ..
                ruby ./cf-ops-automation/scripts/run_integration_tests.rb
                status=$?
                if [ -f ./coa-logs/stdout.log ];then
                  cat ./coa-logs/stdout.log
                fi
                exit ${status}
          params:
            PREREQS_PATHS_RAW: "./prereqs/*.yml"
            COA_LOG_PATH: "../../../../coa-logs"
        on_failure:
          task: dump-coa-log-file
          image: cf-ops-automation-docker-image-develop
          config:
            platform: linux
            inputs:
              - name: coa-logs
            run:
              path: /bin/bash
              args:
                - -ce
                - |
                  if [ -f ./coa-logs/stdout.log ];then
                    cat ./coa-logs/stdout.log
                  else
                    echo "Sorry, no logfile found :-("
                  fi
  - name: update-documentation
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [acceptance-tests]
        - get: cf-ops-automation-docker-image-develop
          trigger: true
          passed: [acceptance-tests]

      - task: generate-living-documentation
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ((docker-registry-url))coabot/cf-ops-automation
              tag: develop-latest

          inputs:
          - name: cf-ops-automation
          outputs:
          - name: cf-ops-automation-living-documentation
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              git clone cf-ops-automation cf-ops-automation-living-documentation
              cd cf-ops-automation-living-documentation/
              gh-md-toc --insert Readme.md
              cat Readme.md|grep -v 'Added by:' >tmp.md && mv tmp.md Readme.md
              git add -A
              CHANGE_DETECTED_COUNTER=$(git status --porcelain|wc -l)
              if [ ${CHANGE_DETECTED_COUNTER} -gt 0 ]
              then
                 git commit -m "Living documentation auto-update"
              else
                 echo "No change detected, skip commit"
              fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
      - put: ci-develop
        params:
          repository: cf-ops-automation-living-documentation
          rebase: true


  - name: merge-to-master
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: ci-master
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [update-documentation]
        - get: cf-ops-automation-docker-image-develop
          passed: [update-documentation]
      - put: ci-master
        params:
          repository: cf-ops-automation

  - name: ship-it
    on_failure: *on_failure_alert
    serial: true
    serial_groups: [version]
    plan:
      - in_parallel:
        - get: version
          params: {bump: final}
          attempts: 2
        - get: cf-ops-automation
          resource: ci-master
          passed: [merge-to-master]
          attempts: 2
#        - get: cf-ops-automation-docker-image-develop
#          passed: [merge-to-master]
      - task: generate-changelog
        attempts: 2
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ((docker-registry-url))coabot/cf-ops-automation
              tag: develop-latest
          inputs:
          - name: cf-ops-automation
          - name: version
          outputs:
          - name: cf-ops-automation-changelog
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              RELEASE_VERSION=$(cat version/version)
              git clone cf-ops-automation cf-ops-automation-changelog
              cd cf-ops-automation-changelog/
              echo "Github changelog generator version: $(bundle exec github_changelog_generator --version)"
              bundle exec github_changelog_generator --no-author --future-release "v${RELEASE_VERSION}" --add-sections '{"misc":{"prefix":"**Miscellaneous:**","labels":["chore","CI/Build"]}}' --token $CHANGELOG_GITHUB_TOKEN
              mkdir -p docs/features/
              export CUCUMBER_PUBLISH_QUIET=true
              bundle exec cucumber -f html --out docs/features/features.html -f pretty --out docs/features/features.md -f pretty --no-color --no-source
              git add -A
              CHANGE_DETECTED_COUNTER=$(git status --porcelain|wc -l)
              if [ ${CHANGE_DETECTED_COUNTER} -gt 0 ]
              then
                 git commit -m "auto-update for release ${RELEASE_VERSION} - Changelog update"
              else
                 echo "No change detected, skip commit"
              fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))
      - put: ci-master
        attempts: 2
        params:
          repository: cf-ops-automation-changelog
          rebase: true
      - task: generate-release
#        image: cf-ops-automation-docker-image-source
        attempts: 2
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: ((docker-registry-url))coabot/cf-ops-automation
              tag: develop-latest
          inputs:
          - name: cf-ops-automation
          - name: version
          outputs:
          - name: github-info
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -ce
            - |
              RELEASE_VERSION=$(cat ../version/version)
              OUTPUT_DIR="../github-info"
              OUTPUT_FILE="${OUTPUT_DIR}/github_release.md"
              echo "Github changelog generator version: $(bundle exec github_changelog_generator --version)"
              bundle exec github_changelog_generator --no-author  -o ${OUTPUT_FILE} --header-label "**Release notes**" --future-release "v${RELEASE_VERSION}" --token $CHANGELOG_GITHUB_TOKEN --unreleased-only
              cd ${OUTPUT_DIR}
              tar czvf cf-ops-automation.tgz ../cf-ops-automation
          params:
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))
      - put: gh-release
        attempts: 2
        params:
          name: version/version
          tag_prefix: v
          tag: version/version
          body: github-info/github_release.md
          globs:
           - github-info/cf-ops-automation.tgz
      - put: version
        attempts: 2
        params: {bump: patch}

  - name: merge-changelog-to-develop
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          attempts: 2
          resource: ci-master
          trigger: true
          passed: [ship-it]
        - get: ci-develop
          attempts: 2
      - put: ci-develop
        attempts: 2
        params:
          repository: cf-ops-automation

  - name: pull-requests-build-cached-image
    on_failure: &PR_on_failure_alert
      put: slack-alert
      params:
        channel: ((slack-channel))
        text: |
          $TEXT_FILE_CONTENT
          Failed to run <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME/$BUILD_NAME>
        text_file: cf-ops-automation/.git/resource/url
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - get: pr-develop
        trigger: true
        version: every
      - *pending-pr
      - put: pr-develop
        params:
          path: pr-develop
          status: pending
          context: build-image
      - put: cf-ops-automation-docker-image-pr
        attempts: 5
        get_params: {skip_download: true}
        params:
          build: pr-develop
          tag: pr-develop/.git/resource/pr
          tag_prefix: PR-
          tag_as_latest: true
        on_failure:
          *failed-pr
      - put: pr-develop
        params:
          path: pr-develop
          status: success
          context: build-image

  - name: pull-requests-unit-tests
    on_failure: *PR_on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - put: concourse-meta
        - get: cf-ops-automation-docker-image-pr
          passed: [pull-requests-build-cached-image]
          trigger: true
        - get: cf-ops-automation
          passed: [pull-requests-build-cached-image]
          resource: pr-develop
          trigger: true
          version: every
      - *coa-pending-pr
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: pending
          context: unit-test
      - task: test-pr
        attempts: 2
        image: cf-ops-automation-docker-image-pr
        timeout: 30m
        config: *unit_tests_config
        params:
          GIT_SHA_CMD: cat .git/resource/head_sha
          GIT_BRANCH_CMD: cat .git/resource/head_name
        on_failure:
          in_parallel:
            - *coa-failure-pr
            - *coa-failure-ut-pr
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: success
          context: unit-test

  - name: pull-requests-acceptance-tests
    on_failure: *PR_on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation-docker-image-pr
          passed: [pull-requests-build-cached-image]
          trigger: true
        - get: cf-ops-automation
          passed: [pull-requests-build-cached-image]
          resource: pr-develop
          trigger: true
          version: every
        - get: version
      - *coa-pending-pr
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: pending
          context: acceptance-tests
      - task: acceptance-test-pr
        attempts: 2
        image: cf-ops-automation-docker-image-pr
        timeout: 30m
        config: *acceptance_tests_config
        on_failure:
          in_parallel:
            - *coa-failure-pr
            - *coa-failure-acceptance-pr
      - task: ensure-changelog-is-working
        image: cf-ops-automation-docker-image-pr
        config: *changelog_working
        on_failure:
          in_parallel:
            - *coa-failure-pr
            - *coa-failure-acceptance-pr
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: success
          context: acceptance-tests

  - name: pull-requests-integration-tests
    on_failure: *PR_on_failure_alert
    serial_groups: [integration]
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation-docker-image-pr
          passed: [pull-requests-build-cached-image]
          trigger: true
        - get: cf-ops-automation
          passed: [pull-requests-build-cached-image]
          resource: pr-develop
          trigger: true
          version: every
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: pending
          context: integration-tests
      - task: setup-pre-requisites
        attempts: 1
        image: cf-ops-automation-docker-image-pr
        config: *integration_tests_setup_pre_requisites_task_config
        on_failure:
          in_parallel:
            - *coa-failure-pr
            - *coa-failure-it-pr
        # it is not possible to include it as config param, otherwise we get an deserialization error
        params: *integration_tests_setup_pre_requisites_task_config_params
#          INTEGRATION_TEST_PREREQS: ((integration-test-prereqs))
#          BOSH_ENVIRONMENT: ((integration-test-prereqs.bosh.bosh_environment))
#          BOSH_CLIENT: ((integration-test-prereqs.bosh.bosh_client))
#          BOSH_CLIENT_SECRET: "((integration-test-prereqs.bosh.bosh_client_secret))"
#          BOSH_CA_CERT: ((integration-test-prereqs.bosh.bosh_ca_cert))
      - task: setup-credhub-pre-requisites
        attempts: 1
        config: *integration_tests_setup_credhub_pre_requisites_task_config
        on_failure:
          in_parallel:
            - *coa-failure-pr
            - *coa-failure-it-pr
      - task: upload-pipelines
        attempts: 2
        image: cf-ops-automation-docker-image-pr
        config: *integration_tests_upload-pipelines_task_config
        on_failure:
          in_parallel:
            - *coa-failure-pr
            - *coa-failure-it-pr
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: success
          context: integration-tests

  - name: pull-requests-success
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: pr-develop
          trigger: true
#          version: every
          passed: [pull-requests-unit-tests, pull-requests-integration-tests,pull-requests-acceptance-tests]
      - put: pr-develop
        params:
          path: cf-ops-automation
          status: success
      - put: slack-alert
        params:
          channel: ((slack-channel))
          text: |
            $TEXT_FILE_CONTENT
            Pull request successfully ran tests :<$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/>
          text_file: cf-ops-automation/.git/resource/url
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse

  - name: major
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: major}
    - put: version
      params: {file: version/version}

  - name: minor
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: minor}
    - put: version
      params: {file: version/version}

  - name: patch
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: patch}
    - put: version
      params: {file: version/version}

groups:
  - name: overview
    jobs:
      - "*"

  - name: releases
    jobs:
      - patch
      - minor
      - major
      - build-cached-image
      - unit-tests
      - acceptance-tests
      - integration-tests
      - update-documentation
      - merge-to-master
      - ship-it
      - merge-changelog-to-develop

  - name: pull-requests
    jobs:
      - pull-requests-build-cached-image
      - pull-requests-unit-tests
      - pull-requests-acceptance-tests
      - pull-requests-integration-tests
      - pull-requests-success
