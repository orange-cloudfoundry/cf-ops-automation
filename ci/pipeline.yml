---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

  - name: meta
    type: docker-image
    source:
      repository: swce/metadata-resource
      tag: release-v0.0.3

resources:
- name: concourse-meta
  type: meta

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

- name: cf-ops-automation-docker-image-develop
  type: docker-image
  source:
    repository: orangecloudfoundry/cf-ops-automation
    username: ((dockerhub-username))
    password: ((dockerhub-password))
    tag: develop-latest

- name: cf-ops-automation-docker-image-PR
  type: docker-image
  source:
    repository: orangecloudfoundry/cf-ops-automation
    username: ((dockerhub-username))
    password: ((dockerhub-password))

- name: version
  type: semver
  source:
    driver: git
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: version
    initial_version: 1.3.1
    file: version

- name: ci-develop
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: ((cf-ops-automation-git-branch))
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

- name: ci-master
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: master
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

- name: PR-develop
  type: pull-request
  source:
    repository: ((cf-ops-automation-git-hub-owner))/((cf-ops-automation-git-hub-repository))
    access_token: ((cf-ops-automation-git-hub-token))
    base_branch: develop
    skip_ssl_verification: ((cf-ops-automation-git-insecure))
    disable_forks: true


- name: cf-ops-automation-dependencies
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    branch: ((cf-ops-automation-git-branch))
    skip_ssl_verification: ((cf-ops-automation-git-insecure))
    paths: [ "Gemfile*", "Dockerfile" ]

- name: gh-release
  type: github-release
  source:
    owner: ((cf-ops-automation-git-hub-owner))
    repository: ((cf-ops-automation-git-hub-repository))
    access_token: ((cf-ops-automation-git-hub-token))

- name: hotfix-branch
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: hotfix
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

jobs:

  - name: build-cached-image
    serial: true
    on_failure: &on_failure_alert
      put: slack-alert
      params:
        channel: ((slack-channel))
        text: |
          Failed to run <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME/$BUILD_NAME>
          https://github.com/orange-cloudfoundry/cf-ops-automation/commit/$TEXT_FILE_CONTENT
        text_file: cf-ops-automation/.git/ref
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
    - get: cf-ops-automation
      resource: ci-develop
    - get: cf-ops-automation-dependencies
      trigger: true
    - put: cf-ops-automation-docker-image-develop
      attempts: 3
      params:
        build: cf-ops-automation-dependencies
  - name: unit-tests
    on_failure: *on_failure_alert
    serial: true
    plan:
    - in_parallel:
      - get: concourse-meta
      - get: cf-ops-automation-docker-image-develop
        passed: [build-cached-image]
        trigger: true
      - get: cf-ops-automation
        resource: ci-develop
        trigger: true
    - task: run-tests
      attempts: 2
      image: cf-ops-automation-docker-image-develop
      timeout: 30m
      config: &unit_tests_config
        platform: linux
        inputs:
        - name: cf-ops-automation
        - name: concourse-meta
        outputs:
        - name: test-reports
        run:
          dir: cf-ops-automation
          path: /bin/bash
          args:
          - -ce
          - |
            echo "Testing environment config:"
            echo "---------------------------"
            echo "fly $(fly --version)"
            ruby --version
            bundle --version
            bundle exec rspec --version
            cc-test-reporter --version
            echo "---------------------------"
            echo "Setup Code Climate pre-requisites"
            cd ../concourse-meta
            BUILD_TEAM=$(if [ -f build-team-name ];then cat build-team-name;fi)
            BUILD_PIPELINE=$(if [ -f build-pipeline-name ];then cat build-pipeline-name;fi)
            BUILD_JOB=$(if [ -f build-job-name ];then cat build-job-name;fi)
            BUILD_ID=$(if [ -f build-id ];then cat build-id;fi)
            BUILD_NAME=$(if [ -f build-name ];then cat build-name;fi)
            ATC_EXTERNAL_URL=$(if [ -f atc-external-url ];then cat atc-external-url;fi)
            BUILD_INFO=$(echo "$BUILD_TEAM/$BUILD_PIPELINE/$BUILD_JOB/$BUILD_NAME - $BUILD_ID")
            cd -
            export GIT_COMMIT_SHA=$(eval $GIT_SHA_CMD)
            export GIT_BRANCH=$(eval $GIT_BRANCH_CMD)
            export CI_NAME=${BUILD_INFO}
            export CI_BUILD_ID=${BUILD_ID}
            export CI_BUILD_URL=$ATC_EXTERNAL_URL/builds/${BUILD_ID}
            echo "Running tests for $GIT_COMMIT_SHA@$GIT_BRANCH"
            fly -t cf-ops-automation login -u ((concourse-username)) -p '((concourse-password))' -k -c ((concourse-url))
            echo "Setup Code Climate coverage"
            cc-test-reporter before-build
            bundle exec rspec --format documentation --format html --out ../test-reports/rspec-results.html
            echo "Sending coverage to Code Climate"
            cc-test-reporter after-build -d
        params:
          CC_TEST_REPORTER_ID: ((code-climate-test-reporter-id))
          COVERAGE: true
          GIT_SHA_CMD: cat .git/ref
          GIT_BRANCH_CMD: echo "((cf-ops-automation-git-branch))"

  - name: acceptance-tests
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation-docker-image-develop
          passed: [unit-tests, integration-tests]
          trigger: true
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [unit-tests, integration-tests]
      - task: run-acceptance-tests
        attempts: 2
        image: cf-ops-automation-docker-image-develop
        timeout: 30m
        config: &acceptance_tests_config
          platform: linux
          inputs:
          - name: cf-ops-automation
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -ce
            - |
              ruby --version
              bundle --version
              bundle exec cucumber

  - name: integration-tests
    on_failure: *on_failure_alert
    serial_groups: [integration]
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
        - get: cf-ops-automation-docker-image-develop
          passed: [build-cached-image]
          trigger: true
      - task: setup-pre-requisites
        attempts: 1
        image: cf-ops-automation-docker-image-develop
        config: &integration_tests_setup_pre_requisites_task_config
          platform: linux
          inputs:
          - name: cf-ops-automation
          outputs:
          - name: prereqs
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              echo "Setup pre-requisites"
              cp cf-ops-automation/ci/bootstrap_coa_env/inactive-steps-prereqs.yml  prereqs/inactive-steps-prereqs.yml
              cp cf-ops-automation/ci/bootstrap_coa_env/git-server-manifest-prereqs.yml  prereqs/git-server-manifest-prereqs.yml
              cp cf-ops-automation/ci/bootstrap_coa_env/pipeline-vars-prereqs.yml  prereqs/pipeline-vars-prereqs.yml
              echo "  bot-github-access-token: ((cf-ops-automation-git-hub-token))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-webhook: ((slack-webhook))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-channel: ((slack-channel))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-proxy:" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-disable: ((slack-disable-it))" >> prereqs/pipeline-vars-prereqs.yml
              echo "  slack-proxy-https-tunnel:" >> prereqs/pipeline-vars-prereqs.yml
              printenv INTEGRATION_TEST_PREREQS > prereqs/integration-test-prereqs.yml
        # it is not possible to include it as config param, otherwise we get an deserialization error
        params:
            INTEGRATION_TEST_PREREQS: ((integration-test-prereqs))


      - task: upload-pipelines
        attempts: 2
        image: cf-ops-automation-docker-image-develop
        config: &integration_tests_upload-pipelines_task_config
          platform: linux
          inputs:
            - name: cf-ops-automation
            - name: prereqs
          outputs:
            - name: coa-logs
          run:
            path: /bin/bash
            args:
              - -ce
              - |
                ./cf-ops-automation/scripts/run_integration_tests.rb
                if [ -f ./coa-logs/stdout.log ];then
                  cat ./coa-logs/stdout.log
                fi
          params:
            PREREQS_PATHS_RAW: "./prereqs/*.yml"
            COA_LOG_PATH: "../../../../coa-logs"
        on_failure:
          task: dump-coa-log-file
          image: cf-ops-automation-docker-image-develop
          config:
            platform: linux
            inputs:
              - name: coa-logs
            run:
              path: /bin/bash
              args:
                - -ce
                - |
                  if [ -f ./coa-logs/stdout.log ];then
                    cat ./coa-logs/stdout.log
                  else
                    echo "Sorry, no logfile found :-("
                  fi
  - name: update-documentation
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [acceptance-tests]
        - get: cf-ops-automation-docker-image-develop
          trigger: true
          passed: [acceptance-tests]

      - task: generate-living-documentation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/cf-ops-automation
              tag: develop-latest

          inputs:
          - name: cf-ops-automation
          outputs:
          - name: cf-ops-automation-living-documentation
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              git clone cf-ops-automation cf-ops-automation-living-documentation
              cd cf-ops-automation-living-documentation/
              gh-md-toc --insert Readme.md
              cat Readme.md|grep -v 'Added by:' >tmp.md && mv tmp.md Readme.md
              git add -A
              CHANGE_DETECTED_COUNTER=$(git status --porcelain|wc -l)
              if [ ${CHANGE_DETECTED_COUNTER} -gt 0 ]
              then
                 git commit -m "[ci skip] Living documentation auto-update"
              else
                 echo "No change detected, skip commit"
              fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
      - put: ci-develop
        params:
          repository: cf-ops-automation-living-documentation
          rebase: true


  - name: merge-to-master
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: ci-master
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [update-documentation]
        - get: cf-ops-automation-docker-image-develop
          passed: [update-documentation]
      - put: ci-master
        params:
          repository: cf-ops-automation

  - name: ship-it
    on_failure: *on_failure_alert
    serial: true
    serial_groups: [version]
    plan:
      - in_parallel:
        - get: version
          params: {bump: final}
        - get: cf-ops-automation
          resource: ci-master
          passed: [merge-to-master]
#        - get: cf-ops-automation-docker-image-develop
#          passed: [merge-to-master]
      - task: generate-changelog
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/cf-ops-automation
              tag: develop-latest
          inputs:
          - name: cf-ops-automation
          - name: version
          outputs:
          - name: cf-ops-automation-changelog
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              RELEASE_VERSION=$(cat version/version)
              git clone cf-ops-automation cf-ops-automation-changelog
              cd cf-ops-automation-changelog/
              bundle exec github_changelog_generator --no-author --future-release "v${RELEASE_VERSION}"
              mkdir -p docs/features/
              bundle exec cucumber -f html --out docs/features/features.html -f pretty --out docs/features/features.md -f pretty --no-color --no-source
              git add -A
              CHANGE_DETECTED_COUNTER=$(git status --porcelain|wc -l)
              if [ ${CHANGE_DETECTED_COUNTER} -gt 0 ]
              then
                 git commit -m "[ci skip] auto-update for release ${RELEASE_VERSION} - Changelog update"
              else
                 echo "No change detected, skip commit"
              fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))
      - put: ci-master
        params:
          repository: cf-ops-automation-changelog
          rebase: true
      - task: generate-release
#        image: cf-ops-automation-docker-image
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/cf-ops-automation
              tag: develop-latest
          inputs:
          - name: cf-ops-automation
          - name: version
          outputs:
          - name: github-info
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -ce
            - |
              RELEASE_VERSION=$(cat ../version/version)
              OUTPUT_DIR="../github-info"
              OUTPUT_FILE="${OUTPUT_DIR}/github_release.md"
              bundle exec github_changelog_generator --no-author  -o ${OUTPUT_FILE} --header-label "**Release notes**" --future-release "v${RELEASE_VERSION}" --since-tag "v${RELEASE_VERSION}"
              cd ${OUTPUT_DIR}
              tar czvf cf-ops-automation.tgz ../cf-ops-automation
          params:
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))
      - put: gh-release
        params:
          name: version/version
          tag_prefix: v
          tag: version/version
          body: github-info/github_release.md
          globs:
           - github-info/cf-ops-automation.tgz
      - put: version
        params: {bump: patch, pre: rc}

  - name: merge-changelog-to-develop
    on_failure: *on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: ci-master
          trigger: true
          passed: [ship-it]
        - get: ci-develop
      - put: ci-develop
        params:
          repository: cf-ops-automation

  - name: PullRequests-build-cached-image
    on_failure: &PR_on_failure_alert
      put: slack-alert
      params:
        channel: ((slack-channel))
        text: |
          $TEXT_FILE_CONTENT
          Failed to run <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME/$BUILD_NAME>
        text_file: cf-ops-automation/.git/resource/url
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - get: PR-develop
        trigger: true
        version: every
      - put: PR-develop
        params:
          path: PR-develop
          status: pending
      - put: cf-ops-automation-docker-image-PR
        attempts: 3
        params:
          build: PR-develop
          tag: PR-develop/.git/resource/pr
          tag_prefix: PR-
        on_failure: &PR_failure
          put: PR-develop
          params:
            path: PR-develop
            status: failure

  - name: PullRequests-UnitTests
    on_failure: *PR_on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: concourse-meta
        - get: cf-ops-automation-docker-image-PR
          passed: [PullRequests-build-cached-image]
          trigger: true
        - get: cf-ops-automation
          resource: PR-develop
          trigger: true
          version: every
          passed: [PullRequests-build-cached-image]
      - put: PR-develop
        params:
          path: cf-ops-automation
          status: pending
      - task: test-pr
        attempts: 2
        image: cf-ops-automation-docker-image-PR
        timeout: 30m
        config: *unit_tests_config
        params:
          GIT_SHA_CMD: cat .git/resource/head_sha
          GIT_BRANCH_CMD: cat .git/resource/head_name
        on_failure: *PR_failure

  - name: PullRequests-AcceptanceTests
    on_failure: *PR_on_failure_alert
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation-docker-image-PR
          passed: [PullRequests-UnitTests]
          trigger: true
        - get: cf-ops-automation
          resource: PR-develop
          trigger: true
          version: every
          passed: [PullRequests-UnitTests]
      - task: acceptance-test-pr
        attempts: 2
        image: cf-ops-automation-docker-image-PR
        timeout: 30m
        config: *acceptance_tests_config
        on_failure: &PR_coa_failure
          put: PR-develop
          params:
            path: cf-ops-automation
            status: failure
  - name: PullRequests-IntegrationTests
    on_failure: *PR_on_failure_alert
    serial_groups: [integration]
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation-docker-image-PR
          passed: [PullRequests-build-cached-image]
          trigger: true
        - get: cf-ops-automation
          resource: PR-develop
          trigger: true
          version: every
          passed: [PullRequests-build-cached-image]
      - task: setup-pre-requisites
        attempts: 1
        image: cf-ops-automation-docker-image-PR
        config: *integration_tests_setup_pre_requisites_task_config
        on_failure: *PR_coa_failure
        # it is not possible to include it as config param, otherwise we get an deserialization error
        params:
          INTEGRATION_TEST_PREREQS: ((integration-test-prereqs))

      - task: upload-pipelines
        attempts: 2
        image: cf-ops-automation-docker-image-PR
        config: *integration_tests_upload-pipelines_task_config
        on_failure: *PR_coa_failure

  - name: PullRequests-Success
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: PR-develop
          trigger: true
          version: every
          passed: [PullRequests-AcceptanceTests, PullRequests-IntegrationTests]
      - put: PR-develop
        params:
          path: cf-ops-automation
          status: success
      - put: slack-alert
        params:
          channel: ((slack-channel))
          text: |
            $TEXT_FILE_CONTENT
            Pull request successfully ran tests :<$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/>
          text_file: cf-ops-automation/.git/resource/url
          icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
          username: Concourse
  - name: run-tests-for-hotfix-branch
    plan:
    - in_parallel:
      - get: concourse-meta
      - get: cf-ops-automation-docker-image-develop
        passed: [build-cached-image]
        trigger: true
      - get: cf-ops-automation
        resource: hotfix-branch
        trigger: true
    - task: run-tests
      attempts: 2
      image: cf-ops-automation-docker-image-develop
      config: *unit_tests_config
      params:
        GIT_BRANCH_CMD: echo hotfix-branch

  - name: ship-hotfix
    serial: true
    plan:
      - in_parallel:
        - get: cf-ops-automation
          resource: hotfix-branch
          passed: [run-tests-for-hotfix-branch]
      - task: generate-release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
          inputs:
          - name: cf-ops-automation
          outputs:
          - name: github-info
          run:
            dir: cf-ops-automation
            path: sh
            args:
            - -ce
            - |
              OUTPUT_DIR="../github-info"
              OUTPUT_FILE="${OUTPUT_DIR}/github_release.md"
              cp hotfix.version ${OUTPUT_DIR}/hotfix.version
              cp hotfix_release_notes.md ${OUTPUT_FILE}
              cd ${OUTPUT_DIR}
              tar czvf cf-ops-automation.tgz ../cf-ops-automation
              echo "hotfix" > branch.name
      - put: gh-release
        params:
          name: github-info/hotfix.version
          tag_prefix: v
          tag: github-info/hotfix.version
          body: github-info/github_release.md
          commitish: github-info/branch.name
          globs:
           - github-info/cf-ops-automation.tgz

  - name: major
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: major, pre: rc}
    - put: version
      params: {file: version/version}

  - name: minor
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: minor, pre: rc}
    - put: version
      params: {file: version/version}

  - name: patch
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: patch, pre: rc}
    - put: version
      params: {file: version/version}

groups:
  - name: Overview
    jobs:
      - patch
      - minor
      - major
      - build-cached-image
      - unit-tests
      - acceptance-tests
      - integration-tests
      - update-documentation
      - merge-to-master
      - ship-it
      - merge-changelog-to-develop
      - PullRequests-build-cached-image
      - PullRequests-UnitTests
      - PullRequests-AcceptanceTests
      - PullRequests-IntegrationTests
      - PullRequests-Success
      - run-tests-for-hotfix-branch
      - ship-hotfix

  - name: Releases
    jobs:
      - patch
      - minor
      - major
      - build-cached-image
      - unit-tests
      - acceptance-tests
      - integration-tests
      - update-documentation
      - merge-to-master
      - ship-it
      - merge-changelog-to-develop

  - name: Pull-Requests
    jobs:
      - PullRequests-build-cached-image
      - PullRequests-UnitTests
      - PullRequests-AcceptanceTests
      - PullRequests-IntegrationTests
      - PullRequests-Success

  - name: Hotfixes
    jobs:
      - build-cached-image
      - run-tests-for-hotfix-branch
      - ship-hotfix
