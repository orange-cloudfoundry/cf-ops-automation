---
resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

  - name: pull-request
    type: docker-image
    source:
      repository: jtarchie/pr

resources:
- name: failure-alert
  type: slack-notification
  source:
    url: ((slack-webhook))

- name: cf-ops-automation-docker-image
  type: docker-image
  source:
    repository: orangecloudfoundry/cf-ops-automation
    username: ((dockerhub-username))
    password: ((dockerhub-password))

- name: version
  type: semver
  source:
    driver: git
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: version
    initial_version: 1.3.1
    file: version

- name: ci-develop
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: ((cf-ops-automation-git-branch))
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

- name: ci-master
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: master
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

- name: PR-develop
  type: pull-request
  source:
    repo: ((cf-ops-automation-git-hub-owner))/((cf-ops-automation-git-hub-repository))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    access_token: ((cf-ops-automation-git-hub-token))
    base: develop
    skip_ssl_verification: ((cf-ops-automation-git-insecure))
    authorship_restriction: true


- name: cf-ops-automation-dependencies
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    branch: ((cf-ops-automation-git-branch))
    skip_ssl_verification: ((cf-ops-automation-git-insecure))
    paths: [ "Gemfile*", "Dockerfile" ]

- name: gh-release
  type: github-release
  source:
    owner: ((cf-ops-automation-git-hub-owner))
    repository: ((cf-ops-automation-git-hub-repository))
    access_token: ((cf-ops-automation-git-hub-token))

- name: cf-ops-automation-test-secrets
  type: git
  source:
    uri: ((cf-ops-automation-test-secrets-uri))
    branch: master
    skip_ssl_verification: ((cf-ops-automation-test-git-insecure))

- name: cf-ops-automation-test-templates
  type: git
  source:
    uri: ((cf-ops-automation-test-templates-uri))
    branch: master
    skip_ssl_verification: ((cf-ops-automation-test-git-insecure))

- name: hotfix-branch
  type: git
  source:
    uri: ((cf-ops-automation-git-uri))
    username: ((cf-ops-automation-git-username))
    password: ((cf-ops-automation-git-password))
    branch: hotfix
    skip_ssl_verification: ((cf-ops-automation-git-insecure))

jobs:

  - name: build-cached-image
    on_failure: &on_failure_alert
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: |
          Failed to run <$ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME/$BUILD_NAME>
          https://github.com/orange-cloudfoundry/cf-ops-automation/commit/$TEXT_FILE_CONTENT
        text_file: cf-ops-automation/.git/ref
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
    - get: cf-ops-automation
      resource: ci-develop
    - get: cf-ops-automation-dependencies
      trigger: true
    - put: cf-ops-automation-docker-image
      params:
        build: cf-ops-automation-dependencies
        build_args: &docker_build_args
          CONCOURSE_VERSION: 3.14.1
          CONCOURSE_SHA: aeb91f5d464b71de44decbd34c6696325c14d4f569c76c1171c124e2a773b02e

  - name: unit-tests
    on_failure: *on_failure_alert
    serial: true
    plan:
    - aggregate:
      - get: cf-ops-automation-docker-image
        passed: [build-cached-image]
        trigger: true
      - get: cf-ops-automation
        resource: ci-develop
        trigger: true
    - task: run-tests
      attempts: 2
      image: cf-ops-automation-docker-image
      timeout: 30m
      config: &unit_tests_config
        platform: linux
        inputs:
        - name: cf-ops-automation
        outputs:
        - name: test-reports
        run:
          dir: cf-ops-automation
          path: /bin/bash
          args:
          - -ce
          - |
            echo "fly $(fly --version)"
            ruby --version
            bundle --version
            fly -t cf-ops-automation login -u ((concourse-username)) -p '((concourse-password))' -k -c ((concourse-url))
            cc-test-reporter before-build
            bundle exec rspec --format documentation --format html --out ../test-reports/rspec-results.html
            cc-test-reporter after-build -d
        params:
          CC_TEST_REPORTER_ID: ((code-climate-test-reporter-id))
          COVERAGE: true

  - name: acceptance-tests
    on_failure: *on_failure_alert
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation-docker-image
          passed: [unit-tests]
          trigger: true
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [unit-tests]
      - task: run-acceptance-tests
        attempts: 2
        image: cf-ops-automation-docker-image
        timeout: 30m
        config: &acceptance_tests_config
          platform: linux
          inputs:
          - name: cf-ops-automation
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -ce
            - |
              ruby --version
              bundle --version
              bundle exec cucumber

  - name: integration-tests
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [unit-tests]
        - get: cf-ops-automation-docker-image
          passed: [unit-tests]
        - get: cf-ops-automation-test-templates
        - get: cf-ops-automation-test-secrets
          trigger: true

      - task: setup-pre-requisites
        attempts: 1
        image: cf-ops-automation-docker-image
        config:
          platform: linux
          inputs:
          - name: cf-ops-automation
          outputs:
          - name: paas-templates
#          - name: secrets
          - name: all-pipelines
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -cex
#              fly -t cf-ops-automation login -u ((concourse-username)) -p ((concourse-password)) -k -c ((concourse-url))
#              cp -r spec/scripts/generate-depls/fixtures/secrets/{shared,simple-depls} ../secrets|true
#              cd ../secrets
#              git init .
#              git add .
#              git commit -m "update secrets"
#              PIPELINE_DIR=../all-pipelines/pipelines
#              mkdir -p ${PIPELINE_DIR}
#              cp -r spec/scripts/generate-depls/fixtures/references/simple-depls*.yml ${PIPELINE_DIR}|true
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              cp -r spec/scripts/generate-depls/fixtures/templates/simple-depls ../paas-templates|true
              cd ../paas-templates
              git init .
              git add .
              git commit -m "update templates"
        params:
          GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
          GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
#      - put: cf-ops-automation-test-secrets
#        params:
#          repository: secrets
#          force: true
      - put: cf-ops-automation-test-templates
        params:
          repository: paas-templates
          force: true
      - task: generate-all-pipelines
        input_mapping: {scripts-resource: cf-ops-automation,templates-resource: paas-templates,secrets-resource: cf-ops-automation-test-secrets}
        output_mapping: {result-dir: all-pipelines}
        file: cf-ops-automation/concourse/tasks/generate-all-pipelines.yml
#      - task: set-all-init-pipelines
#        input_mapping: {scripts-resource: cf-ops-automation,templates-resource: paas-templates,secrets-resource: cf-ops-automation-test-secrets, pipelines-resource: all-pipelines}
#        file: cf-ops-automation/concourse/tasks/bootstrap_init_pipelines.yml
#        params:
#          ATC_EXTERNAL_URL: ((concourse-url))
#          FLY_USERNAME: ((concourse-username))
#          FLY_PASSWORD:  ((concourse-password))
      - task: upload-pipelines
        input_mapping: {secrets-resource: cf-ops-automation-test-secrets}
        attempts: 1
        image: cf-ops-automation-docker-image
        config:
          platform: linux
          inputs:
          - name: cf-ops-automation
          - name: paas-templates
          - name: secrets-resource
          - name: all-pipelines
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -cex
            - |
              fly -t cf-ops-automation login -u ((concourse-username)) -p '((concourse-password))' -k -c ((concourse-url))
              export SECRETS=../secrets-resource
              export TARGET_NAME=cf-ops-automation
              export PIPELINES_DIR=../all-pipelines/pipelines
              ./scripts/concourse-manual-pipelines-update.rb -dsimple-depls --no-interactive --fail-on-error


      - task: generate-auto-trigger-flight-plan
        output_mapping: {result-dir: init-auto-trigger-flight-plan}
        config:
          platform: linux
          image_resource:
            type: docker-image
            source: {repository: concourse/busyboxplus, tag: "git"}
          inputs:
            - name: all-pipelines
          outputs:
            - name: result-dir
          run:
            path: sh
            args:
            - -exc
            - |
              DEST_DIR=$(pwd)/result-dir
              cd all-pipelines/pipelines
              for aFile in $(ls *init-ref.yml)
              do
              PIPELINE=$(basename ${aFile} .yml)
              DEPLS=${PIPELINE%%-init-ref}
              echo "trigger-job -j ${PIPELINE}/update-pipeline-${DEPLS}"  >> ${DEST_DIR}/flight-plan
              done
      - task: fly-into-concourse
        input_mapping: {fly-cmd: init-auto-trigger-flight-plan}
        output_mapping: {flight-report: concourse-<%= depls %>-init-report}
        file: cf-ops-automation/concourse/tasks/fly_execute_commands.yml
        params:
          ATC_EXTERNAL_URL: ((concourse-url))
          FLY_USERNAME: ((concourse-username))
          FLY_PASSWORD:  '((concourse-password))'

  - name: update-documentation
    on_failure: *on_failure_alert
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [acceptance-tests]
        - get: cf-ops-automation-docker-image
          trigger: true
          passed: [acceptance-tests]

      - task: generate-living-documentation
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/cf-ops-automation
          inputs:
          - name: cf-ops-automation
          outputs:
          - name: cf-ops-automation-living-documentation
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              git clone cf-ops-automation cf-ops-automation-living-documentation
              cd cf-ops-automation-living-documentation/
              gh-md-toc --insert Readme.md
              cat Readme.md|grep -v 'Added by:' >tmp.md && mv tmp.md Readme.md
              git add -A
              CHANGE_DETECTED_COUNTER=$(git status --porcelain|wc -l)
              if [ ${CHANGE_DETECTED_COUNTER} -gt 0 ]
              then
                 git commit -m "[ci skip] Living documentation auto-update"
              else
                 echo "No change detected, skip commit"
              fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
      - put: ci-develop
        params:
          repository: cf-ops-automation-living-documentation
          rebase: true


  - name: merge-to-master
    on_failure: *on_failure_alert
    serial: true
    plan:
      - aggregate:
        - get: ci-master
        - get: cf-ops-automation
          resource: ci-develop
          trigger: true
          passed: [update-documentation]
        - get: cf-ops-automation-docker-image
          passed: [update-documentation]
      - put: ci-master
        params:
          repository: cf-ops-automation

  - name: ship-it
    on_failure: *on_failure_alert
    serial: true
    serial_groups: [version]
    plan:
      - aggregate:
        - get: version
          params: {bump: final}
        - get: cf-ops-automation
          resource: ci-master
          passed: [merge-to-master]
#        - get: cf-ops-automation-docker-image
#          passed: [merge-to-master]
      - task: generate-changelog
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/cf-ops-automation
          inputs:
          - name: cf-ops-automation
          - name: version
          outputs:
          - name: cf-ops-automation-changelog
          run:
            path: /bin/bash
            args:
            - -ce
            - |
              git config --global user.email "$GIT_USER_EMAIL"
              git config --global user.name "$GIT_USER_NAME"

              RELEASE_VERSION=$(cat version/version)
              git clone cf-ops-automation cf-ops-automation-changelog
              cd cf-ops-automation-changelog/
              bundle exec github_changelog_generator --no-author --future-release "v${RELEASE_VERSION}"
              mkdir -p docs/features/
              bundle exec cucumber -f html --out docs/features/features.html -f pretty --out docs/features/features.md -f pretty --no-color --no-source
              git add -A
              CHANGE_DETECTED_COUNTER=$(git status --porcelain|wc -l)
              if [ ${CHANGE_DETECTED_COUNTER} -gt 0 ]
              then
                 git commit -m "[ci skip] auto-update for release ${RELEASE_VERSION} - Changelog update"
              else
                 echo "No change detected, skip commit"
              fi
          params:
            GIT_USER_NAME: "Orange Cloud Foundry SKC CI Server"
            GIT_USER_EMAIL: "codex.clara-cloud-ops@orange.com"
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))
      - put: ci-master
        params:
          repository: cf-ops-automation-changelog
          rebase: true
      - task: generate-release
#        image: cf-ops-automation-docker-image
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: orangecloudfoundry/cf-ops-automation
          platform: linux
          inputs:
          - name: cf-ops-automation
          - name: version
          outputs:
          - name: github-info
          run:
            dir: cf-ops-automation
            path: /bin/bash
            args:
            - -ce
            - |
              RELEASE_VERSION=$(cat ../version/version)
              OUTPUT_DIR="../github-info"
              OUTPUT_FILE="${OUTPUT_DIR}/github_release.md"
              bundle exec github_changelog_generator --no-author  -o ${OUTPUT_FILE} --header-label "**Release notes**" --future-release "v${RELEASE_VERSION}" --since-tag "v${RELEASE_VERSION}"
              cd ${OUTPUT_DIR}
              tar czvf cf-ops-automation.tgz ../cf-ops-automation
          params:
            CHANGELOG_GITHUB_TOKEN: ((cf-ops-automation-git-hub-token))
      - put: gh-release
        params:
          name: version/version
          tag_prefix: v
          tag: version/version
          body: github-info/github_release.md
          globs:
           - github-info/cf-ops-automation.tgz
      - put: version
        params: {bump: patch, pre: rc}

  - name: merge-changelog-to-develop
    on_failure: *on_failure_alert
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation
          resource: ci-master
          trigger: true
          passed: [ship-it]
        - get: ci-develop
      - put: ci-develop
        params:
          repository: cf-ops-automation

  - name: PullRequests-build-cached-image
    on_failure: &PR_on_failure_alert
      put: failure-alert
      params:
        channel: ((slack-channel))
        text: |
          $TEXT_FILE_CONTENT
          Failed to run <$ATC_EXTERNAL_URL/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME/$BUILD_NAME>
        text_file: cf-ops-automation/.git/url
        icon_url: http://cl.ly/image/3e1h0H3H2s0P/concourse-logo.png
        username: Concourse
    plan:
      - get: PR-develop
        trigger: true
        version: every

      - put: PR-develop
        params:
          path: PR-develop
          status: pending

      - put: cf-ops-automation-docker-image
        params:
          build: PR-develop
          tag: PR-develop/.git/id
          tag_prefix: PR-
          build_args: *docker_build_args
        on_failure: &PR_failure
          put: PR-develop
          params:
            path: PR-develop
            status: failure

  - name: PullRequests-UnitTests
    on_failure: *PR_on_failure_alert
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation-docker-image
          passed: [PullRequests-build-cached-image]
          trigger: true
        - get: cf-ops-automation
          resource: PR-develop
          trigger: true
          version: every
          passed: [PullRequests-build-cached-image]
      - put: PR-develop
        params:
          path: cf-ops-automation
          status: pending
      - task: test-pr
        attempts: 2
        image: cf-ops-automation-docker-image
        timeout: 30m
        config: *unit_tests_config
        on_failure: *PR_failure

  - name: PullRequests-AcceptanceTests
    on_failure: *PR_on_failure_alert
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation-docker-image
          passed: [PullRequests-UnitTests]
          trigger: true
        - get: cf-ops-automation
          resource: PR-develop
          trigger: true
          version: every
          passed: [PullRequests-UnitTests]
      - task: acceptance-test-pr
        attempts: 2
        image: cf-ops-automation-docker-image
        timeout: 30m
        config: *acceptance_tests_config
        on_success:
          put: PR-develop
          params:
            path: cf-ops-automation
            status: success
        on_failure: *PR_failure


  - name: run-tests-for-hotfix-branch
    plan:
    - aggregate:
      - get: cf-ops-automation-docker-image
        passed: [build-cached-image]
        trigger: true
      - get: cf-ops-automation
        resource: hotfix-branch
        trigger: true
    - task: run-tests
      attempts: 2
      image: cf-ops-automation-docker-image
      config: *unit_tests_config

  - name: ship-hotfix
    serial: true
    plan:
      - aggregate:
        - get: cf-ops-automation
          resource: hotfix-branch
          passed: [run-tests-for-hotfix-branch]
      - task: generate-release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: alpine
          inputs:
          - name: cf-ops-automation
          outputs:
          - name: github-info
          run:
            dir: cf-ops-automation
            path: sh
            args:
            - -ce
            - |
              OUTPUT_DIR="../github-info"
              OUTPUT_FILE="${OUTPUT_DIR}/github_release.md"
              cp hotfix.version ${OUTPUT_DIR}/hotfix.version
              cp hotfix_release_notes.md ${OUTPUT_FILE}
              cd ${OUTPUT_DIR}
              tar czvf cf-ops-automation.tgz ../cf-ops-automation
              echo "hotfix" > branch.name
      - put: gh-release
        params:
          name: github-info/hotfix.version
          tag_prefix: v
          tag: github-info/hotfix.version
          body: github-info/github_release.md
          commitish: github-info/branch.name
          globs:
           - github-info/cf-ops-automation.tgz

  - name: major
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: major, pre: rc}
    - put: version
      params: {file: version/version}

  - name: minor
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: minor, pre: rc}
    - put: version
      params: {file: version/version}

  - name: patch
    on_failure: *on_failure_alert
    serial_groups: [version]
    plan:
    - get: version
      params: {bump: patch, pre: rc}
    - put: version
      params: {file: version/version}
